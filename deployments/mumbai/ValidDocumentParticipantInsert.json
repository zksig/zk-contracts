{
  "address": "0xa295b447f30b3c947CAD05eB09aBDf7D3AdA905F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "input",
          "type": "uint256[3]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71429fb3ece0d408c96411c2355d78b8ba9da30858275758d1734b2940092dcd",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xa295b447f30b3c947CAD05eB09aBDf7D3AdA905F",
    "transactionIndex": 0,
    "gasUsed": "1549312",
    "logsBloom": "0x
    "blockHash": "0x9bf299121b619ea296d35276c44d0f86729ef1b688b48accb9bad3cb0170f30c",
    "transactionHash": "0x71429fb3ece0d408c96411c2355d78b8ba9da30858275758d1734b2940092dcd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32152053,
        "transactionHash": "0x71429fb3ece0d408c96411c2355d78b8ba9da30858275758d1734b2940092dcd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013d1645dcbc00000000000000000000000000000000000000000000000000002688083e56913e4000000000000000000000000000000000000000000002d6e45ac5042e92f8a110000000000000000000000000000000000000000000000000254af1f879d53e4000000000000000000000000000000000000000000002d6e45c021a746fb4a11",
        "logIndex": 0,
        "blockHash": "0x9bf299121b619ea296d35276c44d0f86729ef1b688b48accb9bad3cb0170f30c"
      }
    ],
    "blockNumber": 32152053,
    "cumulativeGasUsed": "1549312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a4cc6530f7d7e3168582a75638f1dc37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"input\",\"type\":\"uint256[3]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ValidDocumentParticipantInsert.sol\":\"ValidDocumentParticipantInsert\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ValidDocumentParticipantInsert.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nlibrary ValidDocumentParticipantInsertPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ValidDocumentParticipantInsert {\\n  using ValidDocumentParticipantInsertPairing for *;\\n  struct VerifyingKey {\\n    ValidDocumentParticipantInsertPairing.G1Point alfa1;\\n    ValidDocumentParticipantInsertPairing.G2Point beta2;\\n    ValidDocumentParticipantInsertPairing.G2Point gamma2;\\n    ValidDocumentParticipantInsertPairing.G2Point delta2;\\n    ValidDocumentParticipantInsertPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ValidDocumentParticipantInsertPairing.G1Point A;\\n    ValidDocumentParticipantInsertPairing.G2Point B;\\n    ValidDocumentParticipantInsertPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ValidDocumentParticipantInsertPairing.G1Point(\\n      19707546691375492439049195476765907453567623936033044097357916657896179314901,\\n      10864754458864178698245809791256443822198435701990478246863789828042876637353\\n    );\\n\\n    vk.beta2 = ValidDocumentParticipantInsertPairing.G2Point(\\n      [\\n        1170931191278462601990942362056460176537725416212805808664269645582356004671,\\n        12768581099140775072563846415890328386512227408236282741297298367101464191635\\n      ],\\n      [\\n        151418159427816678000654789549358554497407268887897868662784317643228105909,\\n        5667330649696282162322023846534744965502332199770470059788262228431609671708\\n      ]\\n    );\\n    vk.gamma2 = ValidDocumentParticipantInsertPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ValidDocumentParticipantInsertPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.IC = new ValidDocumentParticipantInsertPairing.G1Point[](4);\\n\\n    vk.IC[0] = ValidDocumentParticipantInsertPairing.G1Point(\\n      5653808860741563812418635591309492483392240076520753109833675178990738353495,\\n      19362131506331875847331207265724689123174275235997969688546395369769971002644\\n    );\\n\\n    vk.IC[1] = ValidDocumentParticipantInsertPairing.G1Point(\\n      2271236600700924298089762541854771779838632187164649803240193754754732850877,\\n      8423959100536085005028480191707271211436157635945428747266849094680740613759\\n    );\\n\\n    vk.IC[2] = ValidDocumentParticipantInsertPairing.G1Point(\\n      13058127456123835132013615065587218549258472805976918287203436508157328489829,\\n      11918442847318243027610224477271757147687894871234895060959247446337875873675\\n    );\\n\\n    vk.IC[3] = ValidDocumentParticipantInsertPairing.G1Point(\\n      16764757919692804197242433717351808471143322537799850076243403474593013585271,\\n      11530285865957447234821184787700495881677647630314615284680851527550241932571\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ValidDocumentParticipantInsertPairing.G1Point\\n      memory vk_x = ValidDocumentParticipantInsertPairing.G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ValidDocumentParticipantInsertPairing.addition(\\n        vk_x,\\n        ValidDocumentParticipantInsertPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ValidDocumentParticipantInsertPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ValidDocumentParticipantInsertPairing.pairingProd4(\\n        ValidDocumentParticipantInsertPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[3] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ValidDocumentParticipantInsertPairing.G1Point(a[0], a[1]);\\n    proof.B = ValidDocumentParticipantInsertPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ValidDocumentParticipantInsertPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x52b486896df454c04b039531f5b29d4487db2fdd945508f3c62729d0d694792b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611b21610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806311479fea1461003a575b600080fd5b610054600480360381019061004f9190611603565b61006a565b6040516100619190611687565b60405180910390f35b60006100746111d3565b604051806040016040528087600060028110610093576100926116a2565b5b60200201518152602001876001600281106100b1576100b06116a2565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6116a2565b5b6020020151600060028110610103576101026116a2565b5b6020020151815260200188600060028110610121576101206116a2565b5b6020020151600160028110610139576101386116a2565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646116a2565b5b602002015160006002811061017d5761017c6116a2565b5b602002015181526020018860016002811061019b5761019a6116a2565b5b60200201516001600281106101b3576101b26116a2565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46116a2565b5b6020020151815260200185600160028110610203576102026116a2565b5b602002015181525081604001819052506000600367ffffffffffffffff8111156102305761022f61133a565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60038110156102b7578481600381106102805761027f6116a2565b5b6020020151828281518110610298576102976116a2565b5b60200260200101818152505080806102af90611700565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b9050806080015151600186516103299190611748565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906117d9565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36116a2565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611845565b60405180910390fd5b6104438261043e85608001516001856104059190611748565b81518110610416576104156116a2565b5b60200260200101518a8581518110610431576104306116a2565b5b60200260200101516109c9565b610aa1565b9150808061045090611700565b915050610387565b50610482818360800151600081518110610475576104746116a2565b5b6020026020010151610aa1565b90506104b86104948660000151610b9f565b8660200151846000015185602001518587604001518b604001518960600151610c44565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de611206565b60405180604001604052807f2b92137e06ae2c6638beaec43338d5adb29e45269025c0180b16b773576730d581526020017f18053baca530ce87ed50dce7a7c99526aa9aba9f1cd2d6dec647f93bdf29d0a98152508160000181905250604051806040016040528060405180604001604052807f0296b93bc46869f63a48f0717dcaf9450b45664e7147066010312df0b8f53f3f81526020017f1c3ac2c37c1e8d41f0277700d2e1c90b3d375ab540e6985b07d4c1941993a293815250815260200160405180604001604052807e55b31baec8fbb9cfb471ccf33b28c57cff7a9f7498065aa7bd41115fc6ccb581526020017f0c87987109cfdb68e131ac0ee8aa92a36b333a842b5c5813c32d5c5f38ca301c8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600467ffffffffffffffff8111156107a4576107a361133a565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca61124d565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f0c7ff14202bfa0c6dac54bcaf366ddf615c802d66eb71051d4cb852346482d5781526020017f2ace93fcbcaf3e75ffa3986772012b9e51787cba6f764af738ac70780854ad148152508160800151600081518110610853576108526116a2565b5b602002602001018190525060405180604001604052807f0505796fb09ad5bce4f987120ead79bbdbd236aebc233112e16341210804febd81526020017f129fcab916a671d6f555f727f5f35f6e4eb679683427210662e3e435e8ffce7f81525081608001516001815181106108cb576108ca6116a2565b5b602002602001018190525060405180604001604052807f1cdea362c463d323d72df652b7c7961b34c6b987ea97cc3d14981224a2cbfd6581526020017f1a59997f28ad3b4e60ddfc40d54b89b49b022d1bb45c0eacd0d96b500a2c0f8b8152508160800151600281518110610943576109426116a2565b5b602002602001018190525060405180604001604052807f25108447e7b4c5312efa1a359ea168a75f323279b1fa4b9e787caec415e4557781526020017f197de918882cf5d7c6380bc214b25376cbd727ff9e9774f902f82ea50ec1051b81525081608001516003815181106109bb576109ba6116a2565b5b602002602001018190525090565b6109d161124d565b6109d9611267565b8360000151816000600381106109f2576109f16116a2565b5b602002018181525050836020015181600160038110610a1457610a136116a2565b5b6020020181815250508281600260038110610a3257610a316116a2565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610a5857fe5b5080610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a90906118b1565b60405180910390fd5b505092915050565b610aa961124d565b610ab1611289565b836000015181600060048110610aca57610ac96116a2565b5b602002018181525050836020015181600160048110610aec57610aeb6116a2565b5b602002018181525050826000015181600260048110610b0e57610b0d6116a2565b5b602002018181525050826020015181600360048110610b3057610b2f6116a2565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610b5657fe5b5080610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e9061191d565b60405180910390fd5b505092915050565b610ba761124d565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610be4575060008360200151145b15610c08576040518060400160405280600081526020016000815250915050610c3f565b604051806040016040528084600001518152602001828560200151610c2d919061196c565b83610c38919061199d565b8152509150505b919050565b600080600467ffffffffffffffff811115610c6257610c6161133a565b5b604051908082528060200260200182016040528015610c9b57816020015b610c8861124d565b815260200190600190039081610c805790505b5090506000600467ffffffffffffffff811115610cbb57610cba61133a565b5b604051908082528060200260200182016040528015610cf457816020015b610ce16112ab565b815260200190600190039081610cd95790505b5090508a82600081518110610d0c57610d0b6116a2565b5b60200260200101819052508882600181518110610d2c57610d2b6116a2565b5b60200260200101819052508682600281518110610d4c57610d4b6116a2565b5b60200260200101819052508482600381518110610d6c57610d6b6116a2565b5b60200260200101819052508981600081518110610d8c57610d8b6116a2565b5b60200260200101819052508781600181518110610dac57610dab6116a2565b5b60200260200101819052508581600281518110610dcc57610dcb6116a2565b5b60200260200101819052508381600381518110610dec57610deb6116a2565b5b6020026020010181905250610e018282610e11565b9250505098975050505050505050565b60008151835114610e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4e90611a1d565b60405180910390fd5b6000835190506000600682610e6c9190611a3d565b905060008167ffffffffffffffff811115610e8a57610e8961133a565b5b604051908082528060200260200182016040528015610eb85781602001602082028036833780820191505090505b50905060005b8381101561113d57868181518110610ed957610ed86116a2565b5b602002602001015160000151826000600684610ef59190611a3d565b610eff9190611748565b81518110610f1057610f0f6116a2565b5b602002602001018181525050868181518110610f2f57610f2e6116a2565b5b602002602001015160200151826001600684610f4b9190611a3d565b610f559190611748565b81518110610f6657610f656116a2565b5b602002602001018181525050858181518110610f8557610f846116a2565b5b602002602001015160000151600060028110610fa457610fa36116a2565b5b6020020151826002600684610fb99190611a3d565b610fc39190611748565b81518110610fd457610fd36116a2565b5b602002602001018181525050858181518110610ff357610ff26116a2565b5b602002602001015160000151600160028110611012576110116116a2565b5b60200201518260036006846110279190611a3d565b6110319190611748565b81518110611042576110416116a2565b5b602002602001018181525050858181518110611061576110606116a2565b5b6020026020010151602001516000600281106110805761107f6116a2565b5b60200201518260046006846110959190611a3d565b61109f9190611748565b815181106110b0576110af6116a2565b5b6020026020010181815250508581815181106110cf576110ce6116a2565b5b6020026020010151602001516001600281106110ee576110ed6116a2565b5b60200201518260056006846111039190611a3d565b61110d9190611748565b8151811061111e5761111d6116a2565b5b602002602001018181525050808061113590611700565b915050610ebe565b506111466112d1565b6000602082602086026020860160086107d05a03fa9050806000810361116857fe5b50806111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a090611acb565b60405180910390fd5b6000826000600181106111bf576111be6116a2565b5b602002015114159550505050505092915050565b60405180606001604052806111e661124d565b81526020016111f36112ab565b815260200161120061124d565b81525090565b6040518060a0016040528061121961124d565b81526020016112266112ab565b81526020016112336112ab565b81526020016112406112ab565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806112be6112f3565b81526020016112cb6112f3565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61137282611329565b810181811067ffffffffffffffff821117156113915761139061133a565b5b80604052505050565b60006113a4611315565b90506113b08282611369565b919050565b600067ffffffffffffffff8211156113d0576113cf61133a565b5b602082029050919050565b600080fd5b6000819050919050565b6113f3816113e0565b81146113fe57600080fd5b50565b600081359050611410816113ea565b92915050565b6000611429611424846113b5565b61139a565b90508060208402830185811115611443576114426113db565b5b835b8181101561146c57806114588882611401565b845260208401935050602081019050611445565b5050509392505050565b600082601f83011261148b5761148a611324565b5b6002611498848285611416565b91505092915050565b600067ffffffffffffffff8211156114bc576114bb61133a565b5b602082029050919050565b60006114da6114d5846114a1565b61139a565b905080604084028301858111156114f4576114f36113db565b5b835b8181101561151d57806115098882611476565b8452602084019350506040810190506114f6565b5050509392505050565b600082601f83011261153c5761153b611324565b5b60026115498482856114c7565b91505092915050565b600067ffffffffffffffff82111561156d5761156c61133a565b5b602082029050919050565b600061158b61158684611552565b61139a565b905080602084028301858111156115a5576115a46113db565b5b835b818110156115ce57806115ba8882611401565b8452602084019350506020810190506115a7565b5050509392505050565b600082601f8301126115ed576115ec611324565b5b60036115fa848285611578565b91505092915050565b600080600080610160858703121561161e5761161d61131f565b5b600061162c87828801611476565b945050604061163d87828801611527565b93505060c061164e87828801611476565b925050610100611660878288016115d8565b91505092959194509250565b60008115159050919050565b6116818161166c565b82525050565b600060208201905061169c6000830184611678565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170b826113e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361173d5761173c6116d1565b5b600182019050919050565b6000611753826113e0565b915061175e836113e0565b9250828201905080821115611776576117756116d1565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b60006117c360128361177c565b91506117ce8261178d565b602082019050919050565b600060208201905081810360008301526117f2816117b6565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b600061182f601f8361177c565b915061183a826117f9565b602082019050919050565b6000602082019050818103600083015261185e81611822565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b600061189b60128361177c565b91506118a682611865565b602082019050919050565b600060208201905081810360008301526118ca8161188e565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061190760128361177c565b9150611912826118d1565b602082019050919050565b60006020820190508181036000830152611936816118fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611977826113e0565b9150611982836113e0565b9250826119925761199161193d565b5b828206905092915050565b60006119a8826113e0565b91506119b3836113e0565b92508282039050818111156119cb576119ca6116d1565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a0760168361177c565b9150611a12826119d1565b602082019050919050565b60006020820190508181036000830152611a36816119fa565b9050919050565b6000611a48826113e0565b9150611a53836113e0565b9250828202611a61816113e0565b91508282048414831517611a7857611a776116d1565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611ab560158361177c565b9150611ac082611a7f565b602082019050919050565b60006020820190508181036000830152611ae481611aa8565b905091905056fea264697066735822122060eedbc5534a4736e3b0c5fae5b6357d28c509175a11afebade8e7db30c98fd064736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806311479fea1461003a575b600080fd5b610054600480360381019061004f9190611603565b61006a565b6040516100619190611687565b60405180910390f35b60006100746111d3565b604051806040016040528087600060028110610093576100926116a2565b5b60200201518152602001876001600281106100b1576100b06116a2565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6116a2565b5b6020020151600060028110610103576101026116a2565b5b6020020151815260200188600060028110610121576101206116a2565b5b6020020151600160028110610139576101386116a2565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646116a2565b5b602002015160006002811061017d5761017c6116a2565b5b602002015181526020018860016002811061019b5761019a6116a2565b5b60200201516001600281106101b3576101b26116a2565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46116a2565b5b6020020151815260200185600160028110610203576102026116a2565b5b602002015181525081604001819052506000600367ffffffffffffffff8111156102305761022f61133a565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60038110156102b7578481600381106102805761027f6116a2565b5b6020020151828281518110610298576102976116a2565b5b60200260200101818152505080806102af90611700565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b9050806080015151600186516103299190611748565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906117d9565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36116a2565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611845565b60405180910390fd5b6104438261043e85608001516001856104059190611748565b81518110610416576104156116a2565b5b60200260200101518a8581518110610431576104306116a2565b5b60200260200101516109c9565b610aa1565b9150808061045090611700565b915050610387565b50610482818360800151600081518110610475576104746116a2565b5b6020026020010151610aa1565b90506104b86104948660000151610b9f565b8660200151846000015185602001518587604001518b604001518960600151610c44565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de611206565b60405180604001604052807f2b92137e06ae2c6638beaec43338d5adb29e45269025c0180b16b773576730d581526020017f18053baca530ce87ed50dce7a7c99526aa9aba9f1cd2d6dec647f93bdf29d0a98152508160000181905250604051806040016040528060405180604001604052807f0296b93bc46869f63a48f0717dcaf9450b45664e7147066010312df0b8f53f3f81526020017f1c3ac2c37c1e8d41f0277700d2e1c90b3d375ab540e6985b07d4c1941993a293815250815260200160405180604001604052807e55b31baec8fbb9cfb471ccf33b28c57cff7a9f7498065aa7bd41115fc6ccb581526020017f0c87987109cfdb68e131ac0ee8aa92a36b333a842b5c5813c32d5c5f38ca301c8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600467ffffffffffffffff8111156107a4576107a361133a565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca61124d565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f0c7ff14202bfa0c6dac54bcaf366ddf615c802d66eb71051d4cb852346482d5781526020017f2ace93fcbcaf3e75ffa3986772012b9e51787cba6f764af738ac70780854ad148152508160800151600081518110610853576108526116a2565b5b602002602001018190525060405180604001604052807f0505796fb09ad5bce4f987120ead79bbdbd236aebc233112e16341210804febd81526020017f129fcab916a671d6f555f727f5f35f6e4eb679683427210662e3e435e8ffce7f81525081608001516001815181106108cb576108ca6116a2565b5b602002602001018190525060405180604001604052807f1cdea362c463d323d72df652b7c7961b34c6b987ea97cc3d14981224a2cbfd6581526020017f1a59997f28ad3b4e60ddfc40d54b89b49b022d1bb45c0eacd0d96b500a2c0f8b8152508160800151600281518110610943576109426116a2565b5b602002602001018190525060405180604001604052807f25108447e7b4c5312efa1a359ea168a75f323279b1fa4b9e787caec415e4557781526020017f197de918882cf5d7c6380bc214b25376cbd727ff9e9774f902f82ea50ec1051b81525081608001516003815181106109bb576109ba6116a2565b5b602002602001018190525090565b6109d161124d565b6109d9611267565b8360000151816000600381106109f2576109f16116a2565b5b602002018181525050836020015181600160038110610a1457610a136116a2565b5b6020020181815250508281600260038110610a3257610a316116a2565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610a5857fe5b5080610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a90906118b1565b60405180910390fd5b505092915050565b610aa961124d565b610ab1611289565b836000015181600060048110610aca57610ac96116a2565b5b602002018181525050836020015181600160048110610aec57610aeb6116a2565b5b602002018181525050826000015181600260048110610b0e57610b0d6116a2565b5b602002018181525050826020015181600360048110610b3057610b2f6116a2565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610b5657fe5b5080610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e9061191d565b60405180910390fd5b505092915050565b610ba761124d565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610be4575060008360200151145b15610c08576040518060400160405280600081526020016000815250915050610c3f565b604051806040016040528084600001518152602001828560200151610c2d919061196c565b83610c38919061199d565b8152509150505b919050565b600080600467ffffffffffffffff811115610c6257610c6161133a565b5b604051908082528060200260200182016040528015610c9b57816020015b610c8861124d565b815260200190600190039081610c805790505b5090506000600467ffffffffffffffff811115610cbb57610cba61133a565b5b604051908082528060200260200182016040528015610cf457816020015b610ce16112ab565b815260200190600190039081610cd95790505b5090508a82600081518110610d0c57610d0b6116a2565b5b60200260200101819052508882600181518110610d2c57610d2b6116a2565b5b60200260200101819052508682600281518110610d4c57610d4b6116a2565b5b60200260200101819052508482600381518110610d6c57610d6b6116a2565b5b60200260200101819052508981600081518110610d8c57610d8b6116a2565b5b60200260200101819052508781600181518110610dac57610dab6116a2565b5b60200260200101819052508581600281518110610dcc57610dcb6116a2565b5b60200260200101819052508381600381518110610dec57610deb6116a2565b5b6020026020010181905250610e018282610e11565b9250505098975050505050505050565b60008151835114610e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4e90611a1d565b60405180910390fd5b6000835190506000600682610e6c9190611a3d565b905060008167ffffffffffffffff811115610e8a57610e8961133a565b5b604051908082528060200260200182016040528015610eb85781602001602082028036833780820191505090505b50905060005b8381101561113d57868181518110610ed957610ed86116a2565b5b602002602001015160000151826000600684610ef59190611a3d565b610eff9190611748565b81518110610f1057610f0f6116a2565b5b602002602001018181525050868181518110610f2f57610f2e6116a2565b5b602002602001015160200151826001600684610f4b9190611a3d565b610f559190611748565b81518110610f6657610f656116a2565b5b602002602001018181525050858181518110610f8557610f846116a2565b5b602002602001015160000151600060028110610fa457610fa36116a2565b5b6020020151826002600684610fb99190611a3d565b610fc39190611748565b81518110610fd457610fd36116a2565b5b602002602001018181525050858181518110610ff357610ff26116a2565b5b602002602001015160000151600160028110611012576110116116a2565b5b60200201518260036006846110279190611a3d565b6110319190611748565b81518110611042576110416116a2565b5b602002602001018181525050858181518110611061576110606116a2565b5b6020026020010151602001516000600281106110805761107f6116a2565b5b60200201518260046006846110959190611a3d565b61109f9190611748565b815181106110b0576110af6116a2565b5b6020026020010181815250508581815181106110cf576110ce6116a2565b5b6020026020010151602001516001600281106110ee576110ed6116a2565b5b60200201518260056006846111039190611a3d565b61110d9190611748565b8151811061111e5761111d6116a2565b5b602002602001018181525050808061113590611700565b915050610ebe565b506111466112d1565b6000602082602086026020860160086107d05a03fa9050806000810361116857fe5b50806111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a090611acb565b60405180910390fd5b6000826000600181106111bf576111be6116a2565b5b602002015114159550505050505092915050565b60405180606001604052806111e661124d565b81526020016111f36112ab565b815260200161120061124d565b81525090565b6040518060a0016040528061121961124d565b81526020016112266112ab565b81526020016112336112ab565b81526020016112406112ab565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806112be6112f3565b81526020016112cb6112f3565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61137282611329565b810181811067ffffffffffffffff821117156113915761139061133a565b5b80604052505050565b60006113a4611315565b90506113b08282611369565b919050565b600067ffffffffffffffff8211156113d0576113cf61133a565b5b602082029050919050565b600080fd5b6000819050919050565b6113f3816113e0565b81146113fe57600080fd5b50565b600081359050611410816113ea565b92915050565b6000611429611424846113b5565b61139a565b90508060208402830185811115611443576114426113db565b5b835b8181101561146c57806114588882611401565b845260208401935050602081019050611445565b5050509392505050565b600082601f83011261148b5761148a611324565b5b6002611498848285611416565b91505092915050565b600067ffffffffffffffff8211156114bc576114bb61133a565b5b602082029050919050565b60006114da6114d5846114a1565b61139a565b905080604084028301858111156114f4576114f36113db565b5b835b8181101561151d57806115098882611476565b8452602084019350506040810190506114f6565b5050509392505050565b600082601f83011261153c5761153b611324565b5b60026115498482856114c7565b91505092915050565b600067ffffffffffffffff82111561156d5761156c61133a565b5b602082029050919050565b600061158b61158684611552565b61139a565b905080602084028301858111156115a5576115a46113db565b5b835b818110156115ce57806115ba8882611401565b8452602084019350506020810190506115a7565b5050509392505050565b600082601f8301126115ed576115ec611324565b5b60036115fa848285611578565b91505092915050565b600080600080610160858703121561161e5761161d61131f565b5b600061162c87828801611476565b945050604061163d87828801611527565b93505060c061164e87828801611476565b925050610100611660878288016115d8565b91505092959194509250565b60008115159050919050565b6116818161166c565b82525050565b600060208201905061169c6000830184611678565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170b826113e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361173d5761173c6116d1565b5b600182019050919050565b6000611753826113e0565b915061175e836113e0565b9250828201905080821115611776576117756116d1565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b60006117c360128361177c565b91506117ce8261178d565b602082019050919050565b600060208201905081810360008301526117f2816117b6565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b600061182f601f8361177c565b915061183a826117f9565b602082019050919050565b6000602082019050818103600083015261185e81611822565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b600061189b60128361177c565b91506118a682611865565b602082019050919050565b600060208201905081810360008301526118ca8161188e565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061190760128361177c565b9150611912826118d1565b602082019050919050565b60006020820190508181036000830152611936816118fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611977826113e0565b9150611982836113e0565b9250826119925761199161193d565b5b828206905092915050565b60006119a8826113e0565b91506119b3836113e0565b92508282039050818111156119cb576119ca6116d1565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a0760168361177c565b9150611a12826119d1565b602082019050919050565b60006020820190508181036000830152611a36816119fa565b9050919050565b6000611a48826113e0565b9150611a53836113e0565b9250828202611a61816113e0565b91508282048414831517611a7857611a776116d1565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611ab560158361177c565b9150611ac082611a7f565b602082019050919050565b60006020820190508181036000830152611ae481611aa8565b905091905056fea264697066735822122060eedbc5534a4736e3b0c5fae5b6357d28c509175a11afebade8e7db30c98fd064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xBF732232AF7CA8D62F1D00fAd44474c56F3Fd833",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "input",
          "type": "uint256[3]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70b483f34d83046b6b955b8fc5c183b06e293fdbd9ab86f0fb9d666458d58dc3",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xBF732232AF7CA8D62F1D00fAd44474c56F3Fd833",
    "transactionIndex": 0,
    "gasUsed": "1549093",
    "logsBloom": "0x
    "blockHash": "0xeaa02be280fba16b297810331da3311b0ad1079e1ae62487f0e23f1e6dbab396",
    "transactionHash": "0x70b483f34d83046b6b955b8fc5c183b06e293fdbd9ab86f0fb9d666458d58dc3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32152057,
        "transactionHash": "0x70b483f34d83046b6b955b8fc5c183b06e293fdbd9ab86f0fb9d666458d58dc3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013d0acc7572930000000000000000000000000000000000000000000000000024088b1567903d5000000000000000000000000000000000000000000002d6e4620b8bdd3f50e0b000000000000000000000000000000000000000000000000022cb8048f21daa5000000000000000000000000000000000000000000002d6e4634896a9b4c373b",
        "logIndex": 0,
        "blockHash": "0xeaa02be280fba16b297810331da3311b0ad1079e1ae62487f0e23f1e6dbab396"
      }
    ],
    "blockNumber": 32152057,
    "cumulativeGasUsed": "1549093",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "caaca5c3f446f4db28fa98fee9651383",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"input\",\"type\":\"uint256[3]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ValidDocumentIdPart.sol\":\"ValidDocumentIdPart\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ValidDocumentIdPart.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary ValidDocumentIdPartPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ValidDocumentIdPart {\\n  using ValidDocumentIdPartPairing for *;\\n  struct VerifyingKey {\\n    ValidDocumentIdPartPairing.G1Point alfa1;\\n    ValidDocumentIdPartPairing.G2Point beta2;\\n    ValidDocumentIdPartPairing.G2Point gamma2;\\n    ValidDocumentIdPartPairing.G2Point delta2;\\n    ValidDocumentIdPartPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ValidDocumentIdPartPairing.G1Point A;\\n    ValidDocumentIdPartPairing.G2Point B;\\n    ValidDocumentIdPartPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ValidDocumentIdPartPairing.G1Point(\\n      1423427196573326869960381667785122074357921755684386940651843063386195096976,\\n      8023961015251680984904169932113418146783590031556471530623177414331800090437\\n    );\\n\\n    vk.beta2 = ValidDocumentIdPartPairing.G2Point(\\n      [\\n        14981788778016161064675824813766262164386590279136355427549180094813413442058,\\n        15280203404894510920756392128045715359164951458648562381898759371631084950081\\n      ],\\n      [\\n        127457706682557739436150116433930019448698159193059553212687691311716440831,\\n        17421767135883714886528432224440823873509790917646536951997623325206225910141\\n      ]\\n    );\\n    vk.gamma2 = ValidDocumentIdPartPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ValidDocumentIdPartPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.IC = new ValidDocumentIdPartPairing.G1Point[](4);\\n\\n    vk.IC[0] = ValidDocumentIdPartPairing.G1Point(\\n      4631476629321606709963863503644355341833890829608337215731374798194923025467,\\n      21395636798632430195483691299218403539343475972849355665923490837254328999775\\n    );\\n\\n    vk.IC[1] = ValidDocumentIdPartPairing.G1Point(\\n      14601582382492115539440975990325524105292910300876950861228934789045542540168,\\n      12542940585414370747680710404293721891916102024883419966779069383647137514690\\n    );\\n\\n    vk.IC[2] = ValidDocumentIdPartPairing.G1Point(\\n      12484088194855679583364627587435286081377974348171982652067320683249684705675,\\n      15676813124268425324999345059341171660438844902379864400373076613461440201430\\n    );\\n\\n    vk.IC[3] = ValidDocumentIdPartPairing.G1Point(\\n      154229978114960658484980129798695258660836361675373748293375196692179792486,\\n      2357025878516963824214321329203834159180109527275256935490607252332606404641\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ValidDocumentIdPartPairing.G1Point memory vk_x = ValidDocumentIdPartPairing\\n      .G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ValidDocumentIdPartPairing.addition(\\n        vk_x,\\n        ValidDocumentIdPartPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ValidDocumentIdPartPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ValidDocumentIdPartPairing.pairingProd4(\\n        ValidDocumentIdPartPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[3] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ValidDocumentIdPartPairing.G1Point(a[0], a[1]);\\n    proof.B = ValidDocumentIdPartPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ValidDocumentIdPartPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x79a6f24b5e5540d03c1a876e1a4f76203ad44c44608c8681dd72a177886c13a9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611b20610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806311479fea1461003a575b600080fd5b610054600480360381019061004f9190611602565b61006a565b6040516100619190611686565b60405180910390f35b60006100746111d2565b604051806040016040528087600060028110610093576100926116a1565b5b60200201518152602001876001600281106100b1576100b06116a1565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6116a1565b5b6020020151600060028110610103576101026116a1565b5b6020020151815260200188600060028110610121576101206116a1565b5b6020020151600160028110610139576101386116a1565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646116a1565b5b602002015160006002811061017d5761017c6116a1565b5b602002015181526020018860016002811061019b5761019a6116a1565b5b60200201516001600281106101b3576101b26116a1565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46116a1565b5b6020020151815260200185600160028110610203576102026116a1565b5b602002015181525081604001819052506000600367ffffffffffffffff8111156102305761022f611339565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60038110156102b7578481600381106102805761027f6116a1565b5b6020020151828281518110610298576102976116a1565b5b60200260200101818152505080806102af906116ff565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b9050806080015151600186516103299190611747565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906117d8565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36116a1565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611844565b60405180910390fd5b6104438261043e85608001516001856104059190611747565b81518110610416576104156116a1565b5b60200260200101518a8581518110610431576104306116a1565b5b60200260200101516109c8565b610aa0565b91508080610450906116ff565b915050610387565b50610482818360800151600081518110610475576104746116a1565b5b6020026020010151610aa0565b90506104b86104948660000151610b9e565b8660200151846000015185602001518587604001518b604001518960600151610c43565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de611205565b60405180604001604052807f0325a19920380ec4d38dad81a28212d4daddc37051609fef4175c3445a17f59081526020017f11bd66a781a86cd358b047d74db8affbb5694a39c941febe9ce89d152b9df7458152508160000181905250604051806040016040528060405180604001604052807f211f6456d650fd85b3c48262fb47b9a4ad0aa769f4ee7f5ad4de3cf0e4ba020a81526020017f21c849e4882a55d90f620e2fd4738471c12ec177bb3a246a5823c8fa563bd241815250815260200160405180604001604052807e4823751885fe184bce42b686d74f6dbdaa777e445a1f7b0d556ec0076b1aff81526020017f26845eea29a2ae4aeff5ca8a6fccb5d53c3b6d3374eb06e9cef8a02fad78797d8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600467ffffffffffffffff8111156107a4576107a3611339565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca61124c565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f0a3d52a800a0663d45cc072ef0b0ea6f3927c0a891edbd228564ee831ac4343b81526020017f2f4d80541d15e619ea785782fb12a89ca0d57b8f2a9a23409cf2110a58fadf5f8152508160800151600081518110610853576108526116a1565b5b602002602001018190525060405180604001604052807f204833e7d43f246431d5cc3d64f176767d9757b1c52c75edbf60a33a52ad538881526020017f1bbb0d83abd79c2e3f0211c33d7eccfdda70e494c5e3ce600e05f51860e644c281525081608001516001815181106108cb576108ca6116a1565b5b602002602001018190525060405180604001604052807f1b99be572e4ad196786c62959f204caa551cd831810b7402d3047070cb8bf18b81526020017f22a8c304a31b6ec9487003ee3e66fd6351400043d97416cadb646458a0dc02d68152508160800151600281518110610943576109426116a1565b5b602002602001018190525060405180604001604052807e574a83d59e1ef87d84ee8d6a57ab680e56a9bd5d5510384882523bf43b326681526020017f05360784dbf78286ed15169df262bcadee0e70ef6b043d975250369fedd0382181525081608001516003815181106109ba576109b96116a1565b5b602002602001018190525090565b6109d061124c565b6109d8611266565b8360000151816000600381106109f1576109f06116a1565b5b602002018181525050836020015181600160038110610a1357610a126116a1565b5b6020020181815250508281600260038110610a3157610a306116a1565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610a5757fe5b5080610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f906118b0565b60405180910390fd5b505092915050565b610aa861124c565b610ab0611288565b836000015181600060048110610ac957610ac86116a1565b5b602002018181525050836020015181600160048110610aeb57610aea6116a1565b5b602002018181525050826000015181600260048110610b0d57610b0c6116a1565b5b602002018181525050826020015181600360048110610b2f57610b2e6116a1565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610b5557fe5b5080610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d9061191c565b60405180910390fd5b505092915050565b610ba661124c565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610be3575060008360200151145b15610c07576040518060400160405280600081526020016000815250915050610c3e565b604051806040016040528084600001518152602001828560200151610c2c919061196b565b83610c37919061199c565b8152509150505b919050565b600080600467ffffffffffffffff811115610c6157610c60611339565b5b604051908082528060200260200182016040528015610c9a57816020015b610c8761124c565b815260200190600190039081610c7f5790505b5090506000600467ffffffffffffffff811115610cba57610cb9611339565b5b604051908082528060200260200182016040528015610cf357816020015b610ce06112aa565b815260200190600190039081610cd85790505b5090508a82600081518110610d0b57610d0a6116a1565b5b60200260200101819052508882600181518110610d2b57610d2a6116a1565b5b60200260200101819052508682600281518110610d4b57610d4a6116a1565b5b60200260200101819052508482600381518110610d6b57610d6a6116a1565b5b60200260200101819052508981600081518110610d8b57610d8a6116a1565b5b60200260200101819052508781600181518110610dab57610daa6116a1565b5b60200260200101819052508581600281518110610dcb57610dca6116a1565b5b60200260200101819052508381600381518110610deb57610dea6116a1565b5b6020026020010181905250610e008282610e10565b9250505098975050505050505050565b60008151835114610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90611a1c565b60405180910390fd5b6000835190506000600682610e6b9190611a3c565b905060008167ffffffffffffffff811115610e8957610e88611339565b5b604051908082528060200260200182016040528015610eb75781602001602082028036833780820191505090505b50905060005b8381101561113c57868181518110610ed857610ed76116a1565b5b602002602001015160000151826000600684610ef49190611a3c565b610efe9190611747565b81518110610f0f57610f0e6116a1565b5b602002602001018181525050868181518110610f2e57610f2d6116a1565b5b602002602001015160200151826001600684610f4a9190611a3c565b610f549190611747565b81518110610f6557610f646116a1565b5b602002602001018181525050858181518110610f8457610f836116a1565b5b602002602001015160000151600060028110610fa357610fa26116a1565b5b6020020151826002600684610fb89190611a3c565b610fc29190611747565b81518110610fd357610fd26116a1565b5b602002602001018181525050858181518110610ff257610ff16116a1565b5b602002602001015160000151600160028110611011576110106116a1565b5b60200201518260036006846110269190611a3c565b6110309190611747565b81518110611041576110406116a1565b5b6020026020010181815250508581815181106110605761105f6116a1565b5b60200260200101516020015160006002811061107f5761107e6116a1565b5b60200201518260046006846110949190611a3c565b61109e9190611747565b815181106110af576110ae6116a1565b5b6020026020010181815250508581815181106110ce576110cd6116a1565b5b6020026020010151602001516001600281106110ed576110ec6116a1565b5b60200201518260056006846111029190611a3c565b61110c9190611747565b8151811061111d5761111c6116a1565b5b6020026020010181815250508080611134906116ff565b915050610ebd565b506111456112d0565b6000602082602086026020860160086107d05a03fa9050806000810361116757fe5b50806111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f90611aca565b60405180910390fd5b6000826000600181106111be576111bd6116a1565b5b602002015114159550505050505092915050565b60405180606001604052806111e561124c565b81526020016111f26112aa565b81526020016111ff61124c565b81525090565b6040518060a0016040528061121861124c565b81526020016112256112aa565b81526020016112326112aa565b815260200161123f6112aa565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806112bd6112f2565b81526020016112ca6112f2565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61137182611328565b810181811067ffffffffffffffff821117156113905761138f611339565b5b80604052505050565b60006113a3611314565b90506113af8282611368565b919050565b600067ffffffffffffffff8211156113cf576113ce611339565b5b602082029050919050565b600080fd5b6000819050919050565b6113f2816113df565b81146113fd57600080fd5b50565b60008135905061140f816113e9565b92915050565b6000611428611423846113b4565b611399565b90508060208402830185811115611442576114416113da565b5b835b8181101561146b57806114578882611400565b845260208401935050602081019050611444565b5050509392505050565b600082601f83011261148a57611489611323565b5b6002611497848285611415565b91505092915050565b600067ffffffffffffffff8211156114bb576114ba611339565b5b602082029050919050565b60006114d96114d4846114a0565b611399565b905080604084028301858111156114f3576114f26113da565b5b835b8181101561151c57806115088882611475565b8452602084019350506040810190506114f5565b5050509392505050565b600082601f83011261153b5761153a611323565b5b60026115488482856114c6565b91505092915050565b600067ffffffffffffffff82111561156c5761156b611339565b5b602082029050919050565b600061158a61158584611551565b611399565b905080602084028301858111156115a4576115a36113da565b5b835b818110156115cd57806115b98882611400565b8452602084019350506020810190506115a6565b5050509392505050565b600082601f8301126115ec576115eb611323565b5b60036115f9848285611577565b91505092915050565b600080600080610160858703121561161d5761161c61131e565b5b600061162b87828801611475565b945050604061163c87828801611526565b93505060c061164d87828801611475565b92505061010061165f878288016115d7565b91505092959194509250565b60008115159050919050565b6116808161166b565b82525050565b600060208201905061169b6000830184611677565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170a826113df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361173c5761173b6116d0565b5b600182019050919050565b6000611752826113df565b915061175d836113df565b9250828201905080821115611775576117746116d0565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b60006117c260128361177b565b91506117cd8261178c565b602082019050919050565b600060208201905081810360008301526117f1816117b5565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b600061182e601f8361177b565b9150611839826117f8565b602082019050919050565b6000602082019050818103600083015261185d81611821565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b600061189a60128361177b565b91506118a582611864565b602082019050919050565b600060208201905081810360008301526118c98161188d565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061190660128361177b565b9150611911826118d0565b602082019050919050565b60006020820190508181036000830152611935816118f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611976826113df565b9150611981836113df565b9250826119915761199061193c565b5b828206905092915050565b60006119a7826113df565b91506119b2836113df565b92508282039050818111156119ca576119c96116d0565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a0660168361177b565b9150611a11826119d0565b602082019050919050565b60006020820190508181036000830152611a35816119f9565b9050919050565b6000611a47826113df565b9150611a52836113df565b9250828202611a60816113df565b91508282048414831517611a7757611a766116d0565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611ab460158361177b565b9150611abf82611a7e565b602082019050919050565b60006020820190508181036000830152611ae381611aa7565b905091905056fea26469706673582212205726f73c92c36bb1d45c8342e5f4e1f9cf3f5d8008454bc5e3404aedff51669364736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806311479fea1461003a575b600080fd5b610054600480360381019061004f9190611602565b61006a565b6040516100619190611686565b60405180910390f35b60006100746111d2565b604051806040016040528087600060028110610093576100926116a1565b5b60200201518152602001876001600281106100b1576100b06116a1565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6116a1565b5b6020020151600060028110610103576101026116a1565b5b6020020151815260200188600060028110610121576101206116a1565b5b6020020151600160028110610139576101386116a1565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646116a1565b5b602002015160006002811061017d5761017c6116a1565b5b602002015181526020018860016002811061019b5761019a6116a1565b5b60200201516001600281106101b3576101b26116a1565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46116a1565b5b6020020151815260200185600160028110610203576102026116a1565b5b602002015181525081604001819052506000600367ffffffffffffffff8111156102305761022f611339565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60038110156102b7578481600381106102805761027f6116a1565b5b6020020151828281518110610298576102976116a1565b5b60200260200101818152505080806102af906116ff565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b9050806080015151600186516103299190611747565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906117d8565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36116a1565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611844565b60405180910390fd5b6104438261043e85608001516001856104059190611747565b81518110610416576104156116a1565b5b60200260200101518a8581518110610431576104306116a1565b5b60200260200101516109c8565b610aa0565b91508080610450906116ff565b915050610387565b50610482818360800151600081518110610475576104746116a1565b5b6020026020010151610aa0565b90506104b86104948660000151610b9e565b8660200151846000015185602001518587604001518b604001518960600151610c43565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de611205565b60405180604001604052807f0325a19920380ec4d38dad81a28212d4daddc37051609fef4175c3445a17f59081526020017f11bd66a781a86cd358b047d74db8affbb5694a39c941febe9ce89d152b9df7458152508160000181905250604051806040016040528060405180604001604052807f211f6456d650fd85b3c48262fb47b9a4ad0aa769f4ee7f5ad4de3cf0e4ba020a81526020017f21c849e4882a55d90f620e2fd4738471c12ec177bb3a246a5823c8fa563bd241815250815260200160405180604001604052807e4823751885fe184bce42b686d74f6dbdaa777e445a1f7b0d556ec0076b1aff81526020017f26845eea29a2ae4aeff5ca8a6fccb5d53c3b6d3374eb06e9cef8a02fad78797d8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600467ffffffffffffffff8111156107a4576107a3611339565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca61124c565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f0a3d52a800a0663d45cc072ef0b0ea6f3927c0a891edbd228564ee831ac4343b81526020017f2f4d80541d15e619ea785782fb12a89ca0d57b8f2a9a23409cf2110a58fadf5f8152508160800151600081518110610853576108526116a1565b5b602002602001018190525060405180604001604052807f204833e7d43f246431d5cc3d64f176767d9757b1c52c75edbf60a33a52ad538881526020017f1bbb0d83abd79c2e3f0211c33d7eccfdda70e494c5e3ce600e05f51860e644c281525081608001516001815181106108cb576108ca6116a1565b5b602002602001018190525060405180604001604052807f1b99be572e4ad196786c62959f204caa551cd831810b7402d3047070cb8bf18b81526020017f22a8c304a31b6ec9487003ee3e66fd6351400043d97416cadb646458a0dc02d68152508160800151600281518110610943576109426116a1565b5b602002602001018190525060405180604001604052807e574a83d59e1ef87d84ee8d6a57ab680e56a9bd5d5510384882523bf43b326681526020017f05360784dbf78286ed15169df262bcadee0e70ef6b043d975250369fedd0382181525081608001516003815181106109ba576109b96116a1565b5b602002602001018190525090565b6109d061124c565b6109d8611266565b8360000151816000600381106109f1576109f06116a1565b5b602002018181525050836020015181600160038110610a1357610a126116a1565b5b6020020181815250508281600260038110610a3157610a306116a1565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610a5757fe5b5080610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f906118b0565b60405180910390fd5b505092915050565b610aa861124c565b610ab0611288565b836000015181600060048110610ac957610ac86116a1565b5b602002018181525050836020015181600160048110610aeb57610aea6116a1565b5b602002018181525050826000015181600260048110610b0d57610b0c6116a1565b5b602002018181525050826020015181600360048110610b2f57610b2e6116a1565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610b5557fe5b5080610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d9061191c565b60405180910390fd5b505092915050565b610ba661124c565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610be3575060008360200151145b15610c07576040518060400160405280600081526020016000815250915050610c3e565b604051806040016040528084600001518152602001828560200151610c2c919061196b565b83610c37919061199c565b8152509150505b919050565b600080600467ffffffffffffffff811115610c6157610c60611339565b5b604051908082528060200260200182016040528015610c9a57816020015b610c8761124c565b815260200190600190039081610c7f5790505b5090506000600467ffffffffffffffff811115610cba57610cb9611339565b5b604051908082528060200260200182016040528015610cf357816020015b610ce06112aa565b815260200190600190039081610cd85790505b5090508a82600081518110610d0b57610d0a6116a1565b5b60200260200101819052508882600181518110610d2b57610d2a6116a1565b5b60200260200101819052508682600281518110610d4b57610d4a6116a1565b5b60200260200101819052508482600381518110610d6b57610d6a6116a1565b5b60200260200101819052508981600081518110610d8b57610d8a6116a1565b5b60200260200101819052508781600181518110610dab57610daa6116a1565b5b60200260200101819052508581600281518110610dcb57610dca6116a1565b5b60200260200101819052508381600381518110610deb57610dea6116a1565b5b6020026020010181905250610e008282610e10565b9250505098975050505050505050565b60008151835114610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90611a1c565b60405180910390fd5b6000835190506000600682610e6b9190611a3c565b905060008167ffffffffffffffff811115610e8957610e88611339565b5b604051908082528060200260200182016040528015610eb75781602001602082028036833780820191505090505b50905060005b8381101561113c57868181518110610ed857610ed76116a1565b5b602002602001015160000151826000600684610ef49190611a3c565b610efe9190611747565b81518110610f0f57610f0e6116a1565b5b602002602001018181525050868181518110610f2e57610f2d6116a1565b5b602002602001015160200151826001600684610f4a9190611a3c565b610f549190611747565b81518110610f6557610f646116a1565b5b602002602001018181525050858181518110610f8457610f836116a1565b5b602002602001015160000151600060028110610fa357610fa26116a1565b5b6020020151826002600684610fb89190611a3c565b610fc29190611747565b81518110610fd357610fd26116a1565b5b602002602001018181525050858181518110610ff257610ff16116a1565b5b602002602001015160000151600160028110611011576110106116a1565b5b60200201518260036006846110269190611a3c565b6110309190611747565b81518110611041576110406116a1565b5b6020026020010181815250508581815181106110605761105f6116a1565b5b60200260200101516020015160006002811061107f5761107e6116a1565b5b60200201518260046006846110949190611a3c565b61109e9190611747565b815181106110af576110ae6116a1565b5b6020026020010181815250508581815181106110ce576110cd6116a1565b5b6020026020010151602001516001600281106110ed576110ec6116a1565b5b60200201518260056006846111029190611a3c565b61110c9190611747565b8151811061111d5761111c6116a1565b5b6020026020010181815250508080611134906116ff565b915050610ebd565b506111456112d0565b6000602082602086026020860160086107d05a03fa9050806000810361116757fe5b50806111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f90611aca565b60405180910390fd5b6000826000600181106111be576111bd6116a1565b5b602002015114159550505050505092915050565b60405180606001604052806111e561124c565b81526020016111f26112aa565b81526020016111ff61124c565b81525090565b6040518060a0016040528061121861124c565b81526020016112256112aa565b81526020016112326112aa565b815260200161123f6112aa565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806112bd6112f2565b81526020016112ca6112f2565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61137182611328565b810181811067ffffffffffffffff821117156113905761138f611339565b5b80604052505050565b60006113a3611314565b90506113af8282611368565b919050565b600067ffffffffffffffff8211156113cf576113ce611339565b5b602082029050919050565b600080fd5b6000819050919050565b6113f2816113df565b81146113fd57600080fd5b50565b60008135905061140f816113e9565b92915050565b6000611428611423846113b4565b611399565b90508060208402830185811115611442576114416113da565b5b835b8181101561146b57806114578882611400565b845260208401935050602081019050611444565b5050509392505050565b600082601f83011261148a57611489611323565b5b6002611497848285611415565b91505092915050565b600067ffffffffffffffff8211156114bb576114ba611339565b5b602082029050919050565b60006114d96114d4846114a0565b611399565b905080604084028301858111156114f3576114f26113da565b5b835b8181101561151c57806115088882611475565b8452602084019350506040810190506114f5565b5050509392505050565b600082601f83011261153b5761153a611323565b5b60026115488482856114c6565b91505092915050565b600067ffffffffffffffff82111561156c5761156b611339565b5b602082029050919050565b600061158a61158584611551565b611399565b905080602084028301858111156115a4576115a36113da565b5b835b818110156115cd57806115b98882611400565b8452602084019350506020810190506115a6565b5050509392505050565b600082601f8301126115ec576115eb611323565b5b60036115f9848285611577565b91505092915050565b600080600080610160858703121561161d5761161c61131e565b5b600061162b87828801611475565b945050604061163c87828801611526565b93505060c061164d87828801611475565b92505061010061165f878288016115d7565b91505092959194509250565b60008115159050919050565b6116808161166b565b82525050565b600060208201905061169b6000830184611677565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170a826113df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361173c5761173b6116d0565b5b600182019050919050565b6000611752826113df565b915061175d836113df565b9250828201905080821115611775576117746116d0565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b60006117c260128361177b565b91506117cd8261178c565b602082019050919050565b600060208201905081810360008301526117f1816117b5565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b600061182e601f8361177b565b9150611839826117f8565b602082019050919050565b6000602082019050818103600083015261185d81611821565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b600061189a60128361177b565b91506118a582611864565b602082019050919050565b600060208201905081810360008301526118c98161188d565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061190660128361177b565b9150611911826118d0565b602082019050919050565b60006020820190508181036000830152611935816118f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611976826113df565b9150611981836113df565b9250826119915761199061193c565b5b828206905092915050565b60006119a7826113df565b91506119b2836113df565b92508282039050818111156119ca576119c96116d0565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a0660168361177b565b9150611a11826119d0565b602082019050919050565b60006020820190508181036000830152611a35816119f9565b9050919050565b6000611a47826113df565b9150611a52836113df565b9250828202611a60816113df565b91508282048414831517611a7757611a766116d0565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611ab460158361177b565b9150611abf82611a7e565b602082019050919050565b60006020820190508181036000830152611ae381611aa7565b905091905056fea26469706673582212205726f73c92c36bb1d45c8342e5f4e1f9cf3f5d8008454bc5e3404aedff51669364736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xC252B0d652bc0E547d0E3D6951063517eE5EBeE1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c0346bad41053bb4441db2f3df06283a11d326e1e981061d5a108ec4328ec54",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xC252B0d652bc0E547d0E3D6951063517eE5EBeE1",
    "transactionIndex": 9,
    "gasUsed": "1575509",
    "logsBloom": "0x
    "blockHash": "0x26e6a678c75a7f60d933d8d5cae88aaa79c424504901b0cbb8bab72fe37563e7",
    "transactionHash": "0x9c0346bad41053bb4441db2f3df06283a11d326e1e981061d5a108ec4328ec54",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 35244584,
        "transactionHash": "0x9c0346bad41053bb4441db2f3df06283a11d326e1e981061d5a108ec4328ec54",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000086560296d9b0000000000000000000000000000000000000000000000000025b0cbb8cb7e9044000000000000000000000000000000000000000000001ec6e6e15980b22ff2bf00000000000000000000000000000000000000000000000025a86658a210f544000000000000000000000000000000000000000000001ec6e6e9bee0db9d8dbf",
        "logIndex": 40,
        "blockHash": "0x26e6a678c75a7f60d933d8d5cae88aaa79c424504901b0cbb8bab72fe37563e7"
      }
    ],
    "blockNumber": 35244584,
    "cumulativeGasUsed": "2448593",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4e9fe59d72cd432afe03e33de6161783",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ProofOfAgreement.sol\":\"ProofOfAgreement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ProofOfAgreement.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nlibrary ProofOfAgreementPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ProofOfAgreement {\\n  using ProofOfAgreementPairing for *;\\n  struct VerifyingKey {\\n    ProofOfAgreementPairing.G1Point alfa1;\\n    ProofOfAgreementPairing.G2Point beta2;\\n    ProofOfAgreementPairing.G2Point gamma2;\\n    ProofOfAgreementPairing.G2Point delta2;\\n    ProofOfAgreementPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ProofOfAgreementPairing.G1Point A;\\n    ProofOfAgreementPairing.G2Point B;\\n    ProofOfAgreementPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ProofOfAgreementPairing.G1Point(\\n      20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n      9383485363053290200918347156157836566562967994039712273449902621266178545958\\n    );\\n\\n    vk.beta2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731\\n      ],\\n      [\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856\\n      ]\\n    );\\n    vk.gamma2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        16781217217450551832855990392323958501204296515958503156180546296755255051904,\\n        4998067624055851779069235563785564647005594806814254295391072363123507012021\\n      ],\\n      [\\n        9579754187892118618619857418191012285909646076206884248873885028224036686777,\\n        9888248778495077107955490237414284047354438379767344915711447056981009854398\\n      ]\\n    );\\n    vk.IC = new ProofOfAgreementPairing.G1Point[](5);\\n\\n    vk.IC[0] = ProofOfAgreementPairing.G1Point(\\n      21633876179649911150026849990855992964339440380088346735362059562480015370706,\\n      21331958462460356938678045079888826494634013376800901012653634522459340055535\\n    );\\n\\n    vk.IC[1] = ProofOfAgreementPairing.G1Point(\\n      1917194000839150919375763144133009967439170856960094219850632603536992266197,\\n      9980022464127501718680610977285514577243412794303839009545911161564528824245\\n    );\\n\\n    vk.IC[2] = ProofOfAgreementPairing.G1Point(\\n      2908563799002742042460381873969782833560005912313810630265246366982184996240,\\n      11101613867474214513127237386251482865364293666477359492843808014384698634430\\n    );\\n\\n    vk.IC[3] = ProofOfAgreementPairing.G1Point(\\n      15620460828658393939695065554550042794705813849420913721844414748881659919727,\\n      12279594085560075973839475434574686506748666724231401663282790268722218605872\\n    );\\n\\n    vk.IC[4] = ProofOfAgreementPairing.G1Point(\\n      21075221673647141800580809260053475707341100405077532123210539062233799212092,\\n      6700412326027826049506692512277233436475103932432639125267046424240851501453\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ProofOfAgreementPairing.G1Point memory vk_x = ProofOfAgreementPairing\\n      .G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ProofOfAgreementPairing.addition(\\n        vk_x,\\n        ProofOfAgreementPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ProofOfAgreementPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ProofOfAgreementPairing.pairingProd4(\\n        ProofOfAgreementPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[4] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ProofOfAgreementPairing.G1Point(a[0], a[1]);\\n    proof.B = ProofOfAgreementPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ProofOfAgreementPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe4b32d51b98e1591f89862320d48b26f979f4fe67030e3d53da7125828590231\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611b9a610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635fe8c13b1461003a575b600080fd5b610054600480360381019061004f919061167c565b61006a565b6040516100619190611700565b60405180910390f35b600061007461124c565b6040518060400160405280876000600281106100935761009261171b565b5b60200201518152602001876001600281106100b1576100b061171b565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea61171b565b5b60200201516000600281106101035761010261171b565b5b60200201518152602001886000600281106101215761012061171b565b5b60200201516001600281106101395761013861171b565b5b602002015181525081526020016040518060400160405280886001600281106101655761016461171b565b5b602002015160006002811061017d5761017c61171b565b5b602002015181526020018860016002811061019b5761019a61171b565b5b60200201516001600281106101b3576101b261171b565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e461171b565b5b60200201518152602001856001600281106102035761020261171b565b5b602002015181525081604001819052506000600467ffffffffffffffff8111156102305761022f6113b3565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60048110156102b7578481600481106102805761027f61171b565b5b60200201518282815181106102985761029761171b565b5b60200260200101818152505080806102af90611779565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b90508060800151516001865161032991906117c1565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611852565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a361171b565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e3906118be565b60405180910390fd5b6104438261043e856080015160018561040591906117c1565b815181106104165761041561171b565b5b60200260200101518a85815181106104315761043061171b565b5b6020026020010151610a42565b610b1a565b9150808061045090611779565b915050610387565b506104828183608001516000815181106104755761047461171b565b5b6020026020010151610b1a565b90506104b86104948660000151610c18565b8660200151846000015185602001518587604001518b604001518960600151610cbd565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61127f565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f2519d515309cca1beaec4ab6d7dcb521d626d96fb3c29e255cfbbec8c9bd068081526020017f0b0cce57ba1c6e47e66ade9f754c02de7898dbae16709be56f8a6c41c19521b5815250815260200160405180604001604052807f152df2df8edb12d8c0ffefe06d8129d97750014520c96d86d467fd7a30eacbb981526020017f15dc8cebe32067bc0df2f2a61402cbc06dc46e98160e7600348ae379700f6fbe8152508152508160600181905250600567ffffffffffffffff8111156107a5576107a46113b3565b5b6040519080825280602002602001820160405280156107de57816020015b6107cb6112c6565b8152602001906001900390816107c35790505b50816080018190525060405180604001604052807f2fd45709e33eb2aa97dbc05973d3f7fa3a1a72e8b6f92aeae3adcc19ca09e9d281526020017f2f2975eb5a06bf22e6e37a60df1b2022fd70663f41a7715fe0bc0335ad8ca3ef81525081608001516000815181106108545761085361171b565b5b602002602001018190525060405180604001604052807f043d17e5ccbb804544af48b19bbd4868c83b7d98a888097de68583d90cfc67d581526020017f16107e171453cc20158c74ba5440f50edb7b0addfdbd42fde99bd73d793ecfb581525081608001516001815181106108cc576108cb61171b565b5b602002602001018190525060405180604001604052807f066e3053544b86ab45c2257c2bc1117e3e0cc2ae0fc1543b63b317ee3fc98d9081526020017f188b4a7065de2b4dbd08d50385d1b8e67d0cd387689afcd235765082e62a30be81525081608001516002815181106109445761094361171b565b5b602002602001018190525060405180604001604052807f2288de15d283558541f133b2b49bc119c9487dde17b1314ff8151e9501a47d6f81526020017f1b26010319ddf6d99bf40264bc5ce93590a1b355675b22fb6bcbc400be791d3081525081608001516003815181106109bc576109bb61171b565b5b602002602001018190525060405180604001604052807f2e98271a97058a6908a8ad1b37b8e4f0894e9817decb5909bcedd323c0563c3c81526020017f0ed04c8a1e523b12fff92ef810a41d619bf4bffa8d1c40669754240a8957c18d8152508160800151600481518110610a3457610a3361171b565b5b602002602001018190525090565b610a4a6112c6565b610a526112e0565b836000015181600060038110610a6b57610a6a61171b565b5b602002018181525050836020015181600160038110610a8d57610a8c61171b565b5b6020020181815250508281600260038110610aab57610aaa61171b565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610ad157fe5b5080610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b099061192a565b60405180910390fd5b505092915050565b610b226112c6565b610b2a611302565b836000015181600060048110610b4357610b4261171b565b5b602002018181525050836020015181600160048110610b6557610b6461171b565b5b602002018181525050826000015181600260048110610b8757610b8661171b565b5b602002018181525050826020015181600360048110610ba957610ba861171b565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610bcf57fe5b5080610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611996565b60405180910390fd5b505092915050565b610c206112c6565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610c5d575060008360200151145b15610c81576040518060400160405280600081526020016000815250915050610cb8565b604051806040016040528084600001518152602001828560200151610ca691906119e5565b83610cb19190611a16565b8152509150505b919050565b600080600467ffffffffffffffff811115610cdb57610cda6113b3565b5b604051908082528060200260200182016040528015610d1457816020015b610d016112c6565b815260200190600190039081610cf95790505b5090506000600467ffffffffffffffff811115610d3457610d336113b3565b5b604051908082528060200260200182016040528015610d6d57816020015b610d5a611324565b815260200190600190039081610d525790505b5090508a82600081518110610d8557610d8461171b565b5b60200260200101819052508882600181518110610da557610da461171b565b5b60200260200101819052508682600281518110610dc557610dc461171b565b5b60200260200101819052508482600381518110610de557610de461171b565b5b60200260200101819052508981600081518110610e0557610e0461171b565b5b60200260200101819052508781600181518110610e2557610e2461171b565b5b60200260200101819052508581600281518110610e4557610e4461171b565b5b60200260200101819052508381600381518110610e6557610e6461171b565b5b6020026020010181905250610e7a8282610e8a565b9250505098975050505050505050565b60008151835114610ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec790611a96565b60405180910390fd5b6000835190506000600682610ee59190611ab6565b905060008167ffffffffffffffff811115610f0357610f026113b3565b5b604051908082528060200260200182016040528015610f315781602001602082028036833780820191505090505b50905060005b838110156111b657868181518110610f5257610f5161171b565b5b602002602001015160000151826000600684610f6e9190611ab6565b610f7891906117c1565b81518110610f8957610f8861171b565b5b602002602001018181525050868181518110610fa857610fa761171b565b5b602002602001015160200151826001600684610fc49190611ab6565b610fce91906117c1565b81518110610fdf57610fde61171b565b5b602002602001018181525050858181518110610ffe57610ffd61171b565b5b60200260200101516000015160006002811061101d5761101c61171b565b5b60200201518260026006846110329190611ab6565b61103c91906117c1565b8151811061104d5761104c61171b565b5b60200260200101818152505085818151811061106c5761106b61171b565b5b60200260200101516000015160016002811061108b5761108a61171b565b5b60200201518260036006846110a09190611ab6565b6110aa91906117c1565b815181106110bb576110ba61171b565b5b6020026020010181815250508581815181106110da576110d961171b565b5b6020026020010151602001516000600281106110f9576110f861171b565b5b602002015182600460068461110e9190611ab6565b61111891906117c1565b815181106111295761112861171b565b5b6020026020010181815250508581815181106111485761114761171b565b5b6020026020010151602001516001600281106111675761116661171b565b5b602002015182600560068461117c9190611ab6565b61118691906117c1565b815181106111975761119661171b565b5b60200260200101818152505080806111ae90611779565b915050610f37565b506111bf61134a565b6000602082602086026020860160086107d05a03fa905080600081036111e157fe5b5080611222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121990611b44565b60405180910390fd5b6000826000600181106112385761123761171b565b5b602002015114159550505050505092915050565b604051806060016040528061125f6112c6565b815260200161126c611324565b81526020016112796112c6565b81525090565b6040518060a001604052806112926112c6565b815260200161129f611324565b81526020016112ac611324565b81526020016112b9611324565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061133761136c565b815260200161134461136c565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113eb826113a2565b810181811067ffffffffffffffff8211171561140a576114096113b3565b5b80604052505050565b600061141d61138e565b905061142982826113e2565b919050565b600067ffffffffffffffff821115611449576114486113b3565b5b602082029050919050565b600080fd5b6000819050919050565b61146c81611459565b811461147757600080fd5b50565b60008135905061148981611463565b92915050565b60006114a261149d8461142e565b611413565b905080602084028301858111156114bc576114bb611454565b5b835b818110156114e557806114d1888261147a565b8452602084019350506020810190506114be565b5050509392505050565b600082601f8301126115045761150361139d565b5b600261151184828561148f565b91505092915050565b600067ffffffffffffffff821115611535576115346113b3565b5b602082029050919050565b600061155361154e8461151a565b611413565b9050806040840283018581111561156d5761156c611454565b5b835b81811015611596578061158288826114ef565b84526020840193505060408101905061156f565b5050509392505050565b600082601f8301126115b5576115b461139d565b5b60026115c2848285611540565b91505092915050565b600067ffffffffffffffff8211156115e6576115e56113b3565b5b602082029050919050565b60006116046115ff846115cb565b611413565b9050806020840283018581111561161e5761161d611454565b5b835b818110156116475780611633888261147a565b845260208401935050602081019050611620565b5050509392505050565b600082601f8301126116665761166561139d565b5b60046116738482856115f1565b91505092915050565b600080600080610180858703121561169757611696611398565b5b60006116a5878288016114ef565b94505060406116b6878288016115a0565b93505060c06116c7878288016114ef565b9250506101006116d987828801611651565b91505092959194509250565b60008115159050919050565b6116fa816116e5565b82525050565b600060208201905061171560008301846116f1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178482611459565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117b6576117b561174a565b5b600182019050919050565b60006117cc82611459565b91506117d783611459565b92508282019050808211156117ef576117ee61174a565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061183c6012836117f5565b915061184782611806565b602082019050919050565b6000602082019050818103600083015261186b8161182f565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006118a8601f836117f5565b91506118b382611872565b602082019050919050565b600060208201905081810360008301526118d78161189b565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006119146012836117f5565b915061191f826118de565b602082019050919050565b6000602082019050818103600083015261194381611907565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b60006119806012836117f5565b915061198b8261194a565b602082019050919050565b600060208201905081810360008301526119af81611973565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119f082611459565b91506119fb83611459565b925082611a0b57611a0a6119b6565b5b828206905092915050565b6000611a2182611459565b9150611a2c83611459565b9250828203905081811115611a4457611a4361174a565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a806016836117f5565b9150611a8b82611a4a565b602082019050919050565b60006020820190508181036000830152611aaf81611a73565b9050919050565b6000611ac182611459565b9150611acc83611459565b9250828202611ada81611459565b91508282048414831517611af157611af061174a565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611b2e6015836117f5565b9150611b3982611af8565b602082019050919050565b60006020820190508181036000830152611b5d81611b21565b905091905056fea2646970667358221220572a530a896057c6b2a10a4a6f923d9f148203e94eb13ab4a70424ff5e3115ed64736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635fe8c13b1461003a575b600080fd5b610054600480360381019061004f919061167c565b61006a565b6040516100619190611700565b60405180910390f35b600061007461124c565b6040518060400160405280876000600281106100935761009261171b565b5b60200201518152602001876001600281106100b1576100b061171b565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea61171b565b5b60200201516000600281106101035761010261171b565b5b60200201518152602001886000600281106101215761012061171b565b5b60200201516001600281106101395761013861171b565b5b602002015181525081526020016040518060400160405280886001600281106101655761016461171b565b5b602002015160006002811061017d5761017c61171b565b5b602002015181526020018860016002811061019b5761019a61171b565b5b60200201516001600281106101b3576101b261171b565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e461171b565b5b60200201518152602001856001600281106102035761020261171b565b5b602002015181525081604001819052506000600467ffffffffffffffff8111156102305761022f6113b3565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60048110156102b7578481600481106102805761027f61171b565b5b60200201518282815181106102985761029761171b565b5b60200260200101818152505080806102af90611779565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b90508060800151516001865161032991906117c1565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611852565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a361171b565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e3906118be565b60405180910390fd5b6104438261043e856080015160018561040591906117c1565b815181106104165761041561171b565b5b60200260200101518a85815181106104315761043061171b565b5b6020026020010151610a42565b610b1a565b9150808061045090611779565b915050610387565b506104828183608001516000815181106104755761047461171b565b5b6020026020010151610b1a565b90506104b86104948660000151610c18565b8660200151846000015185602001518587604001518b604001518960600151610cbd565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61127f565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f2519d515309cca1beaec4ab6d7dcb521d626d96fb3c29e255cfbbec8c9bd068081526020017f0b0cce57ba1c6e47e66ade9f754c02de7898dbae16709be56f8a6c41c19521b5815250815260200160405180604001604052807f152df2df8edb12d8c0ffefe06d8129d97750014520c96d86d467fd7a30eacbb981526020017f15dc8cebe32067bc0df2f2a61402cbc06dc46e98160e7600348ae379700f6fbe8152508152508160600181905250600567ffffffffffffffff8111156107a5576107a46113b3565b5b6040519080825280602002602001820160405280156107de57816020015b6107cb6112c6565b8152602001906001900390816107c35790505b50816080018190525060405180604001604052807f2fd45709e33eb2aa97dbc05973d3f7fa3a1a72e8b6f92aeae3adcc19ca09e9d281526020017f2f2975eb5a06bf22e6e37a60df1b2022fd70663f41a7715fe0bc0335ad8ca3ef81525081608001516000815181106108545761085361171b565b5b602002602001018190525060405180604001604052807f043d17e5ccbb804544af48b19bbd4868c83b7d98a888097de68583d90cfc67d581526020017f16107e171453cc20158c74ba5440f50edb7b0addfdbd42fde99bd73d793ecfb581525081608001516001815181106108cc576108cb61171b565b5b602002602001018190525060405180604001604052807f066e3053544b86ab45c2257c2bc1117e3e0cc2ae0fc1543b63b317ee3fc98d9081526020017f188b4a7065de2b4dbd08d50385d1b8e67d0cd387689afcd235765082e62a30be81525081608001516002815181106109445761094361171b565b5b602002602001018190525060405180604001604052807f2288de15d283558541f133b2b49bc119c9487dde17b1314ff8151e9501a47d6f81526020017f1b26010319ddf6d99bf40264bc5ce93590a1b355675b22fb6bcbc400be791d3081525081608001516003815181106109bc576109bb61171b565b5b602002602001018190525060405180604001604052807f2e98271a97058a6908a8ad1b37b8e4f0894e9817decb5909bcedd323c0563c3c81526020017f0ed04c8a1e523b12fff92ef810a41d619bf4bffa8d1c40669754240a8957c18d8152508160800151600481518110610a3457610a3361171b565b5b602002602001018190525090565b610a4a6112c6565b610a526112e0565b836000015181600060038110610a6b57610a6a61171b565b5b602002018181525050836020015181600160038110610a8d57610a8c61171b565b5b6020020181815250508281600260038110610aab57610aaa61171b565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610ad157fe5b5080610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b099061192a565b60405180910390fd5b505092915050565b610b226112c6565b610b2a611302565b836000015181600060048110610b4357610b4261171b565b5b602002018181525050836020015181600160048110610b6557610b6461171b565b5b602002018181525050826000015181600260048110610b8757610b8661171b565b5b602002018181525050826020015181600360048110610ba957610ba861171b565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610bcf57fe5b5080610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611996565b60405180910390fd5b505092915050565b610c206112c6565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610c5d575060008360200151145b15610c81576040518060400160405280600081526020016000815250915050610cb8565b604051806040016040528084600001518152602001828560200151610ca691906119e5565b83610cb19190611a16565b8152509150505b919050565b600080600467ffffffffffffffff811115610cdb57610cda6113b3565b5b604051908082528060200260200182016040528015610d1457816020015b610d016112c6565b815260200190600190039081610cf95790505b5090506000600467ffffffffffffffff811115610d3457610d336113b3565b5b604051908082528060200260200182016040528015610d6d57816020015b610d5a611324565b815260200190600190039081610d525790505b5090508a82600081518110610d8557610d8461171b565b5b60200260200101819052508882600181518110610da557610da461171b565b5b60200260200101819052508682600281518110610dc557610dc461171b565b5b60200260200101819052508482600381518110610de557610de461171b565b5b60200260200101819052508981600081518110610e0557610e0461171b565b5b60200260200101819052508781600181518110610e2557610e2461171b565b5b60200260200101819052508581600281518110610e4557610e4461171b565b5b60200260200101819052508381600381518110610e6557610e6461171b565b5b6020026020010181905250610e7a8282610e8a565b9250505098975050505050505050565b60008151835114610ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec790611a96565b60405180910390fd5b6000835190506000600682610ee59190611ab6565b905060008167ffffffffffffffff811115610f0357610f026113b3565b5b604051908082528060200260200182016040528015610f315781602001602082028036833780820191505090505b50905060005b838110156111b657868181518110610f5257610f5161171b565b5b602002602001015160000151826000600684610f6e9190611ab6565b610f7891906117c1565b81518110610f8957610f8861171b565b5b602002602001018181525050868181518110610fa857610fa761171b565b5b602002602001015160200151826001600684610fc49190611ab6565b610fce91906117c1565b81518110610fdf57610fde61171b565b5b602002602001018181525050858181518110610ffe57610ffd61171b565b5b60200260200101516000015160006002811061101d5761101c61171b565b5b60200201518260026006846110329190611ab6565b61103c91906117c1565b8151811061104d5761104c61171b565b5b60200260200101818152505085818151811061106c5761106b61171b565b5b60200260200101516000015160016002811061108b5761108a61171b565b5b60200201518260036006846110a09190611ab6565b6110aa91906117c1565b815181106110bb576110ba61171b565b5b6020026020010181815250508581815181106110da576110d961171b565b5b6020026020010151602001516000600281106110f9576110f861171b565b5b602002015182600460068461110e9190611ab6565b61111891906117c1565b815181106111295761112861171b565b5b6020026020010181815250508581815181106111485761114761171b565b5b6020026020010151602001516001600281106111675761116661171b565b5b602002015182600560068461117c9190611ab6565b61118691906117c1565b815181106111975761119661171b565b5b60200260200101818152505080806111ae90611779565b915050610f37565b506111bf61134a565b6000602082602086026020860160086107d05a03fa905080600081036111e157fe5b5080611222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121990611b44565b60405180910390fd5b6000826000600181106112385761123761171b565b5b602002015114159550505050505092915050565b604051806060016040528061125f6112c6565b815260200161126c611324565b81526020016112796112c6565b81525090565b6040518060a001604052806112926112c6565b815260200161129f611324565b81526020016112ac611324565b81526020016112b9611324565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061133761136c565b815260200161134461136c565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113eb826113a2565b810181811067ffffffffffffffff8211171561140a576114096113b3565b5b80604052505050565b600061141d61138e565b905061142982826113e2565b919050565b600067ffffffffffffffff821115611449576114486113b3565b5b602082029050919050565b600080fd5b6000819050919050565b61146c81611459565b811461147757600080fd5b50565b60008135905061148981611463565b92915050565b60006114a261149d8461142e565b611413565b905080602084028301858111156114bc576114bb611454565b5b835b818110156114e557806114d1888261147a565b8452602084019350506020810190506114be565b5050509392505050565b600082601f8301126115045761150361139d565b5b600261151184828561148f565b91505092915050565b600067ffffffffffffffff821115611535576115346113b3565b5b602082029050919050565b600061155361154e8461151a565b611413565b9050806040840283018581111561156d5761156c611454565b5b835b81811015611596578061158288826114ef565b84526020840193505060408101905061156f565b5050509392505050565b600082601f8301126115b5576115b461139d565b5b60026115c2848285611540565b91505092915050565b600067ffffffffffffffff8211156115e6576115e56113b3565b5b602082029050919050565b60006116046115ff846115cb565b611413565b9050806020840283018581111561161e5761161d611454565b5b835b818110156116475780611633888261147a565b845260208401935050602081019050611620565b5050509392505050565b600082601f8301126116665761166561139d565b5b60046116738482856115f1565b91505092915050565b600080600080610180858703121561169757611696611398565b5b60006116a5878288016114ef565b94505060406116b6878288016115a0565b93505060c06116c7878288016114ef565b9250506101006116d987828801611651565b91505092959194509250565b60008115159050919050565b6116fa816116e5565b82525050565b600060208201905061171560008301846116f1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178482611459565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117b6576117b561174a565b5b600182019050919050565b60006117cc82611459565b91506117d783611459565b92508282019050808211156117ef576117ee61174a565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061183c6012836117f5565b915061184782611806565b602082019050919050565b6000602082019050818103600083015261186b8161182f565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006118a8601f836117f5565b91506118b382611872565b602082019050919050565b600060208201905081810360008301526118d78161189b565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006119146012836117f5565b915061191f826118de565b602082019050919050565b6000602082019050818103600083015261194381611907565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b60006119806012836117f5565b915061198b8261194a565b602082019050919050565b600060208201905081810360008301526119af81611973565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119f082611459565b91506119fb83611459565b925082611a0b57611a0a6119b6565b5b828206905092915050565b6000611a2182611459565b9150611a2c83611459565b9250828203905081811115611a4457611a4361174a565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a806016836117f5565b9150611a8b82611a4a565b602082019050919050565b60006020820190508181036000830152611aaf81611a73565b9050919050565b6000611ac182611459565b9150611acc83611459565b9250828202611ada81611459565b91508282048414831517611af157611af061174a565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611b2e6015836117f5565b9150611b3982611af8565b602082019050919050565b60006020820190508181036000830152611b5d81611b21565b905091905056fea2646970667358221220572a530a896057c6b2a10a4a6f923d9f148203e94eb13ab4a70424ff5e3115ed64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
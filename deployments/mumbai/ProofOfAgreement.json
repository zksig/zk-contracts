{
  "address": "0x1D5c4ee7FcBf24E19C96b47abBf5e8784De6322d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed33604b02bb09613df90316eaf5ad6eea7721b86a5c80c81e0ddddf733de064",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x1D5c4ee7FcBf24E19C96b47abBf5e8784De6322d",
    "transactionIndex": 0,
    "gasUsed": "1575041",
    "logsBloom": "0x
    "blockHash": "0x935dda66cac3bef8d83342cc9bdb1ad662fb54add22143ad7e61861e76d0fdc9",
    "transactionHash": "0xed33604b02bb09613df90316eaf5ad6eea7721b86a5c80c81e0ddddf733de064",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32297442,
        "transactionHash": "0xed33604b02bb09613df90316eaf5ad6eea7721b86a5c80c81e0ddddf733de064",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e883944c32af190000000000000000000000000000000000000000000000001ae062353a9a0bde000000000000000000000000000000000000000000001b809aeb6442f69aec8200000000000000000000000000000000000000000000000019f7dea0ee675cc5000000000000000000000000000000000000000000001b809bd3e7d742cd9b9b",
        "logIndex": 0,
        "blockHash": "0x935dda66cac3bef8d83342cc9bdb1ad662fb54add22143ad7e61861e76d0fdc9"
      }
    ],
    "blockNumber": 32297442,
    "cumulativeGasUsed": "1575041",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "add9735ffb1c3df158f966197c08f4a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ProofOfAgreement.sol\":\"ProofOfAgreement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ProofOfAgreement.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nlibrary ProofOfAgreementPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ProofOfAgreement {\\n  using ProofOfAgreementPairing for *;\\n  struct VerifyingKey {\\n    ProofOfAgreementPairing.G1Point alfa1;\\n    ProofOfAgreementPairing.G2Point beta2;\\n    ProofOfAgreementPairing.G2Point gamma2;\\n    ProofOfAgreementPairing.G2Point delta2;\\n    ProofOfAgreementPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ProofOfAgreementPairing.G1Point A;\\n    ProofOfAgreementPairing.G2Point B;\\n    ProofOfAgreementPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ProofOfAgreementPairing.G1Point(\\n      19707546691375492439049195476765907453567623936033044097357916657896179314901,\\n      10864754458864178698245809791256443822198435701990478246863789828042876637353\\n    );\\n\\n    vk.beta2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        1170931191278462601990942362056460176537725416212805808664269645582356004671,\\n        12768581099140775072563846415890328386512227408236282741297298367101464191635\\n      ],\\n      [\\n        151418159427816678000654789549358554497407268887897868662784317643228105909,\\n        5667330649696282162322023846534744965502332199770470059788262228431609671708\\n      ]\\n    );\\n    vk.gamma2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.IC = new ProofOfAgreementPairing.G1Point[](5);\\n\\n    vk.IC[0] = ProofOfAgreementPairing.G1Point(\\n      13076542137920348053247031312503927567807188942277043110937553486311660212707,\\n      16803454223678148292108904693391178486033416476157953159661297425257245980070\\n    );\\n\\n    vk.IC[1] = ProofOfAgreementPairing.G1Point(\\n      13250423041854433751635085628962645230225518828945002182714634279680695228225,\\n      16193819530488433615395623863387956808851135126416437521093785985905104702368\\n    );\\n\\n    vk.IC[2] = ProofOfAgreementPairing.G1Point(\\n      5038962524312359906654924067262869792387190817814900816954329602258984482580,\\n      215226351101970735953000604850452674423190120035154573757413345342601787419\\n    );\\n\\n    vk.IC[3] = ProofOfAgreementPairing.G1Point(\\n      1898228526039153716249310508821819128281918806202477132674452138870854485169,\\n      4037069368097158890848722580127594012215115734218991361354594238301545657143\\n    );\\n\\n    vk.IC[4] = ProofOfAgreementPairing.G1Point(\\n      18718423223072035460476997933391795877540707924737354190056731860172237299148,\\n      11791612842129577763894382256965377520476091328828697008996802822255544769993\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ProofOfAgreementPairing.G1Point memory vk_x = ProofOfAgreementPairing\\n      .G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ProofOfAgreementPairing.addition(\\n        vk_x,\\n        ProofOfAgreementPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ProofOfAgreementPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ProofOfAgreementPairing.pairingProd4(\\n        ProofOfAgreementPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[4] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ProofOfAgreementPairing.G1Point(a[0], a[1]);\\n    proof.B = ProofOfAgreementPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ProofOfAgreementPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbd8f159ab9a8984b67c081c9a6c760570e2004ab1d09b468cee231ab2697c1e0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611b98610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635fe8c13b1461003a575b600080fd5b610054600480360381019061004f919061167a565b61006a565b60405161006191906116fe565b60405180910390f35b600061007461124a565b60405180604001604052808760006002811061009357610092611719565b5b60200201518152602001876001600281106100b1576100b0611719565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea611719565b5b602002015160006002811061010357610102611719565b5b602002015181526020018860006002811061012157610120611719565b5b602002015160016002811061013957610138611719565b5b6020020151815250815260200160405180604001604052808860016002811061016557610164611719565b5b602002015160006002811061017d5761017c611719565b5b602002015181526020018860016002811061019b5761019a611719565b5b60200201516001600281106101b3576101b2611719565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e4611719565b5b602002015181526020018560016002811061020357610202611719565b5b602002015181525081604001819052506000600467ffffffffffffffff8111156102305761022f6113b1565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60048110156102b7578481600481106102805761027f611719565b5b602002015182828151811061029857610297611719565b5b60200260200101818152505080806102af90611777565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b90508060800151516001865161032991906117bf565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611850565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a3611719565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e3906118bc565b60405180910390fd5b6104438261043e856080015160018561040591906117bf565b8151811061041657610415611719565b5b60200260200101518a858151811061043157610430611719565b5b6020026020010151610a40565b610b18565b9150808061045090611777565b915050610387565b5061048281836080015160008151811061047557610474611719565b5b6020026020010151610b18565b90506104b86104948660000151610c16565b8660200151846000015185602001518587604001518b604001518960600151610cbb565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61127d565b60405180604001604052807f2b92137e06ae2c6638beaec43338d5adb29e45269025c0180b16b773576730d581526020017f18053baca530ce87ed50dce7a7c99526aa9aba9f1cd2d6dec647f93bdf29d0a98152508160000181905250604051806040016040528060405180604001604052807f0296b93bc46869f63a48f0717dcaf9450b45664e7147066010312df0b8f53f3f81526020017f1c3ac2c37c1e8d41f0277700d2e1c90b3d375ab540e6985b07d4c1941993a293815250815260200160405180604001604052807e55b31baec8fbb9cfb471ccf33b28c57cff7a9f7498065aa7bd41115fc6ccb581526020017f0c87987109cfdb68e131ac0ee8aa92a36b333a842b5c5813c32d5c5f38ca301c8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600567ffffffffffffffff8111156107a4576107a36113b1565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca6112c4565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f1ce90f8146e7c446c6c2c8d302b824cf733c4b93c5d14a02145b3d841b5051e381526020017f25266b0597b5a0b88ca4c16962a547a54600d0bb304ba8d95caacc4c30f435a6815250816080015160008151811061085357610852611719565b5b602002602001018190525060405180604001604052807f1d4b794275e7c85b453e2fddff8b0164544357250f797ca22f7a70621cbe574181526020017f23cd60860e5c6e4e3c4b0c2b717941555b6840b5fda51bc5f10ecf58682ecba081525081608001516001815181106108cb576108ca611719565b5b602002602001018190525060405180604001604052807f0b23f3a3e1f3ec0a7b6b2de9d238e6afacbace76072c78b12d4d8ffb7897b71481526020017e79d0550d8fbb0196ab5063e0ce162aea79969a767fedf221e7fb78042b781b815250816080015160028151811061094257610941611719565b5b602002602001018190525060405180604001604052807f04325bf93df044f68614009e6e3ee2e63fc6f245d9e73d4c4d37e1b35f3584b181526020017f08ece6794f192880245fa47b6a3709886f2ba8da9bf69111442f705bf277733781525081608001516003815181106109ba576109b9611719565b5b602002602001018190525060405180604001604052807f29624089807be70c11564d53ccbea211d1739f5a5e4e503b9ee403685a15ddcc81526020017f1a11d0fcce3670200763c11cb7047d98288dc39e6a0e737ffd38b6266e961dc98152508160800151600481518110610a3257610a31611719565b5b602002602001018190525090565b610a486112c4565b610a506112de565b836000015181600060038110610a6957610a68611719565b5b602002018181525050836020015181600160038110610a8b57610a8a611719565b5b6020020181815250508281600260038110610aa957610aa8611719565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610acf57fe5b5080610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790611928565b60405180910390fd5b505092915050565b610b206112c4565b610b28611300565b836000015181600060048110610b4157610b40611719565b5b602002018181525050836020015181600160048110610b6357610b62611719565b5b602002018181525050826000015181600260048110610b8557610b84611719565b5b602002018181525050826020015181600360048110610ba757610ba6611719565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610bcd57fe5b5080610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0590611994565b60405180910390fd5b505092915050565b610c1e6112c4565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610c5b575060008360200151145b15610c7f576040518060400160405280600081526020016000815250915050610cb6565b604051806040016040528084600001518152602001828560200151610ca491906119e3565b83610caf9190611a14565b8152509150505b919050565b600080600467ffffffffffffffff811115610cd957610cd86113b1565b5b604051908082528060200260200182016040528015610d1257816020015b610cff6112c4565b815260200190600190039081610cf75790505b5090506000600467ffffffffffffffff811115610d3257610d316113b1565b5b604051908082528060200260200182016040528015610d6b57816020015b610d58611322565b815260200190600190039081610d505790505b5090508a82600081518110610d8357610d82611719565b5b60200260200101819052508882600181518110610da357610da2611719565b5b60200260200101819052508682600281518110610dc357610dc2611719565b5b60200260200101819052508482600381518110610de357610de2611719565b5b60200260200101819052508981600081518110610e0357610e02611719565b5b60200260200101819052508781600181518110610e2357610e22611719565b5b60200260200101819052508581600281518110610e4357610e42611719565b5b60200260200101819052508381600381518110610e6357610e62611719565b5b6020026020010181905250610e788282610e88565b9250505098975050505050505050565b60008151835114610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590611a94565b60405180910390fd5b6000835190506000600682610ee39190611ab4565b905060008167ffffffffffffffff811115610f0157610f006113b1565b5b604051908082528060200260200182016040528015610f2f5781602001602082028036833780820191505090505b50905060005b838110156111b457868181518110610f5057610f4f611719565b5b602002602001015160000151826000600684610f6c9190611ab4565b610f7691906117bf565b81518110610f8757610f86611719565b5b602002602001018181525050868181518110610fa657610fa5611719565b5b602002602001015160200151826001600684610fc29190611ab4565b610fcc91906117bf565b81518110610fdd57610fdc611719565b5b602002602001018181525050858181518110610ffc57610ffb611719565b5b60200260200101516000015160006002811061101b5761101a611719565b5b60200201518260026006846110309190611ab4565b61103a91906117bf565b8151811061104b5761104a611719565b5b60200260200101818152505085818151811061106a57611069611719565b5b60200260200101516000015160016002811061108957611088611719565b5b602002015182600360068461109e9190611ab4565b6110a891906117bf565b815181106110b9576110b8611719565b5b6020026020010181815250508581815181106110d8576110d7611719565b5b6020026020010151602001516000600281106110f7576110f6611719565b5b602002015182600460068461110c9190611ab4565b61111691906117bf565b8151811061112757611126611719565b5b60200260200101818152505085818151811061114657611145611719565b5b60200260200101516020015160016002811061116557611164611719565b5b602002015182600560068461117a9190611ab4565b61118491906117bf565b8151811061119557611194611719565b5b60200260200101818152505080806111ac90611777565b915050610f35565b506111bd611348565b6000602082602086026020860160086107d05a03fa905080600081036111df57fe5b5080611220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121790611b42565b60405180910390fd5b60008260006001811061123657611235611719565b5b602002015114159550505050505092915050565b604051806060016040528061125d6112c4565b815260200161126a611322565b81526020016112776112c4565b81525090565b6040518060a001604052806112906112c4565b815260200161129d611322565b81526020016112aa611322565b81526020016112b7611322565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061133561136a565b815260200161134261136a565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113e9826113a0565b810181811067ffffffffffffffff82111715611408576114076113b1565b5b80604052505050565b600061141b61138c565b905061142782826113e0565b919050565b600067ffffffffffffffff821115611447576114466113b1565b5b602082029050919050565b600080fd5b6000819050919050565b61146a81611457565b811461147557600080fd5b50565b60008135905061148781611461565b92915050565b60006114a061149b8461142c565b611411565b905080602084028301858111156114ba576114b9611452565b5b835b818110156114e357806114cf8882611478565b8452602084019350506020810190506114bc565b5050509392505050565b600082601f8301126115025761150161139b565b5b600261150f84828561148d565b91505092915050565b600067ffffffffffffffff821115611533576115326113b1565b5b602082029050919050565b600061155161154c84611518565b611411565b9050806040840283018581111561156b5761156a611452565b5b835b81811015611594578061158088826114ed565b84526020840193505060408101905061156d565b5050509392505050565b600082601f8301126115b3576115b261139b565b5b60026115c084828561153e565b91505092915050565b600067ffffffffffffffff8211156115e4576115e36113b1565b5b602082029050919050565b60006116026115fd846115c9565b611411565b9050806020840283018581111561161c5761161b611452565b5b835b8181101561164557806116318882611478565b84526020840193505060208101905061161e565b5050509392505050565b600082601f8301126116645761166361139b565b5b60046116718482856115ef565b91505092915050565b600080600080610180858703121561169557611694611396565b5b60006116a3878288016114ed565b94505060406116b48782880161159e565b93505060c06116c5878288016114ed565b9250506101006116d78782880161164f565b91505092959194509250565b60008115159050919050565b6116f8816116e3565b82525050565b600060208201905061171360008301846116ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178282611457565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117b4576117b3611748565b5b600182019050919050565b60006117ca82611457565b91506117d583611457565b92508282019050808211156117ed576117ec611748565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061183a6012836117f3565b915061184582611804565b602082019050919050565b600060208201905081810360008301526118698161182d565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006118a6601f836117f3565b91506118b182611870565b602082019050919050565b600060208201905081810360008301526118d581611899565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006119126012836117f3565b915061191d826118dc565b602082019050919050565b6000602082019050818103600083015261194181611905565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061197e6012836117f3565b915061198982611948565b602082019050919050565b600060208201905081810360008301526119ad81611971565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119ee82611457565b91506119f983611457565b925082611a0957611a086119b4565b5b828206905092915050565b6000611a1f82611457565b9150611a2a83611457565b9250828203905081811115611a4257611a41611748565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a7e6016836117f3565b9150611a8982611a48565b602082019050919050565b60006020820190508181036000830152611aad81611a71565b9050919050565b6000611abf82611457565b9150611aca83611457565b9250828202611ad881611457565b91508282048414831517611aef57611aee611748565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611b2c6015836117f3565b9150611b3782611af6565b602082019050919050565b60006020820190508181036000830152611b5b81611b1f565b905091905056fea2646970667358221220773016ad72d2097e02a9b17be1b4b239c2408f13be6181e634f86ff82a67fe7264736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635fe8c13b1461003a575b600080fd5b610054600480360381019061004f919061167a565b61006a565b60405161006191906116fe565b60405180910390f35b600061007461124a565b60405180604001604052808760006002811061009357610092611719565b5b60200201518152602001876001600281106100b1576100b0611719565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea611719565b5b602002015160006002811061010357610102611719565b5b602002015181526020018860006002811061012157610120611719565b5b602002015160016002811061013957610138611719565b5b6020020151815250815260200160405180604001604052808860016002811061016557610164611719565b5b602002015160006002811061017d5761017c611719565b5b602002015181526020018860016002811061019b5761019a611719565b5b60200201516001600281106101b3576101b2611719565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e4611719565b5b602002015181526020018560016002811061020357610202611719565b5b602002015181525081604001819052506000600467ffffffffffffffff8111156102305761022f6113b1565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60048110156102b7578481600481106102805761027f611719565b5b602002015182828151811061029857610297611719565b5b60200260200101818152505080806102af90611777565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b90508060800151516001865161032991906117bf565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611850565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a3611719565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e3906118bc565b60405180910390fd5b6104438261043e856080015160018561040591906117bf565b8151811061041657610415611719565b5b60200260200101518a858151811061043157610430611719565b5b6020026020010151610a40565b610b18565b9150808061045090611777565b915050610387565b5061048281836080015160008151811061047557610474611719565b5b6020026020010151610b18565b90506104b86104948660000151610c16565b8660200151846000015185602001518587604001518b604001518960600151610cbb565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61127d565b60405180604001604052807f2b92137e06ae2c6638beaec43338d5adb29e45269025c0180b16b773576730d581526020017f18053baca530ce87ed50dce7a7c99526aa9aba9f1cd2d6dec647f93bdf29d0a98152508160000181905250604051806040016040528060405180604001604052807f0296b93bc46869f63a48f0717dcaf9450b45664e7147066010312df0b8f53f3f81526020017f1c3ac2c37c1e8d41f0277700d2e1c90b3d375ab540e6985b07d4c1941993a293815250815260200160405180604001604052807e55b31baec8fbb9cfb471ccf33b28c57cff7a9f7498065aa7bd41115fc6ccb581526020017f0c87987109cfdb68e131ac0ee8aa92a36b333a842b5c5813c32d5c5f38ca301c8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600567ffffffffffffffff8111156107a4576107a36113b1565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca6112c4565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f1ce90f8146e7c446c6c2c8d302b824cf733c4b93c5d14a02145b3d841b5051e381526020017f25266b0597b5a0b88ca4c16962a547a54600d0bb304ba8d95caacc4c30f435a6815250816080015160008151811061085357610852611719565b5b602002602001018190525060405180604001604052807f1d4b794275e7c85b453e2fddff8b0164544357250f797ca22f7a70621cbe574181526020017f23cd60860e5c6e4e3c4b0c2b717941555b6840b5fda51bc5f10ecf58682ecba081525081608001516001815181106108cb576108ca611719565b5b602002602001018190525060405180604001604052807f0b23f3a3e1f3ec0a7b6b2de9d238e6afacbace76072c78b12d4d8ffb7897b71481526020017e79d0550d8fbb0196ab5063e0ce162aea79969a767fedf221e7fb78042b781b815250816080015160028151811061094257610941611719565b5b602002602001018190525060405180604001604052807f04325bf93df044f68614009e6e3ee2e63fc6f245d9e73d4c4d37e1b35f3584b181526020017f08ece6794f192880245fa47b6a3709886f2ba8da9bf69111442f705bf277733781525081608001516003815181106109ba576109b9611719565b5b602002602001018190525060405180604001604052807f29624089807be70c11564d53ccbea211d1739f5a5e4e503b9ee403685a15ddcc81526020017f1a11d0fcce3670200763c11cb7047d98288dc39e6a0e737ffd38b6266e961dc98152508160800151600481518110610a3257610a31611719565b5b602002602001018190525090565b610a486112c4565b610a506112de565b836000015181600060038110610a6957610a68611719565b5b602002018181525050836020015181600160038110610a8b57610a8a611719565b5b6020020181815250508281600260038110610aa957610aa8611719565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610acf57fe5b5080610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790611928565b60405180910390fd5b505092915050565b610b206112c4565b610b28611300565b836000015181600060048110610b4157610b40611719565b5b602002018181525050836020015181600160048110610b6357610b62611719565b5b602002018181525050826000015181600260048110610b8557610b84611719565b5b602002018181525050826020015181600360048110610ba757610ba6611719565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610bcd57fe5b5080610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0590611994565b60405180910390fd5b505092915050565b610c1e6112c4565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610c5b575060008360200151145b15610c7f576040518060400160405280600081526020016000815250915050610cb6565b604051806040016040528084600001518152602001828560200151610ca491906119e3565b83610caf9190611a14565b8152509150505b919050565b600080600467ffffffffffffffff811115610cd957610cd86113b1565b5b604051908082528060200260200182016040528015610d1257816020015b610cff6112c4565b815260200190600190039081610cf75790505b5090506000600467ffffffffffffffff811115610d3257610d316113b1565b5b604051908082528060200260200182016040528015610d6b57816020015b610d58611322565b815260200190600190039081610d505790505b5090508a82600081518110610d8357610d82611719565b5b60200260200101819052508882600181518110610da357610da2611719565b5b60200260200101819052508682600281518110610dc357610dc2611719565b5b60200260200101819052508482600381518110610de357610de2611719565b5b60200260200101819052508981600081518110610e0357610e02611719565b5b60200260200101819052508781600181518110610e2357610e22611719565b5b60200260200101819052508581600281518110610e4357610e42611719565b5b60200260200101819052508381600381518110610e6357610e62611719565b5b6020026020010181905250610e788282610e88565b9250505098975050505050505050565b60008151835114610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590611a94565b60405180910390fd5b6000835190506000600682610ee39190611ab4565b905060008167ffffffffffffffff811115610f0157610f006113b1565b5b604051908082528060200260200182016040528015610f2f5781602001602082028036833780820191505090505b50905060005b838110156111b457868181518110610f5057610f4f611719565b5b602002602001015160000151826000600684610f6c9190611ab4565b610f7691906117bf565b81518110610f8757610f86611719565b5b602002602001018181525050868181518110610fa657610fa5611719565b5b602002602001015160200151826001600684610fc29190611ab4565b610fcc91906117bf565b81518110610fdd57610fdc611719565b5b602002602001018181525050858181518110610ffc57610ffb611719565b5b60200260200101516000015160006002811061101b5761101a611719565b5b60200201518260026006846110309190611ab4565b61103a91906117bf565b8151811061104b5761104a611719565b5b60200260200101818152505085818151811061106a57611069611719565b5b60200260200101516000015160016002811061108957611088611719565b5b602002015182600360068461109e9190611ab4565b6110a891906117bf565b815181106110b9576110b8611719565b5b6020026020010181815250508581815181106110d8576110d7611719565b5b6020026020010151602001516000600281106110f7576110f6611719565b5b602002015182600460068461110c9190611ab4565b61111691906117bf565b8151811061112757611126611719565b5b60200260200101818152505085818151811061114657611145611719565b5b60200260200101516020015160016002811061116557611164611719565b5b602002015182600560068461117a9190611ab4565b61118491906117bf565b8151811061119557611194611719565b5b60200260200101818152505080806111ac90611777565b915050610f35565b506111bd611348565b6000602082602086026020860160086107d05a03fa905080600081036111df57fe5b5080611220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121790611b42565b60405180910390fd5b60008260006001811061123657611235611719565b5b602002015114159550505050505092915050565b604051806060016040528061125d6112c4565b815260200161126a611322565b81526020016112776112c4565b81525090565b6040518060a001604052806112906112c4565b815260200161129d611322565b81526020016112aa611322565b81526020016112b7611322565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061133561136a565b815260200161134261136a565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113e9826113a0565b810181811067ffffffffffffffff82111715611408576114076113b1565b5b80604052505050565b600061141b61138c565b905061142782826113e0565b919050565b600067ffffffffffffffff821115611447576114466113b1565b5b602082029050919050565b600080fd5b6000819050919050565b61146a81611457565b811461147557600080fd5b50565b60008135905061148781611461565b92915050565b60006114a061149b8461142c565b611411565b905080602084028301858111156114ba576114b9611452565b5b835b818110156114e357806114cf8882611478565b8452602084019350506020810190506114bc565b5050509392505050565b600082601f8301126115025761150161139b565b5b600261150f84828561148d565b91505092915050565b600067ffffffffffffffff821115611533576115326113b1565b5b602082029050919050565b600061155161154c84611518565b611411565b9050806040840283018581111561156b5761156a611452565b5b835b81811015611594578061158088826114ed565b84526020840193505060408101905061156d565b5050509392505050565b600082601f8301126115b3576115b261139b565b5b60026115c084828561153e565b91505092915050565b600067ffffffffffffffff8211156115e4576115e36113b1565b5b602082029050919050565b60006116026115fd846115c9565b611411565b9050806020840283018581111561161c5761161b611452565b5b835b8181101561164557806116318882611478565b84526020840193505060208101905061161e565b5050509392505050565b600082601f8301126116645761166361139b565b5b60046116718482856115ef565b91505092915050565b600080600080610180858703121561169557611694611396565b5b60006116a3878288016114ed565b94505060406116b48782880161159e565b93505060c06116c5878288016114ed565b9250506101006116d78782880161164f565b91505092959194509250565b60008115159050919050565b6116f8816116e3565b82525050565b600060208201905061171360008301846116ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178282611457565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117b4576117b3611748565b5b600182019050919050565b60006117ca82611457565b91506117d583611457565b92508282019050808211156117ed576117ec611748565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061183a6012836117f3565b915061184582611804565b602082019050919050565b600060208201905081810360008301526118698161182d565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006118a6601f836117f3565b91506118b182611870565b602082019050919050565b600060208201905081810360008301526118d581611899565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006119126012836117f3565b915061191d826118dc565b602082019050919050565b6000602082019050818103600083015261194181611905565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061197e6012836117f3565b915061198982611948565b602082019050919050565b600060208201905081810360008301526119ad81611971565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119ee82611457565b91506119f983611457565b925082611a0957611a086119b4565b5b828206905092915050565b6000611a1f82611457565b9150611a2a83611457565b9250828203905081811115611a4257611a41611748565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a7e6016836117f3565b9150611a8982611a48565b602082019050919050565b60006020820190508181036000830152611aad81611a71565b9050919050565b6000611abf82611457565b9150611aca83611457565b9250828202611ad881611457565b91508282048414831517611aef57611aee611748565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611b2c6015836117f3565b9150611b3782611af6565b602082019050919050565b60006020820190508181036000830152611b5b81611b1f565b905091905056fea2646970667358221220773016ad72d2097e02a9b17be1b4b239c2408f13be6181e634f86ff82a67fe7264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
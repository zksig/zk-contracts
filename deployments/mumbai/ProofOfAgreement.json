{
  "address": "0xe73012611E050B51E8D528B08ac84b74695CBf5d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e8dc88a0fb34bd66fc7aa353e6ae9e3d42ed4dbd1e871c77481290f1d08cacb",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xe73012611E050B51E8D528B08ac84b74695CBf5d",
    "transactionIndex": 5,
    "gasUsed": "1575305",
    "logsBloom": "0x
    "blockHash": "0x2c4c399656b6254c476b64e75d083dbbe0fb7e13b195b174519b1eb8688acb8e",
    "transactionHash": "0x3e8dc88a0fb34bd66fc7aa353e6ae9e3d42ed4dbd1e871c77481290f1d08cacb",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 33722012,
        "transactionHash": "0x3e8dc88a0fb34bd66fc7aa353e6ae9e3d42ed4dbd1e871c77481290f1d08cacb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000086518ea6827000000000000000000000000000000000000000000000000002605b17b1eb2bb880000000000000000000000000000000000000000000004ff608caa81b35cc8a900000000000000000000000000000000000000000000000025fd4c62344a94880000000000000000000000000000000000000000000004ff60950f9a9dc4efa9",
        "logIndex": 12,
        "blockHash": "0x2c4c399656b6254c476b64e75d083dbbe0fb7e13b195b174519b1eb8688acb8e"
      }
    ],
    "blockNumber": 33722012,
    "cumulativeGasUsed": "1945667",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "41d50ab7e0c13d2e487da648ac96db0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ProofOfAgreement.sol\":\"ProofOfAgreement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ProofOfAgreement.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nlibrary ProofOfAgreementPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ProofOfAgreement {\\n  using ProofOfAgreementPairing for *;\\n  struct VerifyingKey {\\n    ProofOfAgreementPairing.G1Point alfa1;\\n    ProofOfAgreementPairing.G2Point beta2;\\n    ProofOfAgreementPairing.G2Point gamma2;\\n    ProofOfAgreementPairing.G2Point delta2;\\n    ProofOfAgreementPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ProofOfAgreementPairing.G1Point A;\\n    ProofOfAgreementPairing.G2Point B;\\n    ProofOfAgreementPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ProofOfAgreementPairing.G1Point(\\n      20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n      9383485363053290200918347156157836566562967994039712273449902621266178545958\\n    );\\n\\n    vk.beta2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731\\n      ],\\n      [\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856\\n      ]\\n    );\\n    vk.gamma2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ProofOfAgreementPairing.G2Point(\\n      [\\n        2484875080901216776092679559197603554815551737863594742889339673743747227559,\\n        11580055277991352323116235664415745410521922073119854787511860926250547102346\\n      ],\\n      [\\n        21745030728132649833022324130024528307493639903556263981748006600145350274548,\\n        20316454307491105913118941427215095663975781309418106094163901409705365689670\\n      ]\\n    );\\n    vk.IC = new ProofOfAgreementPairing.G1Point[](5);\\n\\n    vk.IC[0] = ProofOfAgreementPairing.G1Point(\\n      123788333395297039580665820872406810802185632451520399865968714443296174005,\\n      20212183451282601649875934514200317166311666467898182447343078093814059656590\\n    );\\n\\n    vk.IC[1] = ProofOfAgreementPairing.G1Point(\\n      12130702121344899187429893123103632815993923747170911192437218509636048433857,\\n      9862371878827076169667677299298751468365915887966542544747683829657312784813\\n    );\\n\\n    vk.IC[2] = ProofOfAgreementPairing.G1Point(\\n      7397873721458506476886242588353599712423044964198582706140021176273727193886,\\n      6571945489357438641284999246528455699621462992754246398449618669182192894346\\n    );\\n\\n    vk.IC[3] = ProofOfAgreementPairing.G1Point(\\n      19991321879583137195198874864142306393499838932878097242806843245013603880322,\\n      9549186770214473271633345784797311497369277829270023509672816843500701167086\\n    );\\n\\n    vk.IC[4] = ProofOfAgreementPairing.G1Point(\\n      15579884791243990249995608426894462425810962476752555494390573649106008064636,\\n      2049655118047784063525773016277065673158215168848036184559567552868172324459\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ProofOfAgreementPairing.G1Point memory vk_x = ProofOfAgreementPairing\\n      .G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ProofOfAgreementPairing.addition(\\n        vk_x,\\n        ProofOfAgreementPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ProofOfAgreementPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ProofOfAgreementPairing.pairingProd4(\\n        ProofOfAgreementPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[4] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ProofOfAgreementPairing.G1Point(a[0], a[1]);\\n    proof.B = ProofOfAgreementPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ProofOfAgreementPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe24ce174a46fd7a14968e529b9e2a82ba87b0a71ca804152291295b6b37ed6ec\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611b99610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635fe8c13b1461003a575b600080fd5b610054600480360381019061004f919061167b565b61006a565b60405161006191906116ff565b60405180910390f35b600061007461124b565b6040518060400160405280876000600281106100935761009261171a565b5b60200201518152602001876001600281106100b1576100b061171a565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea61171a565b5b60200201516000600281106101035761010261171a565b5b60200201518152602001886000600281106101215761012061171a565b5b60200201516001600281106101395761013861171a565b5b602002015181525081526020016040518060400160405280886001600281106101655761016461171a565b5b602002015160006002811061017d5761017c61171a565b5b602002015181526020018860016002811061019b5761019a61171a565b5b60200201516001600281106101b3576101b261171a565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e461171a565b5b60200201518152602001856001600281106102035761020261171a565b5b602002015181525081604001819052506000600467ffffffffffffffff8111156102305761022f6113b2565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60048110156102b7578481600481106102805761027f61171a565b5b60200201518282815181106102985761029761171a565b5b60200260200101818152505080806102af90611778565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b90508060800151516001865161032991906117c0565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611851565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a361171a565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e3906118bd565b60405180910390fd5b6104438261043e856080015160018561040591906117c0565b815181106104165761041561171a565b5b60200260200101518a85815181106104315761043061171a565b5b6020026020010151610a41565b610b19565b9150808061045090611778565b915050610387565b506104828183608001516000815181106104755761047461171a565b5b6020026020010151610b19565b90506104b86104948660000151610c17565b8660200151846000015185602001518587604001518b604001518960600151610cbc565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61127e565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f057e63b35672a73fdd66631f8a2e4be34a3a767c538fff32fc575465db989fa781526020017f199a143a9fcf69985c1a7e47a928435fc0c36b0fa9606cef8702a32ac227428a815250815260200160405180604001604052807f301340513c9cb2a5cc7aee660a067b4ad65201279f21df5175d3fbed5161adf481526020017f2ceab4a4c66a4f60e1a66c8aa31a9a5c7af616887e81db5b88d58cedf2d555468152508152508160600181905250600567ffffffffffffffff8111156107a5576107a46113b2565b5b6040519080825280602002602001820160405280156107de57816020015b6107cb6112c5565b8152602001906001900390816107c35790505b50816080018190525060405180604001604052807e460fcc79e3c63495256c5d01aeb56f4a39590e8208e6e449c1a8b9adb96fb581526020017f2cafb0bfc36108f287b0f77dbc7f2b1f672f22cdfc87066fcd2fb17b048a658e81525081608001516000815181106108535761085261171a565b5b602002602001018190525060405180604001604052807f1ad1bbed34dcd2e57420af53fdf55d5cebbe0162bf090e4f632702a7a95eb2c181526020017f15cde798554762c297ed8b397d8d1514f84b827825b686aa1c635e45d5cd71ad81525081608001516001815181106108cb576108ca61171a565b5b602002602001018190525060405180604001604052807f105b0c5318af769d0139c5fa8df90d50db55e2b20f4e40f083d0843d671d031e81526020017f0e8796de4fa253cb2b230c386714b8a52ec3d1ccff00aeb2a3c1abe09f3ac18a81525081608001516002815181106109435761094261171a565b5b602002602001018190525060405180604001604052807f2c32afecc2df2dd224ee5976b1a81c5a26a86235a9791d0a4e7f0eb76f928d8281526020017f151ca5ef057c17df90bc749148cccdfe8151f845f167247d29c308627a012dee81525081608001516003815181106109bb576109ba61171a565b5b602002602001018190525060405180604001604052807f2271e6fcf263db931b9dc4a67930a8e8d7677cae770b1d54d1db3cafbb6cc27c81526020017f0488104db4ddb4370f069d4b0be50e7804d342fac2d58b780717fb8145065e6b8152508160800151600481518110610a3357610a3261171a565b5b602002602001018190525090565b610a496112c5565b610a516112df565b836000015181600060038110610a6a57610a6961171a565b5b602002018181525050836020015181600160038110610a8c57610a8b61171a565b5b6020020181815250508281600260038110610aaa57610aa961171a565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610ad057fe5b5080610b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0890611929565b60405180910390fd5b505092915050565b610b216112c5565b610b29611301565b836000015181600060048110610b4257610b4161171a565b5b602002018181525050836020015181600160048110610b6457610b6361171a565b5b602002018181525050826000015181600260048110610b8657610b8561171a565b5b602002018181525050826020015181600360048110610ba857610ba761171a565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610bce57fe5b5080610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0690611995565b60405180910390fd5b505092915050565b610c1f6112c5565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610c5c575060008360200151145b15610c80576040518060400160405280600081526020016000815250915050610cb7565b604051806040016040528084600001518152602001828560200151610ca591906119e4565b83610cb09190611a15565b8152509150505b919050565b600080600467ffffffffffffffff811115610cda57610cd96113b2565b5b604051908082528060200260200182016040528015610d1357816020015b610d006112c5565b815260200190600190039081610cf85790505b5090506000600467ffffffffffffffff811115610d3357610d326113b2565b5b604051908082528060200260200182016040528015610d6c57816020015b610d59611323565b815260200190600190039081610d515790505b5090508a82600081518110610d8457610d8361171a565b5b60200260200101819052508882600181518110610da457610da361171a565b5b60200260200101819052508682600281518110610dc457610dc361171a565b5b60200260200101819052508482600381518110610de457610de361171a565b5b60200260200101819052508981600081518110610e0457610e0361171a565b5b60200260200101819052508781600181518110610e2457610e2361171a565b5b60200260200101819052508581600281518110610e4457610e4361171a565b5b60200260200101819052508381600381518110610e6457610e6361171a565b5b6020026020010181905250610e798282610e89565b9250505098975050505050505050565b60008151835114610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690611a95565b60405180910390fd5b6000835190506000600682610ee49190611ab5565b905060008167ffffffffffffffff811115610f0257610f016113b2565b5b604051908082528060200260200182016040528015610f305781602001602082028036833780820191505090505b50905060005b838110156111b557868181518110610f5157610f5061171a565b5b602002602001015160000151826000600684610f6d9190611ab5565b610f7791906117c0565b81518110610f8857610f8761171a565b5b602002602001018181525050868181518110610fa757610fa661171a565b5b602002602001015160200151826001600684610fc39190611ab5565b610fcd91906117c0565b81518110610fde57610fdd61171a565b5b602002602001018181525050858181518110610ffd57610ffc61171a565b5b60200260200101516000015160006002811061101c5761101b61171a565b5b60200201518260026006846110319190611ab5565b61103b91906117c0565b8151811061104c5761104b61171a565b5b60200260200101818152505085818151811061106b5761106a61171a565b5b60200260200101516000015160016002811061108a5761108961171a565b5b602002015182600360068461109f9190611ab5565b6110a991906117c0565b815181106110ba576110b961171a565b5b6020026020010181815250508581815181106110d9576110d861171a565b5b6020026020010151602001516000600281106110f8576110f761171a565b5b602002015182600460068461110d9190611ab5565b61111791906117c0565b815181106111285761112761171a565b5b6020026020010181815250508581815181106111475761114661171a565b5b6020026020010151602001516001600281106111665761116561171a565b5b602002015182600560068461117b9190611ab5565b61118591906117c0565b815181106111965761119561171a565b5b60200260200101818152505080806111ad90611778565b915050610f36565b506111be611349565b6000602082602086026020860160086107d05a03fa905080600081036111e057fe5b5080611221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121890611b43565b60405180910390fd5b6000826000600181106112375761123661171a565b5b602002015114159550505050505092915050565b604051806060016040528061125e6112c5565b815260200161126b611323565b81526020016112786112c5565b81525090565b6040518060a001604052806112916112c5565b815260200161129e611323565b81526020016112ab611323565b81526020016112b8611323565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061133661136b565b815260200161134361136b565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113ea826113a1565b810181811067ffffffffffffffff82111715611409576114086113b2565b5b80604052505050565b600061141c61138d565b905061142882826113e1565b919050565b600067ffffffffffffffff821115611448576114476113b2565b5b602082029050919050565b600080fd5b6000819050919050565b61146b81611458565b811461147657600080fd5b50565b60008135905061148881611462565b92915050565b60006114a161149c8461142d565b611412565b905080602084028301858111156114bb576114ba611453565b5b835b818110156114e457806114d08882611479565b8452602084019350506020810190506114bd565b5050509392505050565b600082601f8301126115035761150261139c565b5b600261151084828561148e565b91505092915050565b600067ffffffffffffffff821115611534576115336113b2565b5b602082029050919050565b600061155261154d84611519565b611412565b9050806040840283018581111561156c5761156b611453565b5b835b81811015611595578061158188826114ee565b84526020840193505060408101905061156e565b5050509392505050565b600082601f8301126115b4576115b361139c565b5b60026115c184828561153f565b91505092915050565b600067ffffffffffffffff8211156115e5576115e46113b2565b5b602082029050919050565b60006116036115fe846115ca565b611412565b9050806020840283018581111561161d5761161c611453565b5b835b8181101561164657806116328882611479565b84526020840193505060208101905061161f565b5050509392505050565b600082601f8301126116655761166461139c565b5b60046116728482856115f0565b91505092915050565b600080600080610180858703121561169657611695611397565b5b60006116a4878288016114ee565b94505060406116b58782880161159f565b93505060c06116c6878288016114ee565b9250506101006116d887828801611650565b91505092959194509250565b60008115159050919050565b6116f9816116e4565b82525050565b600060208201905061171460008301846116f0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178382611458565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117b5576117b4611749565b5b600182019050919050565b60006117cb82611458565b91506117d683611458565b92508282019050808211156117ee576117ed611749565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061183b6012836117f4565b915061184682611805565b602082019050919050565b6000602082019050818103600083015261186a8161182e565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006118a7601f836117f4565b91506118b282611871565b602082019050919050565b600060208201905081810360008301526118d68161189a565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006119136012836117f4565b915061191e826118dd565b602082019050919050565b6000602082019050818103600083015261194281611906565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061197f6012836117f4565b915061198a82611949565b602082019050919050565b600060208201905081810360008301526119ae81611972565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119ef82611458565b91506119fa83611458565b925082611a0a57611a096119b5565b5b828206905092915050565b6000611a2082611458565b9150611a2b83611458565b9250828203905081811115611a4357611a42611749565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a7f6016836117f4565b9150611a8a82611a49565b602082019050919050565b60006020820190508181036000830152611aae81611a72565b9050919050565b6000611ac082611458565b9150611acb83611458565b9250828202611ad981611458565b91508282048414831517611af057611aef611749565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611b2d6015836117f4565b9150611b3882611af7565b602082019050919050565b60006020820190508181036000830152611b5c81611b20565b905091905056fea26469706673582212204da0d2c449d3819e64191be9dc344a30cb84ffd1e99562e0886964beb0c2760964736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635fe8c13b1461003a575b600080fd5b610054600480360381019061004f919061167b565b61006a565b60405161006191906116ff565b60405180910390f35b600061007461124b565b6040518060400160405280876000600281106100935761009261171a565b5b60200201518152602001876001600281106100b1576100b061171a565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea61171a565b5b60200201516000600281106101035761010261171a565b5b60200201518152602001886000600281106101215761012061171a565b5b60200201516001600281106101395761013861171a565b5b602002015181525081526020016040518060400160405280886001600281106101655761016461171a565b5b602002015160006002811061017d5761017c61171a565b5b602002015181526020018860016002811061019b5761019a61171a565b5b60200201516001600281106101b3576101b261171a565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e461171a565b5b60200201518152602001856001600281106102035761020261171a565b5b602002015181525081604001819052506000600467ffffffffffffffff8111156102305761022f6113b2565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60048110156102b7578481600481106102805761027f61171a565b5b60200201518282815181106102985761029761171a565b5b60200260200101818152505080806102af90611778565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b90508060800151516001865161032991906117c0565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611851565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a361171a565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e3906118bd565b60405180910390fd5b6104438261043e856080015160018561040591906117c0565b815181106104165761041561171a565b5b60200260200101518a85815181106104315761043061171a565b5b6020026020010151610a41565b610b19565b9150808061045090611778565b915050610387565b506104828183608001516000815181106104755761047461171a565b5b6020026020010151610b19565b90506104b86104948660000151610c17565b8660200151846000015185602001518587604001518b604001518960600151610cbc565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61127e565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f057e63b35672a73fdd66631f8a2e4be34a3a767c538fff32fc575465db989fa781526020017f199a143a9fcf69985c1a7e47a928435fc0c36b0fa9606cef8702a32ac227428a815250815260200160405180604001604052807f301340513c9cb2a5cc7aee660a067b4ad65201279f21df5175d3fbed5161adf481526020017f2ceab4a4c66a4f60e1a66c8aa31a9a5c7af616887e81db5b88d58cedf2d555468152508152508160600181905250600567ffffffffffffffff8111156107a5576107a46113b2565b5b6040519080825280602002602001820160405280156107de57816020015b6107cb6112c5565b8152602001906001900390816107c35790505b50816080018190525060405180604001604052807e460fcc79e3c63495256c5d01aeb56f4a39590e8208e6e449c1a8b9adb96fb581526020017f2cafb0bfc36108f287b0f77dbc7f2b1f672f22cdfc87066fcd2fb17b048a658e81525081608001516000815181106108535761085261171a565b5b602002602001018190525060405180604001604052807f1ad1bbed34dcd2e57420af53fdf55d5cebbe0162bf090e4f632702a7a95eb2c181526020017f15cde798554762c297ed8b397d8d1514f84b827825b686aa1c635e45d5cd71ad81525081608001516001815181106108cb576108ca61171a565b5b602002602001018190525060405180604001604052807f105b0c5318af769d0139c5fa8df90d50db55e2b20f4e40f083d0843d671d031e81526020017f0e8796de4fa253cb2b230c386714b8a52ec3d1ccff00aeb2a3c1abe09f3ac18a81525081608001516002815181106109435761094261171a565b5b602002602001018190525060405180604001604052807f2c32afecc2df2dd224ee5976b1a81c5a26a86235a9791d0a4e7f0eb76f928d8281526020017f151ca5ef057c17df90bc749148cccdfe8151f845f167247d29c308627a012dee81525081608001516003815181106109bb576109ba61171a565b5b602002602001018190525060405180604001604052807f2271e6fcf263db931b9dc4a67930a8e8d7677cae770b1d54d1db3cafbb6cc27c81526020017f0488104db4ddb4370f069d4b0be50e7804d342fac2d58b780717fb8145065e6b8152508160800151600481518110610a3357610a3261171a565b5b602002602001018190525090565b610a496112c5565b610a516112df565b836000015181600060038110610a6a57610a6961171a565b5b602002018181525050836020015181600160038110610a8c57610a8b61171a565b5b6020020181815250508281600260038110610aaa57610aa961171a565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610ad057fe5b5080610b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0890611929565b60405180910390fd5b505092915050565b610b216112c5565b610b29611301565b836000015181600060048110610b4257610b4161171a565b5b602002018181525050836020015181600160048110610b6457610b6361171a565b5b602002018181525050826000015181600260048110610b8657610b8561171a565b5b602002018181525050826020015181600360048110610ba857610ba761171a565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610bce57fe5b5080610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0690611995565b60405180910390fd5b505092915050565b610c1f6112c5565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610c5c575060008360200151145b15610c80576040518060400160405280600081526020016000815250915050610cb7565b604051806040016040528084600001518152602001828560200151610ca591906119e4565b83610cb09190611a15565b8152509150505b919050565b600080600467ffffffffffffffff811115610cda57610cd96113b2565b5b604051908082528060200260200182016040528015610d1357816020015b610d006112c5565b815260200190600190039081610cf85790505b5090506000600467ffffffffffffffff811115610d3357610d326113b2565b5b604051908082528060200260200182016040528015610d6c57816020015b610d59611323565b815260200190600190039081610d515790505b5090508a82600081518110610d8457610d8361171a565b5b60200260200101819052508882600181518110610da457610da361171a565b5b60200260200101819052508682600281518110610dc457610dc361171a565b5b60200260200101819052508482600381518110610de457610de361171a565b5b60200260200101819052508981600081518110610e0457610e0361171a565b5b60200260200101819052508781600181518110610e2457610e2361171a565b5b60200260200101819052508581600281518110610e4457610e4361171a565b5b60200260200101819052508381600381518110610e6457610e6361171a565b5b6020026020010181905250610e798282610e89565b9250505098975050505050505050565b60008151835114610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690611a95565b60405180910390fd5b6000835190506000600682610ee49190611ab5565b905060008167ffffffffffffffff811115610f0257610f016113b2565b5b604051908082528060200260200182016040528015610f305781602001602082028036833780820191505090505b50905060005b838110156111b557868181518110610f5157610f5061171a565b5b602002602001015160000151826000600684610f6d9190611ab5565b610f7791906117c0565b81518110610f8857610f8761171a565b5b602002602001018181525050868181518110610fa757610fa661171a565b5b602002602001015160200151826001600684610fc39190611ab5565b610fcd91906117c0565b81518110610fde57610fdd61171a565b5b602002602001018181525050858181518110610ffd57610ffc61171a565b5b60200260200101516000015160006002811061101c5761101b61171a565b5b60200201518260026006846110319190611ab5565b61103b91906117c0565b8151811061104c5761104b61171a565b5b60200260200101818152505085818151811061106b5761106a61171a565b5b60200260200101516000015160016002811061108a5761108961171a565b5b602002015182600360068461109f9190611ab5565b6110a991906117c0565b815181106110ba576110b961171a565b5b6020026020010181815250508581815181106110d9576110d861171a565b5b6020026020010151602001516000600281106110f8576110f761171a565b5b602002015182600460068461110d9190611ab5565b61111791906117c0565b815181106111285761112761171a565b5b6020026020010181815250508581815181106111475761114661171a565b5b6020026020010151602001516001600281106111665761116561171a565b5b602002015182600560068461117b9190611ab5565b61118591906117c0565b815181106111965761119561171a565b5b60200260200101818152505080806111ad90611778565b915050610f36565b506111be611349565b6000602082602086026020860160086107d05a03fa905080600081036111e057fe5b5080611221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121890611b43565b60405180910390fd5b6000826000600181106112375761123661171a565b5b602002015114159550505050505092915050565b604051806060016040528061125e6112c5565b815260200161126b611323565b81526020016112786112c5565b81525090565b6040518060a001604052806112916112c5565b815260200161129e611323565b81526020016112ab611323565b81526020016112b8611323565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061133661136b565b815260200161134361136b565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113ea826113a1565b810181811067ffffffffffffffff82111715611409576114086113b2565b5b80604052505050565b600061141c61138d565b905061142882826113e1565b919050565b600067ffffffffffffffff821115611448576114476113b2565b5b602082029050919050565b600080fd5b6000819050919050565b61146b81611458565b811461147657600080fd5b50565b60008135905061148881611462565b92915050565b60006114a161149c8461142d565b611412565b905080602084028301858111156114bb576114ba611453565b5b835b818110156114e457806114d08882611479565b8452602084019350506020810190506114bd565b5050509392505050565b600082601f8301126115035761150261139c565b5b600261151084828561148e565b91505092915050565b600067ffffffffffffffff821115611534576115336113b2565b5b602082029050919050565b600061155261154d84611519565b611412565b9050806040840283018581111561156c5761156b611453565b5b835b81811015611595578061158188826114ee565b84526020840193505060408101905061156e565b5050509392505050565b600082601f8301126115b4576115b361139c565b5b60026115c184828561153f565b91505092915050565b600067ffffffffffffffff8211156115e5576115e46113b2565b5b602082029050919050565b60006116036115fe846115ca565b611412565b9050806020840283018581111561161d5761161c611453565b5b835b8181101561164657806116328882611479565b84526020840193505060208101905061161f565b5050509392505050565b600082601f8301126116655761166461139c565b5b60046116728482856115f0565b91505092915050565b600080600080610180858703121561169657611695611397565b5b60006116a4878288016114ee565b94505060406116b58782880161159f565b93505060c06116c6878288016114ee565b9250506101006116d887828801611650565b91505092959194509250565b60008115159050919050565b6116f9816116e4565b82525050565b600060208201905061171460008301846116f0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178382611458565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117b5576117b4611749565b5b600182019050919050565b60006117cb82611458565b91506117d683611458565b92508282019050808211156117ee576117ed611749565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061183b6012836117f4565b915061184682611805565b602082019050919050565b6000602082019050818103600083015261186a8161182e565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b60006118a7601f836117f4565b91506118b282611871565b602082019050919050565b600060208201905081810360008301526118d68161189a565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006119136012836117f4565b915061191e826118dd565b602082019050919050565b6000602082019050818103600083015261194281611906565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061197f6012836117f4565b915061198a82611949565b602082019050919050565b600060208201905081810360008301526119ae81611972565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119ef82611458565b91506119fa83611458565b925082611a0a57611a096119b5565b5b828206905092915050565b6000611a2082611458565b9150611a2b83611458565b9250828203905081811115611a4357611a42611749565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611a7f6016836117f4565b9150611a8a82611a49565b602082019050919050565b60006020820190508181036000830152611aae81611a72565b9050919050565b6000611ac082611458565b9150611acb83611458565b9250828202611ad981611458565b91508282048414831517611af057611aef611749565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611b2d6015836117f4565b9150611b3882611af7565b602082019050919050565b60006020820190508181036000830152611b5c81611b20565b905091905056fea26469706673582212204da0d2c449d3819e64191be9dc344a30cb84ffd1e99562e0886964beb0c2760964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.9;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/MinimalForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (metatx/MinimalForwarder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/EIP712.sol\";\n\n/**\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\n *\n * MinimalForwarder is mainly meant for testing, as it is missing features to be a good production-ready forwarder. This\n * contract does not intend to have all the properties that are needed for a sound forwarding system. A fully\n * functioning forwarding system with good properties requires more complexity. We suggest you look at other projects\n * such as the GSN which do have the goal of building a system like that.\n */\ncontract MinimalForwarder is EIP712 {\n    using ECDSA for bytes32;\n\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n    }\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\");\n\n    mapping(address => uint256) private _nonces;\n\n    constructor() EIP712(\"MinimalForwarder\", \"0.0.1\") {}\n\n    function getNonce(address from) public view returns (uint256) {\n        return _nonces[from];\n    }\n\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\n        address signer = _hashTypedDataV4(\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\n        ).recover(signature);\n        return _nonces[req.from] == req.nonce && signer == req.from;\n    }\n\n    function execute(ForwardRequest calldata req, bytes calldata signature)\n        public\n        payable\n        returns (bool, bytes memory)\n    {\n        require(verify(req, signature), \"MinimalForwarder: signature does not match request\");\n        _nonces[req.from] = req.nonce + 1;\n\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\n            abi.encodePacked(req.data, req.from)\n        );\n\n        // Validate that the relayer has sent enough gas for the call.\n        // See https://ronan.eth.limo/blog/ethereum-gas-dangers/\n        if (gasleft() <= req.gas / 63) {\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\n            // neither revert or assert consume all gas since Solidity 0.8.0\n            // https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require\n            /// @solidity memory-safe-assembly\n            assembly {\n                invalid()\n            }\n        }\n\n        return (success, returndata);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/types/ZKAgreementTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary ZKAgreementTypes {\n  struct Agreement {\n    uint256 signaturesRoot;\n    bytes validAgreementIdProof;\n    bytes validSignaturesProof;\n  }\n\n  struct CreateAgreementParams {\n    uint256 agreementId;\n    bytes proof;\n  }\n\n  struct SignParams {\n    uint256 agreementId;\n    uint256 root;\n    bytes proof;\n  }\n}\n"
    },
    "contracts/verifiers/ValidAgreementId.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\nlibrary ValidAgreementId {\n  uint32 constant n = 262144;\n  uint16 constant nPublic = 1;\n  uint16 constant nLagrange = 1;\n\n  uint256 constant Qmx =\n    7120193328317808359899892524621781186850831558316707137752492639139095052751;\n  uint256 constant Qmy =\n    9601421174889664019855630529898314407523652434242599694588370308245496225100;\n  uint256 constant Qlx =\n    20012487675649004410018716876196046749586948450732828442957548002077528574451;\n  uint256 constant Qly =\n    14276035435038131857297554034033471134298833855957721006901761979956753473382;\n  uint256 constant Qrx =\n    14225129607826749514222151406288149408949392391166509068785695412081928783558;\n  uint256 constant Qry =\n    8932194592871280274172481075372031620764254760762257079580694664926557178829;\n  uint256 constant Qox =\n    11701645075762700967990513321419641593352325017804891699025129546271782391706;\n  uint256 constant Qoy =\n    20371334096502250930337062608940964319467340320518162780805109293885371410367;\n  uint256 constant Qcx =\n    19008509224131786219429684934047538003663756595008190440335142022200911466675;\n  uint256 constant Qcy =\n    7597854521244510784074870744745949986688595278783783288720095086799480545893;\n  uint256 constant S1x =\n    482218634149398923147042777016595786997300681119887253412844501983296656863;\n  uint256 constant S1y =\n    20784458263354404766154469498218877278467411726402118529367950477428577510310;\n  uint256 constant S2x =\n    18145449426449659185717533544794006887275975050737430168510950075192634893796;\n  uint256 constant S2y =\n    1838115583902651888422470336797459497689021677512064364616868375670052492179;\n  uint256 constant S3x =\n    17867435657722563968008979213740330498514321407005631495185732280896792028852;\n  uint256 constant S3y =\n    21546223645358067337826688601221023222710555540419323202434717086406962340398;\n  uint256 constant k1 = 2;\n  uint256 constant k2 = 3;\n  uint256 constant X2x1 =\n    14191176354905070490717531806826641383044715640553330788488102588115646966070;\n  uint256 constant X2x2 =\n    999251940849815177411677981739857011152674133100659605785688603610356821496;\n  uint256 constant X2y1 =\n    11285099626586890060988452771000099276866189313258039162897885132069146012030;\n  uint256 constant X2y2 =\n    16379976780622467578103462160974444735715077741479937785305266039858947702895;\n\n  uint256 constant q =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\n  uint256 constant qf =\n    21888242871839275222246405745257275088696311157297823662689037894645226208583;\n  uint256 constant w1 =\n    11699596668367776675346610687704220591435078791727316319397053191800576917728;\n\n  uint256 constant G1x = 1;\n  uint256 constant G1y = 2;\n  uint256 constant G2x1 =\n    10857046999023057135944570762232829481370756359578518086990519993285655852781;\n  uint256 constant G2x2 =\n    11559732032986387107991004021392285783925812861821192530917403151452391805634;\n  uint256 constant G2y1 =\n    8495653923123431417604973247489272438418190587263600148770280649306958101930;\n  uint256 constant G2y2 =\n    4082367875863433681332203403145435568316851327593401208105741076214120093531;\n  uint16 constant pA = 32;\n  uint16 constant pB = 96;\n  uint16 constant pC = 160;\n  uint16 constant pZ = 224;\n  uint16 constant pT1 = 288;\n  uint16 constant pT2 = 352;\n  uint16 constant pT3 = 416;\n  uint16 constant pWxi = 480;\n  uint16 constant pWxiw = 544;\n  uint16 constant pEval_a = 608;\n  uint16 constant pEval_b = 640;\n  uint16 constant pEval_c = 672;\n  uint16 constant pEval_s1 = 704;\n  uint16 constant pEval_s2 = 736;\n  uint16 constant pEval_zw = 768;\n  uint16 constant pEval_r = 800;\n\n  uint16 constant pAlpha = 0;\n  uint16 constant pBeta = 32;\n  uint16 constant pGamma = 64;\n  uint16 constant pXi = 96;\n  uint16 constant pXin = 128;\n  uint16 constant pBetaXi = 160;\n  uint16 constant pV1 = 192;\n  uint16 constant pV2 = 224;\n  uint16 constant pV3 = 256;\n  uint16 constant pV4 = 288;\n  uint16 constant pV5 = 320;\n  uint16 constant pV6 = 352;\n  uint16 constant pU = 384;\n  uint16 constant pPl = 416;\n  uint16 constant pEval_t = 448;\n  uint16 constant pA1 = 480;\n  uint16 constant pB1 = 544;\n  uint16 constant pZh = 608;\n  uint16 constant pZhInv = 640;\n\n  uint16 constant pEval_l1 = 672;\n\n  uint16 constant lastMem = 704;\n\n  function verifyProof(\n    bytes memory proof,\n    uint[] memory pubSignals\n  ) public view returns (bool) {\n    assembly {\n      /////////\n      // Computes the inverse using the extended euclidean algorithm\n      /////////\n      function inverse(a, q) -> inv {\n        let t := 0\n        let newt := 1\n        let r := q\n        let newr := a\n        let quotient\n        let aux\n\n        for {\n\n        } newr {\n\n        } {\n          quotient := sdiv(r, newr)\n          aux := sub(t, mul(quotient, newt))\n          t := newt\n          newt := aux\n\n          aux := sub(r, mul(quotient, newr))\n          r := newr\n          newr := aux\n        }\n\n        if gt(r, 1) {\n          revert(0, 0)\n        }\n        if slt(t, 0) {\n          t := add(t, q)\n        }\n\n        inv := t\n      }\n\n      ///////\n      // Computes the inverse of an array of values\n      // See https://vitalik.ca/general/2018/07/21/starks_part_3.html in section where explain fields operations\n      //////\n      function inverseArray(pVals, n) {\n        let pAux := mload(0x40) // Point to the next free position\n        let pIn := pVals\n        let lastPIn := add(pVals, mul(n, 32)) // Read n elemnts\n        let acc := mload(pIn) // Read the first element\n        pIn := add(pIn, 32) // Point to the second element\n        let inv\n\n        for {\n\n        } lt(pIn, lastPIn) {\n          pAux := add(pAux, 32)\n          pIn := add(pIn, 32)\n        } {\n          mstore(pAux, acc)\n          acc := mulmod(acc, mload(pIn), q)\n        }\n        acc := inverse(acc, q)\n\n        // At this point pAux pint to the next free position we substract 1 to point to the last used\n        pAux := sub(pAux, 32)\n        // pIn points to the n+1 element, we substract to point to n\n        pIn := sub(pIn, 32)\n        lastPIn := pVals // We don't process the first element\n        for {\n\n        } gt(pIn, lastPIn) {\n          pAux := sub(pAux, 32)\n          pIn := sub(pIn, 32)\n        } {\n          inv := mulmod(acc, mload(pAux), q)\n          acc := mulmod(acc, mload(pIn), q)\n          mstore(pIn, inv)\n        }\n        // pIn points to first element, we just set it.\n        mstore(pIn, acc)\n      }\n\n      function checkField(v) {\n        if iszero(lt(v, q)) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function checkInput(pProof) {\n        if iszero(eq(mload(pProof), 800)) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n        checkField(mload(add(pProof, pEval_a)))\n        checkField(mload(add(pProof, pEval_b)))\n        checkField(mload(add(pProof, pEval_c)))\n        checkField(mload(add(pProof, pEval_s1)))\n        checkField(mload(add(pProof, pEval_s2)))\n        checkField(mload(add(pProof, pEval_zw)))\n        checkField(mload(add(pProof, pEval_r)))\n\n        // Points are checked in the point operations precompiled smart contracts\n      }\n\n      function calculateChallanges(pProof, pMem, pPublic) {\n        let a\n        let b\n\n        mstore(add(pMem, 704), mload(add(pPublic, 32)))\n\n        mstore(add(pMem, 736), mload(add(pProof, pA)))\n        mstore(add(pMem, 768), mload(add(pProof, add(pA, 32))))\n        mstore(add(pMem, 800), mload(add(pProof, add(pA, 64))))\n        mstore(add(pMem, 832), mload(add(pProof, add(pA, 96))))\n        mstore(add(pMem, 864), mload(add(pProof, add(pA, 128))))\n        mstore(add(pMem, 896), mload(add(pProof, add(pA, 160))))\n\n        b := mod(keccak256(add(pMem, lastMem), 224), q)\n        mstore(add(pMem, pBeta), b)\n        mstore(add(pMem, pGamma), mod(keccak256(add(pMem, pBeta), 32), q))\n        mstore(add(pMem, pAlpha), mod(keccak256(add(pProof, pZ), 64), q))\n\n        a := mod(keccak256(add(pProof, pT1), 192), q)\n        mstore(add(pMem, pXi), a)\n        mstore(add(pMem, pBetaXi), mulmod(b, a, q))\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        mstore(add(pMem, pXin), a)\n        a := mod(add(sub(a, 1), q), q)\n        mstore(add(pMem, pZh), a)\n        mstore(add(pMem, pZhInv), a) // We will invert later together with lagrange pols\n\n        let v1 := mod(keccak256(add(pProof, pEval_a), 224), q)\n        mstore(add(pMem, pV1), v1)\n        a := mulmod(v1, v1, q)\n        mstore(add(pMem, pV2), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV3), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV4), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV5), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV6), a)\n\n        mstore(add(pMem, pU), mod(keccak256(add(pProof, pWxi), 128), q))\n      }\n\n      function calculateLagrange(pMem) {\n        let w := 1\n\n        mstore(\n          add(pMem, pEval_l1),\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\n        )\n\n        inverseArray(add(pMem, pZhInv), 2)\n\n        let zh := mload(add(pMem, pZh))\n        w := 1\n\n        mstore(add(pMem, pEval_l1), mulmod(mload(add(pMem, pEval_l1)), zh, q))\n      }\n\n      function calculatePl(pMem, pPub) {\n        let pl := 0\n\n        pl := mod(\n          add(\n            sub(\n              pl,\n              mulmod(mload(add(pMem, pEval_l1)), mload(add(pPub, 32)), q)\n            ),\n            q\n          ),\n          q\n        )\n\n        mstore(add(pMem, pPl), pl)\n      }\n\n      function calculateT(pProof, pMem) {\n        let t\n        let t1\n        let t2\n        t := addmod(mload(add(pProof, pEval_r)), mload(add(pMem, pPl)), q)\n\n        t1 := mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pBeta)), q)\n\n        t1 := addmod(t1, mload(add(pProof, pEval_a)), q)\n\n        t1 := addmod(t1, mload(add(pMem, pGamma)), q)\n\n        t2 := mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pBeta)), q)\n\n        t2 := addmod(t2, mload(add(pProof, pEval_b)), q)\n\n        t2 := addmod(t2, mload(add(pMem, pGamma)), q)\n\n        t1 := mulmod(t1, t2, q)\n\n        t2 := addmod(mload(add(pProof, pEval_c)), mload(add(pMem, pGamma)), q)\n\n        t1 := mulmod(t1, t2, q)\n        t1 := mulmod(t1, mload(add(pProof, pEval_zw)), q)\n        t1 := mulmod(t1, mload(add(pMem, pAlpha)), q)\n\n        t2 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\n\n        t2 := mulmod(t2, mload(add(pMem, pAlpha)), q)\n\n        t1 := addmod(t1, t2, q)\n\n        t := mod(sub(add(t, q), t1), q)\n        t := mulmod(t, mload(add(pMem, pZhInv)), q)\n\n        mstore(add(pMem, pEval_t), t)\n      }\n\n      function g1_set(pR, pP) {\n        mstore(pR, mload(pP))\n        mstore(add(pR, 32), mload(add(pP, 32)))\n      }\n\n      function g1_acc(pR, pP) {\n        let mIn := mload(0x40)\n        mstore(mIn, mload(pR))\n        mstore(add(mIn, 32), mload(add(pR, 32)))\n        mstore(add(mIn, 64), mload(pP))\n        mstore(add(mIn, 96), mload(add(pP, 32)))\n\n        let success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function g1_mulAcc(pR, pP, s) {\n        let success\n        let mIn := mload(0x40)\n        mstore(mIn, mload(pP))\n        mstore(add(mIn, 32), mload(add(pP, 32)))\n        mstore(add(mIn, 64), s)\n\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n\n        mstore(add(mIn, 64), mload(pR))\n        mstore(add(mIn, 96), mload(add(pR, 32)))\n\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function g1_mulAccC(pR, x, y, s) {\n        let success\n        let mIn := mload(0x40)\n        mstore(mIn, x)\n        mstore(add(mIn, 32), y)\n        mstore(add(mIn, 64), s)\n\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n\n        mstore(add(mIn, 64), mload(pR))\n        mstore(add(mIn, 96), mload(add(pR, 32)))\n\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function g1_mulSetC(pR, x, y, s) {\n        let success\n        let mIn := mload(0x40)\n        mstore(mIn, x)\n        mstore(add(mIn, 32), y)\n        mstore(add(mIn, 64), s)\n\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function calculateA1(pProof, pMem) {\n        let p := add(pMem, pA1)\n        g1_set(p, add(pProof, pWxi))\n        g1_mulAcc(p, add(pProof, pWxiw), mload(add(pMem, pU)))\n      }\n\n      function calculateB1(pProof, pMem) {\n        let s\n        let s1\n        let p := add(pMem, pB1)\n\n        // Calculate D\n        s := mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV1)), q)\n        g1_mulSetC(p, Qlx, Qly, s)\n\n        s := mulmod(s, mload(add(pProof, pEval_b)), q)\n        g1_mulAccC(p, Qmx, Qmy, s)\n\n        s := mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV1)), q)\n        g1_mulAccC(p, Qrx, Qry, s)\n\n        s := mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV1)), q)\n        g1_mulAccC(p, Qox, Qoy, s)\n\n        s := mload(add(pMem, pV1))\n        g1_mulAccC(p, Qcx, Qcy, s)\n\n        s := addmod(mload(add(pProof, pEval_a)), mload(add(pMem, pBetaXi)), q)\n        s := addmod(s, mload(add(pMem, pGamma)), q)\n        s1 := mulmod(k1, mload(add(pMem, pBetaXi)), q)\n        s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\n        s := mulmod(s, s1, q)\n        s1 := mulmod(k2, mload(add(pMem, pBetaXi)), q)\n        s1 := addmod(s1, mload(add(pProof, pEval_c)), q)\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\n        s := mulmod(s, s1, q)\n        s := mulmod(s, mload(add(pMem, pAlpha)), q)\n        s := mulmod(s, mload(add(pMem, pV1)), q)\n        s1 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\n        s1 := mulmod(s1, mload(add(pMem, pAlpha)), q)\n        s1 := mulmod(s1, mload(add(pMem, pV1)), q)\n        s := addmod(s, s1, q)\n        s := addmod(s, mload(add(pMem, pU)), q)\n        g1_mulAcc(p, add(pProof, pZ), s)\n\n        s := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s1)), q)\n        s := addmod(s, mload(add(pProof, pEval_a)), q)\n        s := addmod(s, mload(add(pMem, pGamma)), q)\n        s1 := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s2)), q)\n        s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\n        s := mulmod(s, s1, q)\n        s := mulmod(s, mload(add(pMem, pAlpha)), q)\n        s := mulmod(s, mload(add(pMem, pV1)), q)\n        s := mulmod(s, mload(add(pMem, pBeta)), q)\n        s := mulmod(s, mload(add(pProof, pEval_zw)), q)\n        s := mod(sub(q, s), q)\n        g1_mulAccC(p, S3x, S3y, s)\n\n        // calculate F\n        g1_acc(p, add(pProof, pT1))\n\n        s := mload(add(pMem, pXin))\n        g1_mulAcc(p, add(pProof, pT2), s)\n\n        s := mulmod(s, s, q)\n        g1_mulAcc(p, add(pProof, pT3), s)\n\n        g1_mulAcc(p, add(pProof, pA), mload(add(pMem, pV2)))\n        g1_mulAcc(p, add(pProof, pB), mload(add(pMem, pV3)))\n        g1_mulAcc(p, add(pProof, pC), mload(add(pMem, pV4)))\n        g1_mulAccC(p, S1x, S1y, mload(add(pMem, pV5)))\n        g1_mulAccC(p, S2x, S2y, mload(add(pMem, pV6)))\n\n        // calculate E\n        s := mload(add(pMem, pEval_t))\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_r)), mload(add(pMem, pV1)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV2)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV3)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV4)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pV5)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pV6)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_zw)), mload(add(pMem, pU)), q),\n          q\n        )\n        s := mod(sub(q, s), q)\n        g1_mulAccC(p, G1x, G1y, s)\n\n        // Last part of B\n        s := mload(add(pMem, pXi))\n        g1_mulAcc(p, add(pProof, pWxi), s)\n\n        s := mulmod(mload(add(pMem, pU)), mload(add(pMem, pXi)), q)\n        s := mulmod(s, w1, q)\n        g1_mulAcc(p, add(pProof, pWxiw), s)\n      }\n\n      function checkPairing(pMem) -> isOk {\n        let mIn := mload(0x40)\n        mstore(mIn, mload(add(pMem, pA1)))\n        mstore(add(mIn, 32), mload(add(add(pMem, pA1), 32)))\n        mstore(add(mIn, 64), X2x2)\n        mstore(add(mIn, 96), X2x1)\n        mstore(add(mIn, 128), X2y2)\n        mstore(add(mIn, 160), X2y1)\n        mstore(add(mIn, 192), mload(add(pMem, pB1)))\n        let s := mload(add(add(pMem, pB1), 32))\n        s := mod(sub(qf, s), qf)\n        mstore(add(mIn, 224), s)\n        mstore(add(mIn, 256), G2x2)\n        mstore(add(mIn, 288), G2x1)\n        mstore(add(mIn, 320), G2y2)\n        mstore(add(mIn, 352), G2y1)\n\n        let success := staticcall(sub(gas(), 2000), 8, mIn, 384, mIn, 0x20)\n\n        isOk := and(success, mload(mIn))\n      }\n\n      let pMem := mload(0x40)\n      mstore(0x40, add(pMem, lastMem))\n\n      checkInput(proof)\n      calculateChallanges(proof, pMem, pubSignals)\n      calculateLagrange(pMem)\n      calculatePl(pMem, pubSignals)\n      calculateT(proof, pMem)\n      calculateA1(proof, pMem)\n      calculateB1(proof, pMem)\n      let isValid := checkPairing(pMem)\n\n      mstore(0x40, sub(pMem, lastMem))\n      mstore(0, isValid)\n      return(0, 0x20)\n    }\n  }\n}\n"
    },
    "contracts/verifiers/ValidAgreementSignatureInsert.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\nlibrary ValidAgreementSignatureInsert {\n  uint32 constant n = 65536;\n  uint16 constant nPublic = 3;\n  uint16 constant nLagrange = 3;\n\n  uint256 constant Qmx =\n    2526765530286419229082716349264368797506546833846717053180365021852800730028;\n  uint256 constant Qmy =\n    3733169565153083979004235038268181002157127739825766281229756266884310973505;\n  uint256 constant Qlx =\n    19104203058502384070050445475361618823613391947383977011733027526488105144644;\n  uint256 constant Qly =\n    16276643284809123697329182809336043498046692153466811465719134673762973110489;\n  uint256 constant Qrx =\n    12067801189410983430817483156626188837292757610387499762896464436093139110155;\n  uint256 constant Qry =\n    14553654959503739664088608798285159112126878163344524643121670297754984916086;\n  uint256 constant Qox =\n    21439820091018674115635602971982651897911813764543812673477968351908584461084;\n  uint256 constant Qoy =\n    3684520644845780476614101155797439732013194822710394999701425447065613377734;\n  uint256 constant Qcx =\n    5296742246961431401185397200626537016108629654846053406389096269073420272913;\n  uint256 constant Qcy =\n    14827412678276938282846011089631370408234526727648393914337932448974524885665;\n  uint256 constant S1x =\n    20420126060161319500382404893947435878751899566398132447369535650566561384852;\n  uint256 constant S1y =\n    21047557065547554166879070610545507563809702584576604068517417704332986145299;\n  uint256 constant S2x =\n    8347111189686094046394901927781253039944218647382546364986741989046268219339;\n  uint256 constant S2y =\n    3846417704273417918886676028580471154825735334418719813923777775662245261428;\n  uint256 constant S3x =\n    7247455853843852021497498663407805299181361358498216315566205585223358465052;\n  uint256 constant S3y =\n    9354933565113481229433145185827793897842860333834122287442354748338454464065;\n  uint256 constant k1 = 2;\n  uint256 constant k2 = 3;\n  uint256 constant X2x1 =\n    14191176354905070490717531806826641383044715640553330788488102588115646966070;\n  uint256 constant X2x2 =\n    999251940849815177411677981739857011152674133100659605785688603610356821496;\n  uint256 constant X2y1 =\n    11285099626586890060988452771000099276866189313258039162897885132069146012030;\n  uint256 constant X2y2 =\n    16379976780622467578103462160974444735715077741479937785305266039858947702895;\n\n  uint256 constant q =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\n  uint256 constant qf =\n    21888242871839275222246405745257275088696311157297823662689037894645226208583;\n  uint256 constant w1 =\n    421743594562400382753388642386256516545992082196004333756405989743524594615;\n\n  uint256 constant G1x = 1;\n  uint256 constant G1y = 2;\n  uint256 constant G2x1 =\n    10857046999023057135944570762232829481370756359578518086990519993285655852781;\n  uint256 constant G2x2 =\n    11559732032986387107991004021392285783925812861821192530917403151452391805634;\n  uint256 constant G2y1 =\n    8495653923123431417604973247489272438418190587263600148770280649306958101930;\n  uint256 constant G2y2 =\n    4082367875863433681332203403145435568316851327593401208105741076214120093531;\n  uint16 constant pA = 32;\n  uint16 constant pB = 96;\n  uint16 constant pC = 160;\n  uint16 constant pZ = 224;\n  uint16 constant pT1 = 288;\n  uint16 constant pT2 = 352;\n  uint16 constant pT3 = 416;\n  uint16 constant pWxi = 480;\n  uint16 constant pWxiw = 544;\n  uint16 constant pEval_a = 608;\n  uint16 constant pEval_b = 640;\n  uint16 constant pEval_c = 672;\n  uint16 constant pEval_s1 = 704;\n  uint16 constant pEval_s2 = 736;\n  uint16 constant pEval_zw = 768;\n  uint16 constant pEval_r = 800;\n\n  uint16 constant pAlpha = 0;\n  uint16 constant pBeta = 32;\n  uint16 constant pGamma = 64;\n  uint16 constant pXi = 96;\n  uint16 constant pXin = 128;\n  uint16 constant pBetaXi = 160;\n  uint16 constant pV1 = 192;\n  uint16 constant pV2 = 224;\n  uint16 constant pV3 = 256;\n  uint16 constant pV4 = 288;\n  uint16 constant pV5 = 320;\n  uint16 constant pV6 = 352;\n  uint16 constant pU = 384;\n  uint16 constant pPl = 416;\n  uint16 constant pEval_t = 448;\n  uint16 constant pA1 = 480;\n  uint16 constant pB1 = 544;\n  uint16 constant pZh = 608;\n  uint16 constant pZhInv = 640;\n\n  uint16 constant pEval_l1 = 672;\n\n  uint16 constant pEval_l2 = 704;\n\n  uint16 constant pEval_l3 = 736;\n\n  uint16 constant lastMem = 768;\n\n  function verifyProof(\n    bytes memory proof,\n    uint[] memory pubSignals\n  ) public view returns (bool) {\n    assembly {\n      /////////\n      // Computes the inverse using the extended euclidean algorithm\n      /////////\n      function inverse(a, q) -> inv {\n        let t := 0\n        let newt := 1\n        let r := q\n        let newr := a\n        let quotient\n        let aux\n\n        for {\n\n        } newr {\n\n        } {\n          quotient := sdiv(r, newr)\n          aux := sub(t, mul(quotient, newt))\n          t := newt\n          newt := aux\n\n          aux := sub(r, mul(quotient, newr))\n          r := newr\n          newr := aux\n        }\n\n        if gt(r, 1) {\n          revert(0, 0)\n        }\n        if slt(t, 0) {\n          t := add(t, q)\n        }\n\n        inv := t\n      }\n\n      ///////\n      // Computes the inverse of an array of values\n      // See https://vitalik.ca/general/2018/07/21/starks_part_3.html in section where explain fields operations\n      //////\n      function inverseArray(pVals, n) {\n        let pAux := mload(0x40) // Point to the next free position\n        let pIn := pVals\n        let lastPIn := add(pVals, mul(n, 32)) // Read n elemnts\n        let acc := mload(pIn) // Read the first element\n        pIn := add(pIn, 32) // Point to the second element\n        let inv\n\n        for {\n\n        } lt(pIn, lastPIn) {\n          pAux := add(pAux, 32)\n          pIn := add(pIn, 32)\n        } {\n          mstore(pAux, acc)\n          acc := mulmod(acc, mload(pIn), q)\n        }\n        acc := inverse(acc, q)\n\n        // At this point pAux pint to the next free position we substract 1 to point to the last used\n        pAux := sub(pAux, 32)\n        // pIn points to the n+1 element, we substract to point to n\n        pIn := sub(pIn, 32)\n        lastPIn := pVals // We don't process the first element\n        for {\n\n        } gt(pIn, lastPIn) {\n          pAux := sub(pAux, 32)\n          pIn := sub(pIn, 32)\n        } {\n          inv := mulmod(acc, mload(pAux), q)\n          acc := mulmod(acc, mload(pIn), q)\n          mstore(pIn, inv)\n        }\n        // pIn points to first element, we just set it.\n        mstore(pIn, acc)\n      }\n\n      function checkField(v) {\n        if iszero(lt(v, q)) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function checkInput(pProof) {\n        if iszero(eq(mload(pProof), 800)) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n        checkField(mload(add(pProof, pEval_a)))\n        checkField(mload(add(pProof, pEval_b)))\n        checkField(mload(add(pProof, pEval_c)))\n        checkField(mload(add(pProof, pEval_s1)))\n        checkField(mload(add(pProof, pEval_s2)))\n        checkField(mload(add(pProof, pEval_zw)))\n        checkField(mload(add(pProof, pEval_r)))\n\n        // Points are checked in the point operations precompiled smart contracts\n      }\n\n      function calculateChallanges(pProof, pMem, pPublic) {\n        let a\n        let b\n\n        mstore(add(pMem, 768), mload(add(pPublic, 32)))\n\n        mstore(add(pMem, 800), mload(add(pPublic, 64)))\n\n        mstore(add(pMem, 832), mload(add(pPublic, 96)))\n\n        mstore(add(pMem, 864), mload(add(pProof, pA)))\n        mstore(add(pMem, 896), mload(add(pProof, add(pA, 32))))\n        mstore(add(pMem, 928), mload(add(pProof, add(pA, 64))))\n        mstore(add(pMem, 960), mload(add(pProof, add(pA, 96))))\n        mstore(add(pMem, 992), mload(add(pProof, add(pA, 128))))\n        mstore(add(pMem, 1024), mload(add(pProof, add(pA, 160))))\n\n        b := mod(keccak256(add(pMem, lastMem), 288), q)\n        mstore(add(pMem, pBeta), b)\n        mstore(add(pMem, pGamma), mod(keccak256(add(pMem, pBeta), 32), q))\n        mstore(add(pMem, pAlpha), mod(keccak256(add(pProof, pZ), 64), q))\n\n        a := mod(keccak256(add(pProof, pT1), 192), q)\n        mstore(add(pMem, pXi), a)\n        mstore(add(pMem, pBetaXi), mulmod(b, a, q))\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        a := mulmod(a, a, q)\n\n        mstore(add(pMem, pXin), a)\n        a := mod(add(sub(a, 1), q), q)\n        mstore(add(pMem, pZh), a)\n        mstore(add(pMem, pZhInv), a) // We will invert later together with lagrange pols\n\n        let v1 := mod(keccak256(add(pProof, pEval_a), 224), q)\n        mstore(add(pMem, pV1), v1)\n        a := mulmod(v1, v1, q)\n        mstore(add(pMem, pV2), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV3), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV4), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV5), a)\n        a := mulmod(a, v1, q)\n        mstore(add(pMem, pV6), a)\n\n        mstore(add(pMem, pU), mod(keccak256(add(pProof, pWxi), 128), q))\n      }\n\n      function calculateLagrange(pMem) {\n        let w := 1\n\n        mstore(\n          add(pMem, pEval_l1),\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\n        )\n\n        w := mulmod(w, w1, q)\n\n        mstore(\n          add(pMem, pEval_l2),\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\n        )\n\n        w := mulmod(w, w1, q)\n\n        mstore(\n          add(pMem, pEval_l3),\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\n        )\n\n        inverseArray(add(pMem, pZhInv), 4)\n\n        let zh := mload(add(pMem, pZh))\n        w := 1\n\n        mstore(add(pMem, pEval_l1), mulmod(mload(add(pMem, pEval_l1)), zh, q))\n\n        w := mulmod(w, w1, q)\n\n        mstore(\n          add(pMem, pEval_l2),\n          mulmod(w, mulmod(mload(add(pMem, pEval_l2)), zh, q), q)\n        )\n\n        w := mulmod(w, w1, q)\n\n        mstore(\n          add(pMem, pEval_l3),\n          mulmod(w, mulmod(mload(add(pMem, pEval_l3)), zh, q), q)\n        )\n      }\n\n      function calculatePl(pMem, pPub) {\n        let pl := 0\n\n        pl := mod(\n          add(\n            sub(\n              pl,\n              mulmod(mload(add(pMem, pEval_l1)), mload(add(pPub, 32)), q)\n            ),\n            q\n          ),\n          q\n        )\n\n        pl := mod(\n          add(\n            sub(\n              pl,\n              mulmod(mload(add(pMem, pEval_l2)), mload(add(pPub, 64)), q)\n            ),\n            q\n          ),\n          q\n        )\n\n        pl := mod(\n          add(\n            sub(\n              pl,\n              mulmod(mload(add(pMem, pEval_l3)), mload(add(pPub, 96)), q)\n            ),\n            q\n          ),\n          q\n        )\n\n        mstore(add(pMem, pPl), pl)\n      }\n\n      function calculateT(pProof, pMem) {\n        let t\n        let t1\n        let t2\n        t := addmod(mload(add(pProof, pEval_r)), mload(add(pMem, pPl)), q)\n\n        t1 := mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pBeta)), q)\n\n        t1 := addmod(t1, mload(add(pProof, pEval_a)), q)\n\n        t1 := addmod(t1, mload(add(pMem, pGamma)), q)\n\n        t2 := mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pBeta)), q)\n\n        t2 := addmod(t2, mload(add(pProof, pEval_b)), q)\n\n        t2 := addmod(t2, mload(add(pMem, pGamma)), q)\n\n        t1 := mulmod(t1, t2, q)\n\n        t2 := addmod(mload(add(pProof, pEval_c)), mload(add(pMem, pGamma)), q)\n\n        t1 := mulmod(t1, t2, q)\n        t1 := mulmod(t1, mload(add(pProof, pEval_zw)), q)\n        t1 := mulmod(t1, mload(add(pMem, pAlpha)), q)\n\n        t2 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\n\n        t2 := mulmod(t2, mload(add(pMem, pAlpha)), q)\n\n        t1 := addmod(t1, t2, q)\n\n        t := mod(sub(add(t, q), t1), q)\n        t := mulmod(t, mload(add(pMem, pZhInv)), q)\n\n        mstore(add(pMem, pEval_t), t)\n      }\n\n      function g1_set(pR, pP) {\n        mstore(pR, mload(pP))\n        mstore(add(pR, 32), mload(add(pP, 32)))\n      }\n\n      function g1_acc(pR, pP) {\n        let mIn := mload(0x40)\n        mstore(mIn, mload(pR))\n        mstore(add(mIn, 32), mload(add(pR, 32)))\n        mstore(add(mIn, 64), mload(pP))\n        mstore(add(mIn, 96), mload(add(pP, 32)))\n\n        let success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function g1_mulAcc(pR, pP, s) {\n        let success\n        let mIn := mload(0x40)\n        mstore(mIn, mload(pP))\n        mstore(add(mIn, 32), mload(add(pP, 32)))\n        mstore(add(mIn, 64), s)\n\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n\n        mstore(add(mIn, 64), mload(pR))\n        mstore(add(mIn, 96), mload(add(pR, 32)))\n\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function g1_mulAccC(pR, x, y, s) {\n        let success\n        let mIn := mload(0x40)\n        mstore(mIn, x)\n        mstore(add(mIn, 32), y)\n        mstore(add(mIn, 64), s)\n\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n\n        mstore(add(mIn, 64), mload(pR))\n        mstore(add(mIn, 96), mload(add(pR, 32)))\n\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function g1_mulSetC(pR, x, y, s) {\n        let success\n        let mIn := mload(0x40)\n        mstore(mIn, x)\n        mstore(add(mIn, 32), y)\n        mstore(add(mIn, 64), s)\n\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, pR, 64)\n\n        if iszero(success) {\n          mstore(0, 0)\n          return(0, 0x20)\n        }\n      }\n\n      function calculateA1(pProof, pMem) {\n        let p := add(pMem, pA1)\n        g1_set(p, add(pProof, pWxi))\n        g1_mulAcc(p, add(pProof, pWxiw), mload(add(pMem, pU)))\n      }\n\n      function calculateB1(pProof, pMem) {\n        let s\n        let s1\n        let p := add(pMem, pB1)\n\n        // Calculate D\n        s := mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV1)), q)\n        g1_mulSetC(p, Qlx, Qly, s)\n\n        s := mulmod(s, mload(add(pProof, pEval_b)), q)\n        g1_mulAccC(p, Qmx, Qmy, s)\n\n        s := mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV1)), q)\n        g1_mulAccC(p, Qrx, Qry, s)\n\n        s := mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV1)), q)\n        g1_mulAccC(p, Qox, Qoy, s)\n\n        s := mload(add(pMem, pV1))\n        g1_mulAccC(p, Qcx, Qcy, s)\n\n        s := addmod(mload(add(pProof, pEval_a)), mload(add(pMem, pBetaXi)), q)\n        s := addmod(s, mload(add(pMem, pGamma)), q)\n        s1 := mulmod(k1, mload(add(pMem, pBetaXi)), q)\n        s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\n        s := mulmod(s, s1, q)\n        s1 := mulmod(k2, mload(add(pMem, pBetaXi)), q)\n        s1 := addmod(s1, mload(add(pProof, pEval_c)), q)\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\n        s := mulmod(s, s1, q)\n        s := mulmod(s, mload(add(pMem, pAlpha)), q)\n        s := mulmod(s, mload(add(pMem, pV1)), q)\n        s1 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\n        s1 := mulmod(s1, mload(add(pMem, pAlpha)), q)\n        s1 := mulmod(s1, mload(add(pMem, pV1)), q)\n        s := addmod(s, s1, q)\n        s := addmod(s, mload(add(pMem, pU)), q)\n        g1_mulAcc(p, add(pProof, pZ), s)\n\n        s := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s1)), q)\n        s := addmod(s, mload(add(pProof, pEval_a)), q)\n        s := addmod(s, mload(add(pMem, pGamma)), q)\n        s1 := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s2)), q)\n        s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\n        s := mulmod(s, s1, q)\n        s := mulmod(s, mload(add(pMem, pAlpha)), q)\n        s := mulmod(s, mload(add(pMem, pV1)), q)\n        s := mulmod(s, mload(add(pMem, pBeta)), q)\n        s := mulmod(s, mload(add(pProof, pEval_zw)), q)\n        s := mod(sub(q, s), q)\n        g1_mulAccC(p, S3x, S3y, s)\n\n        // calculate F\n        g1_acc(p, add(pProof, pT1))\n\n        s := mload(add(pMem, pXin))\n        g1_mulAcc(p, add(pProof, pT2), s)\n\n        s := mulmod(s, s, q)\n        g1_mulAcc(p, add(pProof, pT3), s)\n\n        g1_mulAcc(p, add(pProof, pA), mload(add(pMem, pV2)))\n        g1_mulAcc(p, add(pProof, pB), mload(add(pMem, pV3)))\n        g1_mulAcc(p, add(pProof, pC), mload(add(pMem, pV4)))\n        g1_mulAccC(p, S1x, S1y, mload(add(pMem, pV5)))\n        g1_mulAccC(p, S2x, S2y, mload(add(pMem, pV6)))\n\n        // calculate E\n        s := mload(add(pMem, pEval_t))\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_r)), mload(add(pMem, pV1)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV2)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV3)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV4)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pV5)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pV6)), q),\n          q\n        )\n        s := addmod(\n          s,\n          mulmod(mload(add(pProof, pEval_zw)), mload(add(pMem, pU)), q),\n          q\n        )\n        s := mod(sub(q, s), q)\n        g1_mulAccC(p, G1x, G1y, s)\n\n        // Last part of B\n        s := mload(add(pMem, pXi))\n        g1_mulAcc(p, add(pProof, pWxi), s)\n\n        s := mulmod(mload(add(pMem, pU)), mload(add(pMem, pXi)), q)\n        s := mulmod(s, w1, q)\n        g1_mulAcc(p, add(pProof, pWxiw), s)\n      }\n\n      function checkPairing(pMem) -> isOk {\n        let mIn := mload(0x40)\n        mstore(mIn, mload(add(pMem, pA1)))\n        mstore(add(mIn, 32), mload(add(add(pMem, pA1), 32)))\n        mstore(add(mIn, 64), X2x2)\n        mstore(add(mIn, 96), X2x1)\n        mstore(add(mIn, 128), X2y2)\n        mstore(add(mIn, 160), X2y1)\n        mstore(add(mIn, 192), mload(add(pMem, pB1)))\n        let s := mload(add(add(pMem, pB1), 32))\n        s := mod(sub(qf, s), qf)\n        mstore(add(mIn, 224), s)\n        mstore(add(mIn, 256), G2x2)\n        mstore(add(mIn, 288), G2x1)\n        mstore(add(mIn, 320), G2y2)\n        mstore(add(mIn, 352), G2y1)\n\n        let success := staticcall(sub(gas(), 2000), 8, mIn, 384, mIn, 0x20)\n\n        isOk := and(success, mload(mIn))\n      }\n\n      let pMem := mload(0x40)\n      mstore(0x40, add(pMem, lastMem))\n\n      checkInput(proof)\n      calculateChallanges(proof, pMem, pubSignals)\n      calculateLagrange(pMem)\n      calculatePl(pMem, pubSignals)\n      calculateT(proof, pMem)\n      calculateA1(proof, pMem)\n      calculateB1(proof, pMem)\n      let isValid := checkPairing(pMem)\n\n      mstore(0x40, sub(pMem, lastMem))\n      mstore(0, isValid)\n      return(0, 0x20)\n    }\n  }\n}\n"
    },
    "contracts/ZKAgreement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"@openzeppelin/contracts/metatx/MinimalForwarder.sol\";\nimport \"./types/ZKAgreementTypes.sol\";\nimport \"./verifiers/ValidAgreementId.sol\";\nimport \"./verifiers/ValidAgreementSignatureInsert.sol\";\n\ncontract ZKAgreement is ERC2771Context {\n  event CreateAgreement(address indexed from, uint256 agreementId, bytes proof);\n  event SignAgreement(\n    uint256 indexed agreementId,\n    uint256 oldRoot,\n    uint256 newRoot,\n    bytes proof\n  );\n\n  mapping(uint256 => ZKAgreementTypes.Agreement) agreements;\n\n  constructor(MinimalForwarder forwarder) ERC2771Context(address(forwarder)) {}\n\n  function createAgreement(\n    ZKAgreementTypes.CreateAgreementParams memory params\n  ) public {\n    ZKAgreementTypes.Agreement storage a = agreements[params.agreementId];\n    require(a.validAgreementIdProof.length == 0, \"Agreement exists\");\n\n    // verify agreement id\n    uint256[] memory pubSignals = new uint256[](1);\n    pubSignals[0] = params.agreementId;\n    bool valid = ValidAgreementId.verifyProof(params.proof, pubSignals);\n    require(valid, \"Invalid agreement id\");\n\n    // update contract state\n    a.validAgreementIdProof = params.proof;\n\n    // emit events\n    emit CreateAgreement(_msgSender(), params.agreementId, params.proof);\n\n    // TODO contract hooks\n  }\n\n  function signAgreement(ZKAgreementTypes.SignParams memory params) public {\n    ZKAgreementTypes.Agreement storage a = agreements[params.agreementId];\n\n    // verify signature insert\n    uint256[] memory pubSignals = new uint256[](3);\n    pubSignals[0] = params.agreementId;\n    pubSignals[1] = a.signaturesRoot;\n    pubSignals[2] = params.root;\n\n    bool valid = ValidAgreementSignatureInsert.verifyProof(\n      params.proof,\n      pubSignals\n    );\n    require(valid, \"Invalid signature insert\");\n\n    // TODO verify share\n\n    // emit events\n    emit SignAgreement(\n      params.agreementId,\n      a.signaturesRoot,\n      params.root,\n      params.proof\n    );\n\n    // update contract state\n    a.signaturesRoot = params.root;\n    a.validSignaturesProof = params.proof;\n\n    // TODO contract hooks\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
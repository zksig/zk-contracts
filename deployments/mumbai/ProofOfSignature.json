{
  "address": "0xFF87090E14849647D10bEC2e053Fb71B699F50D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[8]",
          "name": "input",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b20b11a974bda92c8a549935c4ea632cb6f94cdccf4052119548a93af84b9c9",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xFF87090E14849647D10bEC2e053Fb71B699F50D7",
    "transactionIndex": 1,
    "gasUsed": "1678812",
    "logsBloom": "0x
    "blockHash": "0x7c33e1fa8f1326670e995e0b6e3fd7f262db67aff1db71f3f54004f265b2630c",
    "transactionHash": "0x6b20b11a974bda92c8a549935c4ea632cb6f94cdccf4052119548a93af84b9c9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32299169,
        "transactionHash": "0x6b20b11a974bda92c8a549935c4ea632cb6f94cdccf4052119548a93af84b9c9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000abc5dfb87519400000000000000000000000000000000000000000000000019f7dea0ece6d4b5000000000000000000000000000000000000000000000db57a0f56c8a7cbef5700000000000000000000000000000000000000000000000019ed2242f15f8321000000000000000000000000000000000000000000000db57a1a1326a35340eb",
        "logIndex": 9,
        "blockHash": "0x7c33e1fa8f1326670e995e0b6e3fd7f262db67aff1db71f3f54004f265b2630c"
      }
    ],
    "blockNumber": 32299169,
    "cumulativeGasUsed": "1807340",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "69caddaa11b84ea3436f6b966f77cf0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[8]\",\"name\":\"input\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[8])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ProofOfSignature.sol\":\"ProofOfSignature\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ProofOfSignature.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nlibrary ProofOfSignaturePairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ProofOfSignature {\\n  using ProofOfSignaturePairing for *;\\n  struct VerifyingKey {\\n    ProofOfSignaturePairing.G1Point alfa1;\\n    ProofOfSignaturePairing.G2Point beta2;\\n    ProofOfSignaturePairing.G2Point gamma2;\\n    ProofOfSignaturePairing.G2Point delta2;\\n    ProofOfSignaturePairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ProofOfSignaturePairing.G1Point A;\\n    ProofOfSignaturePairing.G2Point B;\\n    ProofOfSignaturePairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ProofOfSignaturePairing.G1Point(\\n      19707546691375492439049195476765907453567623936033044097357916657896179314901,\\n      10864754458864178698245809791256443822198435701990478246863789828042876637353\\n    );\\n\\n    vk.beta2 = ProofOfSignaturePairing.G2Point(\\n      [\\n        1170931191278462601990942362056460176537725416212805808664269645582356004671,\\n        12768581099140775072563846415890328386512227408236282741297298367101464191635\\n      ],\\n      [\\n        151418159427816678000654789549358554497407268887897868662784317643228105909,\\n        5667330649696282162322023846534744965502332199770470059788262228431609671708\\n      ]\\n    );\\n    vk.gamma2 = ProofOfSignaturePairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ProofOfSignaturePairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.IC = new ProofOfSignaturePairing.G1Point[](9);\\n\\n    vk.IC[0] = ProofOfSignaturePairing.G1Point(\\n      6476139543922633783569609999580924945011347153865646721644651739158008186490,\\n      1756997728837161234426613921233107894692957408211936176886002172112950281680\\n    );\\n\\n    vk.IC[1] = ProofOfSignaturePairing.G1Point(\\n      2519403679592838903445591460451160656232020500638100085315208594893903181788,\\n      247391473677419902491375039898992037669144125018075683465174969188750784570\\n    );\\n\\n    vk.IC[2] = ProofOfSignaturePairing.G1Point(\\n      21226728868375164760539469675264844502204932827687776426417204232391774257373,\\n      16971849165081071129431073143351359933614373719576370188798531153668900589146\\n    );\\n\\n    vk.IC[3] = ProofOfSignaturePairing.G1Point(\\n      18027601399078068488363521824523790209890932889024873237830925382363137042738,\\n      6100696066321847600752904976941222230711589673124181250201125513362862963061\\n    );\\n\\n    vk.IC[4] = ProofOfSignaturePairing.G1Point(\\n      18449003661937639739011163660496452773097975424572729911399884384052187245399,\\n      7095177856259758766853919377725587794187695787890339214812721100445337456408\\n    );\\n\\n    vk.IC[5] = ProofOfSignaturePairing.G1Point(\\n      2867944098990772702805265732728814778002652598551708110803793093633034331399,\\n      12293003085673358425653016430070306798683721878106233254991367179372611373675\\n    );\\n\\n    vk.IC[6] = ProofOfSignaturePairing.G1Point(\\n      21096413572025673003359895698753808790117763230980500623899739808037852063594,\\n      6659283343730133092706796206965463561974245675107276361556120852823971211559\\n    );\\n\\n    vk.IC[7] = ProofOfSignaturePairing.G1Point(\\n      17957835590007188529465629198289640663866518563722612541237908222199880950285,\\n      15508206421726960492727548838774313830915393638941500602186578488667020044486\\n    );\\n\\n    vk.IC[8] = ProofOfSignaturePairing.G1Point(\\n      17991047291475997160014305837683968740964581836000447444066347622584516957530,\\n      3678250719971809303354934866119011915973193204024385004962379953586619595450\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ProofOfSignaturePairing.G1Point memory vk_x = ProofOfSignaturePairing\\n      .G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ProofOfSignaturePairing.addition(\\n        vk_x,\\n        ProofOfSignaturePairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ProofOfSignaturePairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ProofOfSignaturePairing.pairingProd4(\\n        ProofOfSignaturePairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[8] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ProofOfSignaturePairing.G1Point(a[0], a[1]);\\n    proof.B = ProofOfSignaturePairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ProofOfSignaturePairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x85d20f69d27301ac483a3a592e61bbd3f3df069c585a5766a57c1aa98f55e9f0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611d78610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c9219a7a1461003a575b600080fd5b610054600480360381019061004f919061185a565b61006a565b60405161006191906118de565b60405180910390f35b600061007461142a565b604051806040016040528087600060028110610093576100926118f9565b5b60200201518152602001876001600281106100b1576100b06118f9565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6118f9565b5b6020020151600060028110610103576101026118f9565b5b6020020151815260200188600060028110610121576101206118f9565b5b6020020151600160028110610139576101386118f9565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646118f9565b5b602002015160006002811061017d5761017c6118f9565b5b602002015181526020018860016002811061019b5761019a6118f9565b5b60200201516001600281106101b3576101b26118f9565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46118f9565b5b6020020151815260200185600160028110610203576102026118f9565b5b602002015181525081604001819052506000600867ffffffffffffffff8111156102305761022f611591565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60088110156102b7578481600881106102805761027f6118f9565b5b6020020151828281518110610298576102976118f9565b5b60200260200101818152505080806102af90611957565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b905080608001515160018651610329919061199f565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611a30565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36118f9565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611a9c565b60405180910390fd5b6104438261043e8560800151600185610405919061199f565b81518110610416576104156118f9565b5b60200260200101518a8581518110610431576104306118f9565b5b6020026020010151610c20565b610cf8565b9150808061045090611957565b915050610387565b50610482818360800151600081518110610475576104746118f9565b5b6020026020010151610cf8565b90506104b86104948660000151610df6565b8660200151846000015185602001518587604001518b604001518960600151610e9b565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61145d565b60405180604001604052807f2b92137e06ae2c6638beaec43338d5adb29e45269025c0180b16b773576730d581526020017f18053baca530ce87ed50dce7a7c99526aa9aba9f1cd2d6dec647f93bdf29d0a98152508160000181905250604051806040016040528060405180604001604052807f0296b93bc46869f63a48f0717dcaf9450b45664e7147066010312df0b8f53f3f81526020017f1c3ac2c37c1e8d41f0277700d2e1c90b3d375ab540e6985b07d4c1941993a293815250815260200160405180604001604052807e55b31baec8fbb9cfb471ccf33b28c57cff7a9f7498065aa7bd41115fc6ccb581526020017f0c87987109cfdb68e131ac0ee8aa92a36b333a842b5c5813c32d5c5f38ca301c8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600967ffffffffffffffff8111156107a4576107a3611591565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca6114a4565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f0e515d764a4fb3a3efdb49cda69c678f62c8b1a81f20712fc8b510b72d7a467a81526020017f03e26cebd351c22ede623fef9622c8490955f216802fea5f1f4ff054b6e845d08152508160800151600081518110610853576108526118f9565b5b602002602001018190525060405180604001604052807f0591ee943e7d855278e4052717ca0073b9fe9fb53e306b4ef548331f603b37dc81526020017e8c04c3c206fca766cc2188835b4174cf5ca0bc369e8e4f2752750092a4f83a81525081608001516001815181106108ca576108c96118f9565b5b602002602001018190525060405180604001604052807f2eede71cc68817669471f9e1452391654062f280a2a9df452cc1c1d6bb7940dd81526020017f2585b9e91dd81cc64823d4648f9e8142aa86b1ae49a5130dab0d9a9e552f0e5a8152508160800151600281518110610942576109416118f9565b5b602002602001018190525060405180604001604052807f27db42c3ea7ffb56196ab486430a70a2f8d4678e28bbcab96ac56c131589e93281526020017f0d7cdf21ba0ca6aa13f5a9b548d60f24887b7b734491bc32fef650ce5ac6f97581525081608001516003815181106109ba576109b96118f9565b5b602002602001018190525060405180604001604052807f28c9c41a91b31033dbde70a1e368548e111fd8103990f3116f8a012714e02b5781526020017f0fafba7572544e3eed6248456135861a60eeb2f66bd269b4dd82c9ab61a70f188152508160800151600481518110610a3257610a316118f9565b5b602002602001018190525060405180604001604052807f065732e6eb04d88247352138bdadc52f2e837aade02972bf46efdd12e20ea50781526020017f1b2d97da8ed87ab2a2196cde64ed43ade723455bb84634aa98ba703aa1360a6b8152508160800151600581518110610aaa57610aa96118f9565b5b602002602001018190525060405180604001604052807f2ea4259dc9bc7a7412fb82897a0c5dbebf652331c11116dc8b89f2c551b2a76a81526020017f0eb9055360996cb3eb934b1aab435e6743dab83a91b493e62526697693b829278152508160800151600681518110610b2257610b216118f9565b5b602002602001018190525060405180604001604052807f27b3c6563c213065414a4b8ab0b3fd5ee0d4c42e57202e9a674ac4a2c4bb220d81526020017f2249557274bc4a527a2ce2481c996fd3957b650af8d11a083431638a8f39a8c68152508160800151600781518110610b9a57610b996118f9565b5b602002602001018190525060405180604001604052807f27c69268b560f0569de6cdd10427cd7ce70d944fc804cc8ebcb4e23c7e51555a81526020017f0821d0edf161cf57415938efbed00cb38d839fef5cf6302bad437b9282e0baba8152508160800151600881518110610c1257610c116118f9565b5b602002602001018190525090565b610c286114a4565b610c306114be565b836000015181600060038110610c4957610c486118f9565b5b602002018181525050836020015181600160038110610c6b57610c6a6118f9565b5b6020020181815250508281600260038110610c8957610c886118f9565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610caf57fe5b5080610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790611b08565b60405180910390fd5b505092915050565b610d006114a4565b610d086114e0565b836000015181600060048110610d2157610d206118f9565b5b602002018181525050836020015181600160048110610d4357610d426118f9565b5b602002018181525050826000015181600260048110610d6557610d646118f9565b5b602002018181525050826020015181600360048110610d8757610d866118f9565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610dad57fe5b5080610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de590611b74565b60405180910390fd5b505092915050565b610dfe6114a4565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610e3b575060008360200151145b15610e5f576040518060400160405280600081526020016000815250915050610e96565b604051806040016040528084600001518152602001828560200151610e849190611bc3565b83610e8f9190611bf4565b8152509150505b919050565b600080600467ffffffffffffffff811115610eb957610eb8611591565b5b604051908082528060200260200182016040528015610ef257816020015b610edf6114a4565b815260200190600190039081610ed75790505b5090506000600467ffffffffffffffff811115610f1257610f11611591565b5b604051908082528060200260200182016040528015610f4b57816020015b610f38611502565b815260200190600190039081610f305790505b5090508a82600081518110610f6357610f626118f9565b5b60200260200101819052508882600181518110610f8357610f826118f9565b5b60200260200101819052508682600281518110610fa357610fa26118f9565b5b60200260200101819052508482600381518110610fc357610fc26118f9565b5b60200260200101819052508981600081518110610fe357610fe26118f9565b5b60200260200101819052508781600181518110611003576110026118f9565b5b60200260200101819052508581600281518110611023576110226118f9565b5b60200260200101819052508381600381518110611043576110426118f9565b5b60200260200101819052506110588282611068565b9250505098975050505050505050565b600081518351146110ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a590611c74565b60405180910390fd5b60008351905060006006826110c39190611c94565b905060008167ffffffffffffffff8111156110e1576110e0611591565b5b60405190808252806020026020018201604052801561110f5781602001602082028036833780820191505090505b50905060005b83811015611394578681815181106111305761112f6118f9565b5b60200260200101516000015182600060068461114c9190611c94565b611156919061199f565b81518110611167576111666118f9565b5b602002602001018181525050868181518110611186576111856118f9565b5b6020026020010151602001518260016006846111a29190611c94565b6111ac919061199f565b815181106111bd576111bc6118f9565b5b6020026020010181815250508581815181106111dc576111db6118f9565b5b6020026020010151600001516000600281106111fb576111fa6118f9565b5b60200201518260026006846112109190611c94565b61121a919061199f565b8151811061122b5761122a6118f9565b5b60200260200101818152505085818151811061124a576112496118f9565b5b602002602001015160000151600160028110611269576112686118f9565b5b602002015182600360068461127e9190611c94565b611288919061199f565b81518110611299576112986118f9565b5b6020026020010181815250508581815181106112b8576112b76118f9565b5b6020026020010151602001516000600281106112d7576112d66118f9565b5b60200201518260046006846112ec9190611c94565b6112f6919061199f565b81518110611307576113066118f9565b5b602002602001018181525050858181518110611326576113256118f9565b5b602002602001015160200151600160028110611345576113446118f9565b5b602002015182600560068461135a9190611c94565b611364919061199f565b81518110611375576113746118f9565b5b602002602001018181525050808061138c90611957565b915050611115565b5061139d611528565b6000602082602086026020860160086107d05a03fa905080600081036113bf57fe5b5080611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f790611d22565b60405180910390fd5b600082600060018110611416576114156118f9565b5b602002015114159550505050505092915050565b604051806060016040528061143d6114a4565b815260200161144a611502565b81526020016114576114a4565b81525090565b6040518060a001604052806114706114a4565b815260200161147d611502565b815260200161148a611502565b8152602001611497611502565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061151561154a565b815260200161152261154a565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115c982611580565b810181811067ffffffffffffffff821117156115e8576115e7611591565b5b80604052505050565b60006115fb61156c565b905061160782826115c0565b919050565b600067ffffffffffffffff82111561162757611626611591565b5b602082029050919050565b600080fd5b6000819050919050565b61164a81611637565b811461165557600080fd5b50565b60008135905061166781611641565b92915050565b600061168061167b8461160c565b6115f1565b9050806020840283018581111561169a57611699611632565b5b835b818110156116c357806116af8882611658565b84526020840193505060208101905061169c565b5050509392505050565b600082601f8301126116e2576116e161157b565b5b60026116ef84828561166d565b91505092915050565b600067ffffffffffffffff82111561171357611712611591565b5b602082029050919050565b600061173161172c846116f8565b6115f1565b9050806040840283018581111561174b5761174a611632565b5b835b81811015611774578061176088826116cd565b84526020840193505060408101905061174d565b5050509392505050565b600082601f8301126117935761179261157b565b5b60026117a084828561171e565b91505092915050565b600067ffffffffffffffff8211156117c4576117c3611591565b5b602082029050919050565b60006117e26117dd846117a9565b6115f1565b905080602084028301858111156117fc576117fb611632565b5b835b8181101561182557806118118882611658565b8452602084019350506020810190506117fe565b5050509392505050565b600082601f8301126118445761184361157b565b5b60086118518482856117cf565b91505092915050565b600080600080610200858703121561187557611874611576565b5b6000611883878288016116cd565b94505060406118948782880161177e565b93505060c06118a5878288016116cd565b9250506101006118b78782880161182f565b91505092959194509250565b60008115159050919050565b6118d8816118c3565b82525050565b60006020820190506118f360008301846118cf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061196282611637565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361199457611993611928565b5b600182019050919050565b60006119aa82611637565b91506119b583611637565b92508282019050808211156119cd576119cc611928565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b6000611a1a6012836119d3565b9150611a25826119e4565b602082019050919050565b60006020820190508181036000830152611a4981611a0d565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611a86601f836119d3565b9150611a9182611a50565b602082019050919050565b60006020820190508181036000830152611ab581611a79565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611af26012836119d3565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b6000611b5e6012836119d3565b9150611b6982611b28565b602082019050919050565b60006020820190508181036000830152611b8d81611b51565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bce82611637565b9150611bd983611637565b925082611be957611be8611b94565b5b828206905092915050565b6000611bff82611637565b9150611c0a83611637565b9250828203905081811115611c2257611c21611928565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611c5e6016836119d3565b9150611c6982611c28565b602082019050919050565b60006020820190508181036000830152611c8d81611c51565b9050919050565b6000611c9f82611637565b9150611caa83611637565b9250828202611cb881611637565b91508282048414831517611ccf57611cce611928565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611d0c6015836119d3565b9150611d1782611cd6565b602082019050919050565b60006020820190508181036000830152611d3b81611cff565b905091905056fea2646970667358221220af4dae9932d5cc97aa22a16297b3a2b98e83be429c784657b7f8ce5c26cc6a9464736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c9219a7a1461003a575b600080fd5b610054600480360381019061004f919061185a565b61006a565b60405161006191906118de565b60405180910390f35b600061007461142a565b604051806040016040528087600060028110610093576100926118f9565b5b60200201518152602001876001600281106100b1576100b06118f9565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6118f9565b5b6020020151600060028110610103576101026118f9565b5b6020020151815260200188600060028110610121576101206118f9565b5b6020020151600160028110610139576101386118f9565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646118f9565b5b602002015160006002811061017d5761017c6118f9565b5b602002015181526020018860016002811061019b5761019a6118f9565b5b60200201516001600281106101b3576101b26118f9565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46118f9565b5b6020020151815260200185600160028110610203576102026118f9565b5b602002015181525081604001819052506000600867ffffffffffffffff8111156102305761022f611591565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60088110156102b7578481600881106102805761027f6118f9565b5b6020020151828281518110610298576102976118f9565b5b60200260200101818152505080806102af90611957565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b905080608001515160018651610329919061199f565b14610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090611a30565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36118f9565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611a9c565b60405180910390fd5b6104438261043e8560800151600185610405919061199f565b81518110610416576104156118f9565b5b60200260200101518a8581518110610431576104306118f9565b5b6020026020010151610c20565b610cf8565b9150808061045090611957565b915050610387565b50610482818360800151600081518110610475576104746118f9565b5b6020026020010151610cf8565b90506104b86104948660000151610df6565b8660200151846000015185602001518587604001518b604001518960600151610e9b565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61145d565b60405180604001604052807f2b92137e06ae2c6638beaec43338d5adb29e45269025c0180b16b773576730d581526020017f18053baca530ce87ed50dce7a7c99526aa9aba9f1cd2d6dec647f93bdf29d0a98152508160000181905250604051806040016040528060405180604001604052807f0296b93bc46869f63a48f0717dcaf9450b45664e7147066010312df0b8f53f3f81526020017f1c3ac2c37c1e8d41f0277700d2e1c90b3d375ab540e6985b07d4c1941993a293815250815260200160405180604001604052807e55b31baec8fbb9cfb471ccf33b28c57cff7a9f7498065aa7bd41115fc6ccb581526020017f0c87987109cfdb68e131ac0ee8aa92a36b333a842b5c5813c32d5c5f38ca301c8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600967ffffffffffffffff8111156107a4576107a3611591565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca6114a4565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f0e515d764a4fb3a3efdb49cda69c678f62c8b1a81f20712fc8b510b72d7a467a81526020017f03e26cebd351c22ede623fef9622c8490955f216802fea5f1f4ff054b6e845d08152508160800151600081518110610853576108526118f9565b5b602002602001018190525060405180604001604052807f0591ee943e7d855278e4052717ca0073b9fe9fb53e306b4ef548331f603b37dc81526020017e8c04c3c206fca766cc2188835b4174cf5ca0bc369e8e4f2752750092a4f83a81525081608001516001815181106108ca576108c96118f9565b5b602002602001018190525060405180604001604052807f2eede71cc68817669471f9e1452391654062f280a2a9df452cc1c1d6bb7940dd81526020017f2585b9e91dd81cc64823d4648f9e8142aa86b1ae49a5130dab0d9a9e552f0e5a8152508160800151600281518110610942576109416118f9565b5b602002602001018190525060405180604001604052807f27db42c3ea7ffb56196ab486430a70a2f8d4678e28bbcab96ac56c131589e93281526020017f0d7cdf21ba0ca6aa13f5a9b548d60f24887b7b734491bc32fef650ce5ac6f97581525081608001516003815181106109ba576109b96118f9565b5b602002602001018190525060405180604001604052807f28c9c41a91b31033dbde70a1e368548e111fd8103990f3116f8a012714e02b5781526020017f0fafba7572544e3eed6248456135861a60eeb2f66bd269b4dd82c9ab61a70f188152508160800151600481518110610a3257610a316118f9565b5b602002602001018190525060405180604001604052807f065732e6eb04d88247352138bdadc52f2e837aade02972bf46efdd12e20ea50781526020017f1b2d97da8ed87ab2a2196cde64ed43ade723455bb84634aa98ba703aa1360a6b8152508160800151600581518110610aaa57610aa96118f9565b5b602002602001018190525060405180604001604052807f2ea4259dc9bc7a7412fb82897a0c5dbebf652331c11116dc8b89f2c551b2a76a81526020017f0eb9055360996cb3eb934b1aab435e6743dab83a91b493e62526697693b829278152508160800151600681518110610b2257610b216118f9565b5b602002602001018190525060405180604001604052807f27b3c6563c213065414a4b8ab0b3fd5ee0d4c42e57202e9a674ac4a2c4bb220d81526020017f2249557274bc4a527a2ce2481c996fd3957b650af8d11a083431638a8f39a8c68152508160800151600781518110610b9a57610b996118f9565b5b602002602001018190525060405180604001604052807f27c69268b560f0569de6cdd10427cd7ce70d944fc804cc8ebcb4e23c7e51555a81526020017f0821d0edf161cf57415938efbed00cb38d839fef5cf6302bad437b9282e0baba8152508160800151600881518110610c1257610c116118f9565b5b602002602001018190525090565b610c286114a4565b610c306114be565b836000015181600060038110610c4957610c486118f9565b5b602002018181525050836020015181600160038110610c6b57610c6a6118f9565b5b6020020181815250508281600260038110610c8957610c886118f9565b5b602002018181525050600060608360808460076107d05a03fa90508060008103610caf57fe5b5080610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790611b08565b60405180910390fd5b505092915050565b610d006114a4565b610d086114e0565b836000015181600060048110610d2157610d206118f9565b5b602002018181525050836020015181600160048110610d4357610d426118f9565b5b602002018181525050826000015181600260048110610d6557610d646118f9565b5b602002018181525050826020015181600360048110610d8757610d866118f9565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610dad57fe5b5080610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de590611b74565b60405180910390fd5b505092915050565b610dfe6114a4565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610e3b575060008360200151145b15610e5f576040518060400160405280600081526020016000815250915050610e96565b604051806040016040528084600001518152602001828560200151610e849190611bc3565b83610e8f9190611bf4565b8152509150505b919050565b600080600467ffffffffffffffff811115610eb957610eb8611591565b5b604051908082528060200260200182016040528015610ef257816020015b610edf6114a4565b815260200190600190039081610ed75790505b5090506000600467ffffffffffffffff811115610f1257610f11611591565b5b604051908082528060200260200182016040528015610f4b57816020015b610f38611502565b815260200190600190039081610f305790505b5090508a82600081518110610f6357610f626118f9565b5b60200260200101819052508882600181518110610f8357610f826118f9565b5b60200260200101819052508682600281518110610fa357610fa26118f9565b5b60200260200101819052508482600381518110610fc357610fc26118f9565b5b60200260200101819052508981600081518110610fe357610fe26118f9565b5b60200260200101819052508781600181518110611003576110026118f9565b5b60200260200101819052508581600281518110611023576110226118f9565b5b60200260200101819052508381600381518110611043576110426118f9565b5b60200260200101819052506110588282611068565b9250505098975050505050505050565b600081518351146110ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a590611c74565b60405180910390fd5b60008351905060006006826110c39190611c94565b905060008167ffffffffffffffff8111156110e1576110e0611591565b5b60405190808252806020026020018201604052801561110f5781602001602082028036833780820191505090505b50905060005b83811015611394578681815181106111305761112f6118f9565b5b60200260200101516000015182600060068461114c9190611c94565b611156919061199f565b81518110611167576111666118f9565b5b602002602001018181525050868181518110611186576111856118f9565b5b6020026020010151602001518260016006846111a29190611c94565b6111ac919061199f565b815181106111bd576111bc6118f9565b5b6020026020010181815250508581815181106111dc576111db6118f9565b5b6020026020010151600001516000600281106111fb576111fa6118f9565b5b60200201518260026006846112109190611c94565b61121a919061199f565b8151811061122b5761122a6118f9565b5b60200260200101818152505085818151811061124a576112496118f9565b5b602002602001015160000151600160028110611269576112686118f9565b5b602002015182600360068461127e9190611c94565b611288919061199f565b81518110611299576112986118f9565b5b6020026020010181815250508581815181106112b8576112b76118f9565b5b6020026020010151602001516000600281106112d7576112d66118f9565b5b60200201518260046006846112ec9190611c94565b6112f6919061199f565b81518110611307576113066118f9565b5b602002602001018181525050858181518110611326576113256118f9565b5b602002602001015160200151600160028110611345576113446118f9565b5b602002015182600560068461135a9190611c94565b611364919061199f565b81518110611375576113746118f9565b5b602002602001018181525050808061138c90611957565b915050611115565b5061139d611528565b6000602082602086026020860160086107d05a03fa905080600081036113bf57fe5b5080611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f790611d22565b60405180910390fd5b600082600060018110611416576114156118f9565b5b602002015114159550505050505092915050565b604051806060016040528061143d6114a4565b815260200161144a611502565b81526020016114576114a4565b81525090565b6040518060a001604052806114706114a4565b815260200161147d611502565b815260200161148a611502565b8152602001611497611502565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061151561154a565b815260200161152261154a565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115c982611580565b810181811067ffffffffffffffff821117156115e8576115e7611591565b5b80604052505050565b60006115fb61156c565b905061160782826115c0565b919050565b600067ffffffffffffffff82111561162757611626611591565b5b602082029050919050565b600080fd5b6000819050919050565b61164a81611637565b811461165557600080fd5b50565b60008135905061166781611641565b92915050565b600061168061167b8461160c565b6115f1565b9050806020840283018581111561169a57611699611632565b5b835b818110156116c357806116af8882611658565b84526020840193505060208101905061169c565b5050509392505050565b600082601f8301126116e2576116e161157b565b5b60026116ef84828561166d565b91505092915050565b600067ffffffffffffffff82111561171357611712611591565b5b602082029050919050565b600061173161172c846116f8565b6115f1565b9050806040840283018581111561174b5761174a611632565b5b835b81811015611774578061176088826116cd565b84526020840193505060408101905061174d565b5050509392505050565b600082601f8301126117935761179261157b565b5b60026117a084828561171e565b91505092915050565b600067ffffffffffffffff8211156117c4576117c3611591565b5b602082029050919050565b60006117e26117dd846117a9565b6115f1565b905080602084028301858111156117fc576117fb611632565b5b835b8181101561182557806118118882611658565b8452602084019350506020810190506117fe565b5050509392505050565b600082601f8301126118445761184361157b565b5b60086118518482856117cf565b91505092915050565b600080600080610200858703121561187557611874611576565b5b6000611883878288016116cd565b94505060406118948782880161177e565b93505060c06118a5878288016116cd565b9250506101006118b78782880161182f565b91505092959194509250565b60008115159050919050565b6118d8816118c3565b82525050565b60006020820190506118f360008301846118cf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061196282611637565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361199457611993611928565b5b600182019050919050565b60006119aa82611637565b91506119b583611637565b92508282019050808211156119cd576119cc611928565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b6000611a1a6012836119d3565b9150611a25826119e4565b602082019050919050565b60006020820190508181036000830152611a4981611a0d565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611a86601f836119d3565b9150611a9182611a50565b602082019050919050565b60006020820190508181036000830152611ab581611a79565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611af26012836119d3565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b6000611b5e6012836119d3565b9150611b6982611b28565b602082019050919050565b60006020820190508181036000830152611b8d81611b51565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bce82611637565b9150611bd983611637565b925082611be957611be8611b94565b5b828206905092915050565b6000611bff82611637565b9150611c0a83611637565b9250828203905081811115611c2257611c21611928565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b6000611c5e6016836119d3565b9150611c6982611c28565b602082019050919050565b60006020820190508181036000830152611c8d81611c51565b9050919050565b6000611c9f82611637565b9150611caa83611637565b9250828202611cb881611637565b91508282048414831517611ccf57611cce611928565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000611d0c6015836119d3565b9150611d1782611cd6565b602082019050919050565b60006020820190508181036000830152611d3b81611cff565b905091905056fea2646970667358221220af4dae9932d5cc97aa22a16297b3a2b98e83be429c784657b7f8ce5c26cc6a9464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[8])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
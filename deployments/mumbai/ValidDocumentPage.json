{
  "address": "0xAA00B007689d6F854e66906F7F54405752b6D1aF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fa4705f90b2d71a7d4325ded3bcf8f0564e1df333f337c5d1aaa13536801370",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xAA00B007689d6F854e66906F7F54405752b6D1aF",
    "transactionIndex": 4,
    "gasUsed": "1485168",
    "logsBloom": "0x
    "blockHash": "0x0c934af13b317cf73842bee42766edaa12deef90cea86e56b02dfaf4f7426e84",
    "transactionHash": "0x5fa4705f90b2d71a7d4325ded3bcf8f0564e1df333f337c5d1aaa13536801370",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 32152059,
        "transactionHash": "0x5fa4705f90b2d71a7d4325ded3bcf8f0564e1df333f337c5d1aaa13536801370",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012ff5872445100000000000000000000000000000000000000000000000000022cb8048dbf4b7a000000000000000000000000000000000000000000002d6e464a90d39a4d599b0000000000000000000000000000000000000000000000000219b8ac1b7afa7a000000000000000000000000000000000000000000002d6e465d902c0c91aa9b",
        "logIndex": 7,
        "blockHash": "0x0c934af13b317cf73842bee42766edaa12deef90cea86e56b02dfaf4f7426e84"
      }
    ],
    "blockNumber": 32152059,
    "cumulativeGasUsed": "2058374",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "caaca5c3f446f4db28fa98fee9651383",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[2])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ValidDocumentPage.sol\":\"ValidDocumentPage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ValidDocumentPage.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary ValidDocumentPagePairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ValidDocumentPage {\\n  using ValidDocumentPagePairing for *;\\n  struct VerifyingKey {\\n    ValidDocumentPagePairing.G1Point alfa1;\\n    ValidDocumentPagePairing.G2Point beta2;\\n    ValidDocumentPagePairing.G2Point gamma2;\\n    ValidDocumentPagePairing.G2Point delta2;\\n    ValidDocumentPagePairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ValidDocumentPagePairing.G1Point A;\\n    ValidDocumentPagePairing.G2Point B;\\n    ValidDocumentPagePairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ValidDocumentPagePairing.G1Point(\\n      1423427196573326869960381667785122074357921755684386940651843063386195096976,\\n      8023961015251680984904169932113418146783590031556471530623177414331800090437\\n    );\\n\\n    vk.beta2 = ValidDocumentPagePairing.G2Point(\\n      [\\n        14981788778016161064675824813766262164386590279136355427549180094813413442058,\\n        15280203404894510920756392128045715359164951458648562381898759371631084950081\\n      ],\\n      [\\n        127457706682557739436150116433930019448698159193059553212687691311716440831,\\n        17421767135883714886528432224440823873509790917646536951997623325206225910141\\n      ]\\n    );\\n    vk.gamma2 = ValidDocumentPagePairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ValidDocumentPagePairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.IC = new ValidDocumentPagePairing.G1Point[](3);\\n\\n    vk.IC[0] = ValidDocumentPagePairing.G1Point(\\n      9137330337470688770292495546323000281746820378865938572487817397285893129737,\\n      14463806133370300439542538854092492576385190348569605615739640387604832080700\\n    );\\n\\n    vk.IC[1] = ValidDocumentPagePairing.G1Point(\\n      8221709577712658693988649737782922893503776720947631474038820986548308735046,\\n      14628210615963626019998475953976929359185030616105091344515820495766293027030\\n    );\\n\\n    vk.IC[2] = ValidDocumentPagePairing.G1Point(\\n      3371279618906517454941112604684892581546849933202581761078352594898265103632,\\n      2343618977478350155184563626381380204486572085454952789459419544606515565347\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ValidDocumentPagePairing.G1Point memory vk_x = ValidDocumentPagePairing\\n      .G1Point(0, 0);\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ValidDocumentPagePairing.addition(\\n        vk_x,\\n        ValidDocumentPagePairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ValidDocumentPagePairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ValidDocumentPagePairing.pairingProd4(\\n        ValidDocumentPagePairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[2] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ValidDocumentPagePairing.G1Point(a[0], a[1]);\\n    proof.B = ValidDocumentPagePairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ValidDocumentPagePairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb6f76ac2ed4fc3117e5dfef6931ee59c6e618d75f4b19a0cc3c39447b3ace9c9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6119f8610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063f5c9d69e1461003a575b600080fd5b610054600480360381019061004f91906114da565b61006a565b604051610061919061155e565b60405180910390f35b600061007461115b565b60405180604001604052808760006002811061009357610092611579565b5b60200201518152602001876001600281106100b1576100b0611579565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea611579565b5b602002015160006002811061010357610102611579565b5b602002015181526020018860006002811061012157610120611579565b5b602002015160016002811061013957610138611579565b5b6020020151815250815260200160405180604001604052808860016002811061016557610164611579565b5b602002015160006002811061017d5761017c611579565b5b602002015181526020018860016002811061019b5761019a611579565b5b60200201516001600281106101b3576101b2611579565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e4611579565b5b602002015181526020018560016002811061020357610202611579565b5b602002015181525081604001819052506000600267ffffffffffffffff8111156102305761022f6112c2565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60028110156102b7578481600281106102805761027f611579565b5b602002015182828151811061029857610297611579565b5b60200260200101818152505080806102af906115d7565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b905080608001515160018651610329919061161f565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906116b0565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a3611579565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e39061171c565b60405180910390fd5b6104438261043e8560800151600185610405919061161f565b8151811061041657610415611579565b5b60200260200101518a858151811061043157610430611579565b5b6020026020010151610951565b610a29565b91508080610450906115d7565b915050610387565b5061048281836080015160008151811061047557610474611579565b5b6020026020010151610a29565b90506104b86104948660000151610b27565b8660200151846000015185602001518587604001518b604001518960600151610bcc565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61118e565b60405180604001604052807f0325a19920380ec4d38dad81a28212d4daddc37051609fef4175c3445a17f59081526020017f11bd66a781a86cd358b047d74db8affbb5694a39c941febe9ce89d152b9df7458152508160000181905250604051806040016040528060405180604001604052807f211f6456d650fd85b3c48262fb47b9a4ad0aa769f4ee7f5ad4de3cf0e4ba020a81526020017f21c849e4882a55d90f620e2fd4738471c12ec177bb3a246a5823c8fa563bd241815250815260200160405180604001604052807e4823751885fe184bce42b686d74f6dbdaa777e445a1f7b0d556ec0076b1aff81526020017f26845eea29a2ae4aeff5ca8a6fccb5d53c3b6d3374eb06e9cef8a02fad78797d8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600367ffffffffffffffff8111156107a4576107a36112c2565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca6111d5565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f14338bb2e2d6d3ccdf17d2c19075c7fe323ece6124020521be323be760c3460981526020017f1ffa3962b8f42a9579733b9d640a91d05a15e8620ad1a2142a85d3f865a0533c815250816080015160008151811061085357610852611579565b5b602002602001018190525060405180604001604052807f122d529d5921fb143bc8dff2c7fb7cc2f42ee6fa647732aa950b5f0d9568f44681526020017f20574617e72012b4c35b4e3cda35c0f0a77ed732e4647a64e4ea4633a9c798d681525081608001516001815181106108cb576108ca611579565b5b602002602001018190525060405180604001604052807f0774139efb39e290779bd8d0d3839de9d1b8ff8b83f62c3ee440b2039bccdd1081526020017f052e70fb42e4dbfffd92e5128600495700b516bb6cb62ee60e680bbe72369323815250816080015160028151811061094357610942611579565b5b602002602001018190525090565b6109596111d5565b6109616111ef565b83600001518160006003811061097a57610979611579565b5b60200201818152505083602001518160016003811061099c5761099b611579565b5b60200201818152505082816002600381106109ba576109b9611579565b5b602002018181525050600060608360808460076107d05a03fa905080600081036109e057fe5b5080610a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1890611788565b60405180910390fd5b505092915050565b610a316111d5565b610a39611211565b836000015181600060048110610a5257610a51611579565b5b602002018181525050836020015181600160048110610a7457610a73611579565b5b602002018181525050826000015181600260048110610a9657610a95611579565b5b602002018181525050826020015181600360048110610ab857610ab7611579565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610ade57fe5b5080610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b16906117f4565b60405180910390fd5b505092915050565b610b2f6111d5565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610b6c575060008360200151145b15610b90576040518060400160405280600081526020016000815250915050610bc7565b604051806040016040528084600001518152602001828560200151610bb59190611843565b83610bc09190611874565b8152509150505b919050565b600080600467ffffffffffffffff811115610bea57610be96112c2565b5b604051908082528060200260200182016040528015610c2357816020015b610c106111d5565b815260200190600190039081610c085790505b5090506000600467ffffffffffffffff811115610c4357610c426112c2565b5b604051908082528060200260200182016040528015610c7c57816020015b610c69611233565b815260200190600190039081610c615790505b5090508a82600081518110610c9457610c93611579565b5b60200260200101819052508882600181518110610cb457610cb3611579565b5b60200260200101819052508682600281518110610cd457610cd3611579565b5b60200260200101819052508482600381518110610cf457610cf3611579565b5b60200260200101819052508981600081518110610d1457610d13611579565b5b60200260200101819052508781600181518110610d3457610d33611579565b5b60200260200101819052508581600281518110610d5457610d53611579565b5b60200260200101819052508381600381518110610d7457610d73611579565b5b6020026020010181905250610d898282610d99565b9250505098975050505050505050565b60008151835114610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd6906118f4565b60405180910390fd5b6000835190506000600682610df49190611914565b905060008167ffffffffffffffff811115610e1257610e116112c2565b5b604051908082528060200260200182016040528015610e405781602001602082028036833780820191505090505b50905060005b838110156110c557868181518110610e6157610e60611579565b5b602002602001015160000151826000600684610e7d9190611914565b610e87919061161f565b81518110610e9857610e97611579565b5b602002602001018181525050868181518110610eb757610eb6611579565b5b602002602001015160200151826001600684610ed39190611914565b610edd919061161f565b81518110610eee57610eed611579565b5b602002602001018181525050858181518110610f0d57610f0c611579565b5b602002602001015160000151600060028110610f2c57610f2b611579565b5b6020020151826002600684610f419190611914565b610f4b919061161f565b81518110610f5c57610f5b611579565b5b602002602001018181525050858181518110610f7b57610f7a611579565b5b602002602001015160000151600160028110610f9a57610f99611579565b5b6020020151826003600684610faf9190611914565b610fb9919061161f565b81518110610fca57610fc9611579565b5b602002602001018181525050858181518110610fe957610fe8611579565b5b60200260200101516020015160006002811061100857611007611579565b5b602002015182600460068461101d9190611914565b611027919061161f565b8151811061103857611037611579565b5b60200260200101818152505085818151811061105757611056611579565b5b60200260200101516020015160016002811061107657611075611579565b5b602002015182600560068461108b9190611914565b611095919061161f565b815181106110a6576110a5611579565b5b60200260200101818152505080806110bd906115d7565b915050610e46565b506110ce611259565b6000602082602086026020860160086107d05a03fa905080600081036110f057fe5b5080611131576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611128906119a2565b60405180910390fd5b60008260006001811061114757611146611579565b5b602002015114159550505050505092915050565b604051806060016040528061116e6111d5565b815260200161117b611233565b81526020016111886111d5565b81525090565b6040518060a001604052806111a16111d5565b81526020016111ae611233565b81526020016111bb611233565b81526020016111c8611233565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061124661127b565b815260200161125361127b565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112fa826112b1565b810181811067ffffffffffffffff82111715611319576113186112c2565b5b80604052505050565b600061132c61129d565b905061133882826112f1565b919050565b600067ffffffffffffffff821115611358576113576112c2565b5b602082029050919050565b600080fd5b6000819050919050565b61137b81611368565b811461138657600080fd5b50565b60008135905061139881611372565b92915050565b60006113b16113ac8461133d565b611322565b905080602084028301858111156113cb576113ca611363565b5b835b818110156113f457806113e08882611389565b8452602084019350506020810190506113cd565b5050509392505050565b600082601f830112611413576114126112ac565b5b600261142084828561139e565b91505092915050565b600067ffffffffffffffff821115611444576114436112c2565b5b602082029050919050565b600061146261145d84611429565b611322565b9050806040840283018581111561147c5761147b611363565b5b835b818110156114a5578061149188826113fe565b84526020840193505060408101905061147e565b5050509392505050565b600082601f8301126114c4576114c36112ac565b5b60026114d184828561144f565b91505092915050565b60008060008061014085870312156114f5576114f46112a7565b5b6000611503878288016113fe565b9450506040611514878288016114af565b93505060c0611525878288016113fe565b925050610100611537878288016113fe565b91505092959194509250565b60008115159050919050565b61155881611543565b82525050565b6000602082019050611573600083018461154f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115e282611368565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611614576116136115a8565b5b600182019050919050565b600061162a82611368565b915061163583611368565b925082820190508082111561164d5761164c6115a8565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061169a601283611653565b91506116a582611664565b602082019050919050565b600060208201905081810360008301526116c98161168d565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611706601f83611653565b9150611711826116d0565b602082019050919050565b60006020820190508181036000830152611735816116f9565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611772601283611653565b915061177d8261173c565b602082019050919050565b600060208201905081810360008301526117a181611765565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b60006117de601283611653565b91506117e9826117a8565b602082019050919050565b6000602082019050818103600083015261180d816117d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061184e82611368565b915061185983611368565b92508261186957611868611814565b5b828206905092915050565b600061187f82611368565b915061188a83611368565b92508282039050818111156118a2576118a16115a8565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b60006118de601683611653565b91506118e9826118a8565b602082019050919050565b6000602082019050818103600083015261190d816118d1565b9050919050565b600061191f82611368565b915061192a83611368565b925082820261193881611368565b9150828204841483151761194f5761194e6115a8565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b600061198c601583611653565b915061199782611956565b602082019050919050565b600060208201905081810360008301526119bb8161197f565b905091905056fea2646970667358221220d3a5e682c9a1e58ed36d14447aaafd0ea85d729ef31607e4d46cc6f174ef9cd264736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063f5c9d69e1461003a575b600080fd5b610054600480360381019061004f91906114da565b61006a565b604051610061919061155e565b60405180910390f35b600061007461115b565b60405180604001604052808760006002811061009357610092611579565b5b60200201518152602001876001600281106100b1576100b0611579565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea611579565b5b602002015160006002811061010357610102611579565b5b602002015181526020018860006002811061012157610120611579565b5b602002015160016002811061013957610138611579565b5b6020020151815250815260200160405180604001604052808860016002811061016557610164611579565b5b602002015160006002811061017d5761017c611579565b5b602002015181526020018860016002811061019b5761019a611579565b5b60200201516001600281106101b3576101b2611579565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e4611579565b5b602002015181526020018560016002811061020357610202611579565b5b602002015181525081604001819052506000600267ffffffffffffffff8111156102305761022f6112c2565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60028110156102b7578481600281106102805761027f611579565b5b602002015182828151811061029857610297611579565b5b60200260200101818152505080806102af906115d7565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b905080608001515160018651610329919061161f565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906116b0565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a3611579565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e39061171c565b60405180910390fd5b6104438261043e8560800151600185610405919061161f565b8151811061041657610415611579565b5b60200260200101518a858151811061043157610430611579565b5b6020026020010151610951565b610a29565b91508080610450906115d7565b915050610387565b5061048281836080015160008151811061047557610474611579565b5b6020026020010151610a29565b90506104b86104948660000151610b27565b8660200151846000015185602001518587604001518b604001518960600151610bcc565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de61118e565b60405180604001604052807f0325a19920380ec4d38dad81a28212d4daddc37051609fef4175c3445a17f59081526020017f11bd66a781a86cd358b047d74db8affbb5694a39c941febe9ce89d152b9df7458152508160000181905250604051806040016040528060405180604001604052807f211f6456d650fd85b3c48262fb47b9a4ad0aa769f4ee7f5ad4de3cf0e4ba020a81526020017f21c849e4882a55d90f620e2fd4738471c12ec177bb3a246a5823c8fa563bd241815250815260200160405180604001604052807e4823751885fe184bce42b686d74f6dbdaa777e445a1f7b0d556ec0076b1aff81526020017f26845eea29a2ae4aeff5ca8a6fccb5d53c3b6d3374eb06e9cef8a02fad78797d8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600367ffffffffffffffff8111156107a4576107a36112c2565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca6111d5565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f14338bb2e2d6d3ccdf17d2c19075c7fe323ece6124020521be323be760c3460981526020017f1ffa3962b8f42a9579733b9d640a91d05a15e8620ad1a2142a85d3f865a0533c815250816080015160008151811061085357610852611579565b5b602002602001018190525060405180604001604052807f122d529d5921fb143bc8dff2c7fb7cc2f42ee6fa647732aa950b5f0d9568f44681526020017f20574617e72012b4c35b4e3cda35c0f0a77ed732e4647a64e4ea4633a9c798d681525081608001516001815181106108cb576108ca611579565b5b602002602001018190525060405180604001604052807f0774139efb39e290779bd8d0d3839de9d1b8ff8b83f62c3ee440b2039bccdd1081526020017f052e70fb42e4dbfffd92e5128600495700b516bb6cb62ee60e680bbe72369323815250816080015160028151811061094357610942611579565b5b602002602001018190525090565b6109596111d5565b6109616111ef565b83600001518160006003811061097a57610979611579565b5b60200201818152505083602001518160016003811061099c5761099b611579565b5b60200201818152505082816002600381106109ba576109b9611579565b5b602002018181525050600060608360808460076107d05a03fa905080600081036109e057fe5b5080610a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1890611788565b60405180910390fd5b505092915050565b610a316111d5565b610a39611211565b836000015181600060048110610a5257610a51611579565b5b602002018181525050836020015181600160048110610a7457610a73611579565b5b602002018181525050826000015181600260048110610a9657610a95611579565b5b602002018181525050826020015181600360048110610ab857610ab7611579565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610ade57fe5b5080610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b16906117f4565b60405180910390fd5b505092915050565b610b2f6111d5565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610b6c575060008360200151145b15610b90576040518060400160405280600081526020016000815250915050610bc7565b604051806040016040528084600001518152602001828560200151610bb59190611843565b83610bc09190611874565b8152509150505b919050565b600080600467ffffffffffffffff811115610bea57610be96112c2565b5b604051908082528060200260200182016040528015610c2357816020015b610c106111d5565b815260200190600190039081610c085790505b5090506000600467ffffffffffffffff811115610c4357610c426112c2565b5b604051908082528060200260200182016040528015610c7c57816020015b610c69611233565b815260200190600190039081610c615790505b5090508a82600081518110610c9457610c93611579565b5b60200260200101819052508882600181518110610cb457610cb3611579565b5b60200260200101819052508682600281518110610cd457610cd3611579565b5b60200260200101819052508482600381518110610cf457610cf3611579565b5b60200260200101819052508981600081518110610d1457610d13611579565b5b60200260200101819052508781600181518110610d3457610d33611579565b5b60200260200101819052508581600281518110610d5457610d53611579565b5b60200260200101819052508381600381518110610d7457610d73611579565b5b6020026020010181905250610d898282610d99565b9250505098975050505050505050565b60008151835114610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd6906118f4565b60405180910390fd5b6000835190506000600682610df49190611914565b905060008167ffffffffffffffff811115610e1257610e116112c2565b5b604051908082528060200260200182016040528015610e405781602001602082028036833780820191505090505b50905060005b838110156110c557868181518110610e6157610e60611579565b5b602002602001015160000151826000600684610e7d9190611914565b610e87919061161f565b81518110610e9857610e97611579565b5b602002602001018181525050868181518110610eb757610eb6611579565b5b602002602001015160200151826001600684610ed39190611914565b610edd919061161f565b81518110610eee57610eed611579565b5b602002602001018181525050858181518110610f0d57610f0c611579565b5b602002602001015160000151600060028110610f2c57610f2b611579565b5b6020020151826002600684610f419190611914565b610f4b919061161f565b81518110610f5c57610f5b611579565b5b602002602001018181525050858181518110610f7b57610f7a611579565b5b602002602001015160000151600160028110610f9a57610f99611579565b5b6020020151826003600684610faf9190611914565b610fb9919061161f565b81518110610fca57610fc9611579565b5b602002602001018181525050858181518110610fe957610fe8611579565b5b60200260200101516020015160006002811061100857611007611579565b5b602002015182600460068461101d9190611914565b611027919061161f565b8151811061103857611037611579565b5b60200260200101818152505085818151811061105757611056611579565b5b60200260200101516020015160016002811061107657611075611579565b5b602002015182600560068461108b9190611914565b611095919061161f565b815181106110a6576110a5611579565b5b60200260200101818152505080806110bd906115d7565b915050610e46565b506110ce611259565b6000602082602086026020860160086107d05a03fa905080600081036110f057fe5b5080611131576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611128906119a2565b60405180910390fd5b60008260006001811061114757611146611579565b5b602002015114159550505050505092915050565b604051806060016040528061116e6111d5565b815260200161117b611233565b81526020016111886111d5565b81525090565b6040518060a001604052806111a16111d5565b81526020016111ae611233565b81526020016111bb611233565b81526020016111c8611233565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061124661127b565b815260200161125361127b565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112fa826112b1565b810181811067ffffffffffffffff82111715611319576113186112c2565b5b80604052505050565b600061132c61129d565b905061133882826112f1565b919050565b600067ffffffffffffffff821115611358576113576112c2565b5b602082029050919050565b600080fd5b6000819050919050565b61137b81611368565b811461138657600080fd5b50565b60008135905061139881611372565b92915050565b60006113b16113ac8461133d565b611322565b905080602084028301858111156113cb576113ca611363565b5b835b818110156113f457806113e08882611389565b8452602084019350506020810190506113cd565b5050509392505050565b600082601f830112611413576114126112ac565b5b600261142084828561139e565b91505092915050565b600067ffffffffffffffff821115611444576114436112c2565b5b602082029050919050565b600061146261145d84611429565b611322565b9050806040840283018581111561147c5761147b611363565b5b835b818110156114a5578061149188826113fe565b84526020840193505060408101905061147e565b5050509392505050565b600082601f8301126114c4576114c36112ac565b5b60026114d184828561144f565b91505092915050565b60008060008061014085870312156114f5576114f46112a7565b5b6000611503878288016113fe565b9450506040611514878288016114af565b93505060c0611525878288016113fe565b925050610100611537878288016113fe565b91505092959194509250565b60008115159050919050565b61155881611543565b82525050565b6000602082019050611573600083018461154f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115e282611368565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611614576116136115a8565b5b600182019050919050565b600061162a82611368565b915061163583611368565b925082820190508082111561164d5761164c6115a8565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b600061169a601283611653565b91506116a582611664565b602082019050919050565b600060208201905081810360008301526116c98161168d565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611706601f83611653565b9150611711826116d0565b602082019050919050565b60006020820190508181036000830152611735816116f9565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000611772601283611653565b915061177d8261173c565b602082019050919050565b600060208201905081810360008301526117a181611765565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b60006117de601283611653565b91506117e9826117a8565b602082019050919050565b6000602082019050818103600083015261180d816117d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061184e82611368565b915061185983611368565b92508261186957611868611814565b5b828206905092915050565b600061187f82611368565b915061188a83611368565b92508282039050818111156118a2576118a16115a8565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b60006118de601683611653565b91506118e9826118a8565b602082019050919050565b6000602082019050818103600083015261190d816118d1565b9050919050565b600061191f82611368565b915061192a83611368565b925082820261193881611368565b9150828204841483151761194f5761194e6115a8565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b600061198c601583611653565b915061199782611956565b602082019050919050565b600060208201905081810360008301526119bb8161197f565b905091905056fea2646970667358221220d3a5e682c9a1e58ed36d14447aaafd0ea85d729ef31607e4d46cc6f174ef9cd264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[2])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
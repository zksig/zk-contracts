{
  "address": "0x4E17ADA2a503D80006a217789ADc09e3ab47A22c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "input",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ab268397950668a9977108922a7236b40aa084513adb963fd13cb759e6a0fc4",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x4E17ADA2a503D80006a217789ADc09e3ab47A22c",
    "transactionIndex": 2,
    "gasUsed": "1497490",
    "logsBloom": "0x
    "blockHash": "0x2d43ff328ab984f993012f5f276e1d685928a6f6d38903cc96ddbf6c898d2eb0",
    "transactionHash": "0x1ab268397950668a9977108922a7236b40aa084513adb963fd13cb759e6a0fc4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 31803443,
        "transactionHash": "0x1ab268397950668a9977108922a7236b40aa084513adb963fd13cb759e6a0fc4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000007faf05741ce0000000000000000000000000000000000000000000000000003365a2256e3fba3000000000000000000000000000000000000000000001972f325ed7fa7e77923000000000000000000000000000000000000000000000000032e5f31ffa22da3000000000000000000000000000000000000000000001972f32de86fff294723",
        "logIndex": 4,
        "blockHash": "0x2d43ff328ab984f993012f5f276e1d685928a6f6d38903cc96ddbf6c898d2eb0"
      }
    ],
    "blockNumber": 31803443,
    "cumulativeGasUsed": "1824713",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f73cd7c19c823374b76176ce84dcc854",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ValidDocumentId.sol\":\"ValidDocumentId\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ValidDocumentId.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary ValidDocumentIdPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ValidDocumentId {\\n  using ValidDocumentIdPairing for *;\\n  struct VerifyingKey {\\n    ValidDocumentIdPairing.G1Point alfa1;\\n    ValidDocumentIdPairing.G2Point beta2;\\n    ValidDocumentIdPairing.G2Point gamma2;\\n    ValidDocumentIdPairing.G2Point delta2;\\n    ValidDocumentIdPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ValidDocumentIdPairing.G1Point A;\\n    ValidDocumentIdPairing.G2Point B;\\n    ValidDocumentIdPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ValidDocumentIdPairing.G1Point(\\n      1423427196573326869960381667785122074357921755684386940651843063386195096976,\\n      8023961015251680984904169932113418146783590031556471530623177414331800090437\\n    );\\n\\n    vk.beta2 = ValidDocumentIdPairing.G2Point(\\n      [\\n        14981788778016161064675824813766262164386590279136355427549180094813413442058,\\n        15280203404894510920756392128045715359164951458648562381898759371631084950081\\n      ],\\n      [\\n        127457706682557739436150116433930019448698159193059553212687691311716440831,\\n        17421767135883714886528432224440823873509790917646536951997623325206225910141\\n      ]\\n    );\\n    vk.gamma2 = ValidDocumentIdPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ValidDocumentIdPairing.G2Point(\\n      [\\n        18350877368776754025045685187716627854369653780936510500750914213809605525187,\\n        6254600562700475972460121329686865023942695733510697900256506934187977622723\\n      ],\\n      [\\n        5496349254407405065987036505581034067249875410365809092957861832107783124915,\\n        7155757018160691671552046106243095634252700481764353941962088045871467175852\\n      ]\\n    );\\n    vk.IC = new ValidDocumentIdPairing.G1Point[](2);\\n\\n    vk.IC[0] = ValidDocumentIdPairing.G1Point(\\n      16343576977154026618079659125899271337316365385182419844778711316436831122709,\\n      17061378451226668405972122945551787391401733398741683636278318813164040200354\\n    );\\n\\n    vk.IC[1] = ValidDocumentIdPairing.G1Point(\\n      7929960780092852689646911121604575205411898629951606630075450471533132018173,\\n      11962554901184474316679526381223715652492322526776074470997200466548379083577\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ValidDocumentIdPairing.G1Point memory vk_x = ValidDocumentIdPairing.G1Point(\\n      0,\\n      0\\n    );\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ValidDocumentIdPairing.addition(\\n        vk_x,\\n        ValidDocumentIdPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ValidDocumentIdPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ValidDocumentIdPairing.pairingProd4(\\n        ValidDocumentIdPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[1] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ValidDocumentIdPairing.G1Point(a[0], a[1]);\\n    proof.B = ValidDocumentIdPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ValidDocumentIdPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40090ad625380529b4d7147388e05745a9f7a64d8b75cfa4abef6677f380ae15\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806343753b4d1461003a575b600080fd5b610054600480360381019061004f9190611513565b61006a565b6040516100619190611597565b60405180910390f35b60006100746110e3565b604051806040016040528087600060028110610093576100926115b2565b5b60200201518152602001876001600281106100b1576100b06115b2565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6115b2565b5b6020020151600060028110610103576101026115b2565b5b6020020151815260200188600060028110610121576101206115b2565b5b6020020151600160028110610139576101386115b2565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646115b2565b5b602002015160006002811061017d5761017c6115b2565b5b602002015181526020018860016002811061019b5761019a6115b2565b5b60200201516001600281106101b3576101b26115b2565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46115b2565b5b6020020151815260200185600160028110610203576102026115b2565b5b602002015181525081604001819052506000600167ffffffffffffffff8111156102305761022f61124a565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60018110156102b7578481600181106102805761027f6115b2565b5b6020020151828281518110610298576102976115b2565b5b60200260200101818152505080806102af90611610565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b9050806080015151600186516103299190611658565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906116e9565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36115b2565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611755565b60405180910390fd5b6104438261043e85608001516001856104059190611658565b81518110610416576104156115b2565b5b60200260200101518a8581518110610431576104306115b2565b5b60200260200101516108d9565b6109b1565b9150808061045090611610565b915050610387565b50610482818360800151600081518110610475576104746115b2565b5b60200260200101516109b1565b90506104b86104948660000151610aaf565b8660200151846000015185602001518587604001518b604001518960600151610b54565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de611116565b60405180604001604052807f0325a19920380ec4d38dad81a28212d4daddc37051609fef4175c3445a17f59081526020017f11bd66a781a86cd358b047d74db8affbb5694a39c941febe9ce89d152b9df7458152508160000181905250604051806040016040528060405180604001604052807f211f6456d650fd85b3c48262fb47b9a4ad0aa769f4ee7f5ad4de3cf0e4ba020a81526020017f21c849e4882a55d90f620e2fd4738471c12ec177bb3a246a5823c8fa563bd241815250815260200160405180604001604052807e4823751885fe184bce42b686d74f6dbdaa777e445a1f7b0d556ec0076b1aff81526020017f26845eea29a2ae4aeff5ca8a6fccb5d53c3b6d3374eb06e9cef8a02fad78797d8152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f28923a80115998e582cbac0c95ad2eaa3b8d976b6e11704dadcc98ccefc33ec381526020017f0dd3fa7cc5ca2b9366b435868efd955d4b93f1b9c7cbfcca0e809fd01e6844c3815250815260200160405180604001604052807f0c26d2cc9b94f5b052586f0da4294644241832f55406fb05c9a0b0a233c477b381526020017f0fd203d3722417271a81a745cc8130f7a4040c852697b919fa86a358e5a59fac8152508152508160600181905250600267ffffffffffffffff8111156107a4576107a361124a565b5b6040519080825280602002602001820160405280156107dd57816020015b6107ca61115d565b8152602001906001900390816107c25790505b50816080018190525060405180604001604052807f242223027a9b30572d1cf02cd1c102caa0d2d9c518afc547efa4e1e4349f351581526020017f25b865e2e7ab522503d65f7db4af3a40a10d0562e1e1a5b51244d3389f6da0a28152508160800151600081518110610853576108526115b2565b5b602002602001018190525060405180604001604052807f118832e1009703f9161efb929dc92b318898787751acab84488336a51fce71fd81526020017f1a7290ee2c916e66d7eaea784f87da1f13b2b7231653f42f96ca422869afe33981525081608001516001815181106108cb576108ca6115b2565b5b602002602001018190525090565b6108e161115d565b6108e9611177565b836000015181600060038110610902576109016115b2565b5b602002018181525050836020015181600160038110610924576109236115b2565b5b6020020181815250508281600260038110610942576109416115b2565b5b602002018181525050600060608360808460076107d05a03fa9050806000810361096857fe5b50806109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a0906117c1565b60405180910390fd5b505092915050565b6109b961115d565b6109c1611199565b8360000151816000600481106109da576109d96115b2565b5b6020020181815250508360200151816001600481106109fc576109fb6115b2565b5b602002018181525050826000015181600260048110610a1e57610a1d6115b2565b5b602002018181525050826020015181600360048110610a4057610a3f6115b2565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610a6657fe5b5080610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e9061182d565b60405180910390fd5b505092915050565b610ab761115d565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610af4575060008360200151145b15610b18576040518060400160405280600081526020016000815250915050610b4f565b604051806040016040528084600001518152602001828560200151610b3d919061187c565b83610b4891906118ad565b8152509150505b919050565b600080600467ffffffffffffffff811115610b7257610b7161124a565b5b604051908082528060200260200182016040528015610bab57816020015b610b9861115d565b815260200190600190039081610b905790505b5090506000600467ffffffffffffffff811115610bcb57610bca61124a565b5b604051908082528060200260200182016040528015610c0457816020015b610bf16111bb565b815260200190600190039081610be95790505b5090508a82600081518110610c1c57610c1b6115b2565b5b60200260200101819052508882600181518110610c3c57610c3b6115b2565b5b60200260200101819052508682600281518110610c5c57610c5b6115b2565b5b60200260200101819052508482600381518110610c7c57610c7b6115b2565b5b60200260200101819052508981600081518110610c9c57610c9b6115b2565b5b60200260200101819052508781600181518110610cbc57610cbb6115b2565b5b60200260200101819052508581600281518110610cdc57610cdb6115b2565b5b60200260200101819052508381600381518110610cfc57610cfb6115b2565b5b6020026020010181905250610d118282610d21565b9250505098975050505050505050565b60008151835114610d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5e9061192d565b60405180910390fd5b6000835190506000600682610d7c919061194d565b905060008167ffffffffffffffff811115610d9a57610d9961124a565b5b604051908082528060200260200182016040528015610dc85781602001602082028036833780820191505090505b50905060005b8381101561104d57868181518110610de957610de86115b2565b5b602002602001015160000151826000600684610e05919061194d565b610e0f9190611658565b81518110610e2057610e1f6115b2565b5b602002602001018181525050868181518110610e3f57610e3e6115b2565b5b602002602001015160200151826001600684610e5b919061194d565b610e659190611658565b81518110610e7657610e756115b2565b5b602002602001018181525050858181518110610e9557610e946115b2565b5b602002602001015160000151600060028110610eb457610eb36115b2565b5b6020020151826002600684610ec9919061194d565b610ed39190611658565b81518110610ee457610ee36115b2565b5b602002602001018181525050858181518110610f0357610f026115b2565b5b602002602001015160000151600160028110610f2257610f216115b2565b5b6020020151826003600684610f37919061194d565b610f419190611658565b81518110610f5257610f516115b2565b5b602002602001018181525050858181518110610f7157610f706115b2565b5b602002602001015160200151600060028110610f9057610f8f6115b2565b5b6020020151826004600684610fa5919061194d565b610faf9190611658565b81518110610fc057610fbf6115b2565b5b602002602001018181525050858181518110610fdf57610fde6115b2565b5b602002602001015160200151600160028110610ffe57610ffd6115b2565b5b6020020151826005600684611013919061194d565b61101d9190611658565b8151811061102e5761102d6115b2565b5b602002602001018181525050808061104590611610565b915050610dce565b506110566111e1565b6000602082602086026020860160086107d05a03fa9050806000810361107857fe5b50806110b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b0906119db565b60405180910390fd5b6000826000600181106110cf576110ce6115b2565b5b602002015114159550505050505092915050565b60405180606001604052806110f661115d565b81526020016111036111bb565b815260200161111061115d565b81525090565b6040518060a0016040528061112961115d565b81526020016111366111bb565b81526020016111436111bb565b81526020016111506111bb565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806111ce611203565b81526020016111db611203565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61128282611239565b810181811067ffffffffffffffff821117156112a1576112a061124a565b5b80604052505050565b60006112b4611225565b90506112c08282611279565b919050565b600067ffffffffffffffff8211156112e0576112df61124a565b5b602082029050919050565b600080fd5b6000819050919050565b611303816112f0565b811461130e57600080fd5b50565b600081359050611320816112fa565b92915050565b6000611339611334846112c5565b6112aa565b90508060208402830185811115611353576113526112eb565b5b835b8181101561137c57806113688882611311565b845260208401935050602081019050611355565b5050509392505050565b600082601f83011261139b5761139a611234565b5b60026113a8848285611326565b91505092915050565b600067ffffffffffffffff8211156113cc576113cb61124a565b5b602082029050919050565b60006113ea6113e5846113b1565b6112aa565b90508060408402830185811115611404576114036112eb565b5b835b8181101561142d57806114198882611386565b845260208401935050604081019050611406565b5050509392505050565b600082601f83011261144c5761144b611234565b5b60026114598482856113d7565b91505092915050565b600067ffffffffffffffff82111561147d5761147c61124a565b5b602082029050919050565b600061149b61149684611462565b6112aa565b905080602084028301858111156114b5576114b46112eb565b5b835b818110156114de57806114ca8882611311565b8452602084019350506020810190506114b7565b5050509392505050565b600082601f8301126114fd576114fc611234565b5b600161150a848285611488565b91505092915050565b600080600080610120858703121561152e5761152d61122f565b5b600061153c87828801611386565b945050604061154d87828801611437565b93505060c061155e87828801611386565b925050610100611570878288016114e8565b91505092959194509250565b60008115159050919050565b6115918161157c565b82525050565b60006020820190506115ac6000830184611588565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061161b826112f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164d5761164c6115e1565b5b600182019050919050565b6000611663826112f0565b915061166e836112f0565b9250828201905080821115611686576116856115e1565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b60006116d360128361168c565b91506116de8261169d565b602082019050919050565b60006020820190508181036000830152611702816116c6565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b600061173f601f8361168c565b915061174a82611709565b602082019050919050565b6000602082019050818103600083015261176e81611732565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006117ab60128361168c565b91506117b682611775565b602082019050919050565b600060208201905081810360008301526117da8161179e565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061181760128361168c565b9150611822826117e1565b602082019050919050565b600060208201905081810360008301526118468161180a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611887826112f0565b9150611892836112f0565b9250826118a2576118a161184d565b5b828206905092915050565b60006118b8826112f0565b91506118c3836112f0565b92508282039050818111156118db576118da6115e1565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b600061191760168361168c565b9150611922826118e1565b602082019050919050565b600060208201905081810360008301526119468161190a565b9050919050565b6000611958826112f0565b9150611963836112f0565b9250828202611971816112f0565b91508282048414831517611988576119876115e1565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b60006119c560158361168c565b91506119d08261198f565b602082019050919050565b600060208201905081810360008301526119f4816119b8565b905091905056fea264697066735822122077dfed8d7cad0cd9ebf3932426cd7cbd180d3f0d07325da60dc166e3a8df455964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xb1c5129aAd91bDcBeA38Af4C5D341cFb75FDA35A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "input",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3139a325e3811732ad5d6fe9d2f399bde1011f86851c0574bffd61ea3a4fbe4",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xb1c5129aAd91bDcBeA38Af4C5D341cFb75FDA35A",
    "transactionIndex": 3,
    "gasUsed": "1497694",
    "logsBloom": "0x
    "blockHash": "0xcd6cc3354f082d84b49fd9101a67d5e8eea76cb39547555a10324828a69f9521",
    "transactionHash": "0xd3139a325e3811732ad5d6fe9d2f399bde1011f86851c0574bffd61ea3a4fbe4",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 35244576,
        "transactionHash": "0xd3139a325e3811732ad5d6fe9d2f399bde1011f86851c0574bffd61ea3a4fbe4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ff66f2dfc29e000000000000000000000000000000000000000000000000025da38d0d95bbb44000000000000000000000000000000000000000000001ec6e4ea402df348504700000000000000000000000000000000000000000000000025ca4261ab5f9164000000000000000000000000000000000000000000001ec6e4fa369d21447a27",
        "logIndex": 6,
        "blockHash": "0xcd6cc3354f082d84b49fd9101a67d5e8eea76cb39547555a10324828a69f9521"
      }
    ],
    "blockNumber": 35244576,
    "cumulativeGasUsed": "1603674",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4e9fe59d72cd432afe03e33de6161783",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ValidDocumentId.sol\":\"ValidDocumentId\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ValidDocumentId.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.18;\\n\\nlibrary ValidDocumentIdPairing {\\n  struct G1Point {\\n    uint X;\\n    uint Y;\\n  }\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint[2] X;\\n    uint[2] Y;\\n  }\\n\\n  /// @return the generator of G1\\n  function P1() internal pure returns (G1Point memory) {\\n    return G1Point(1, 2);\\n  }\\n\\n  /// @return the generator of G2\\n  function P2() internal pure returns (G2Point memory) {\\n    // Original code point\\n    return\\n      G2Point(\\n        [\\n          11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n          10857046999023057135944570762232829481370756359578518086990519993285655852781\\n        ],\\n        [\\n          4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n          8495653923123431417604973247489272438418190587263600148770280649306958101930\\n        ]\\n      );\\n\\n    /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n  }\\n\\n  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n    // The prime q in the base field F_q for G1\\n    uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n    return G1Point(p.X, q - (p.Y % q));\\n  }\\n\\n  /// @return r the sum of two points of G1\\n  function addition(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /// @return r the product of a point on G1 and a scalar, i.e.\\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n  function scalar_mul(\\n    G1Point memory p,\\n    uint s\\n  ) internal view returns (G1Point memory r) {\\n    uint[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /// @return the result of computing the pairing check\\n  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n  /// return true.\\n  function pairing(\\n    G1Point[] memory p1,\\n    G2Point[] memory p2\\n  ) internal view returns (bool) {\\n    require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n    uint elements = p1.length;\\n    uint inputSize = elements * 6;\\n    uint[] memory input = new uint[](inputSize);\\n    for (uint i = 0; i < elements; i++) {\\n      input[i * 6 + 0] = p1[i].X;\\n      input[i * 6 + 1] = p1[i].Y;\\n      input[i * 6 + 2] = p2[i].X[0];\\n      input[i * 6 + 3] = p2[i].X[1];\\n      input[i * 6 + 4] = p2[i].Y[0];\\n      input[i * 6 + 5] = p2[i].Y[1];\\n    }\\n    uint[1] memory out;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(\\n        sub(gas(), 2000),\\n        8,\\n        add(input, 0x20),\\n        mul(inputSize, 0x20),\\n        out,\\n        0x20\\n      )\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n    require(success, \\\"pairing-opcode-failed\\\");\\n    return out[0] != 0;\\n  }\\n\\n  /// Convenience method for a pairing check for two pairs.\\n  function pairingProd2(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](2);\\n    G2Point[] memory p2 = new G2Point[](2);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for three pairs.\\n  function pairingProd3(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](3);\\n    G2Point[] memory p2 = new G2Point[](3);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    return pairing(p1, p2);\\n  }\\n\\n  /// Convenience method for a pairing check for four pairs.\\n  function pairingProd4(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[] memory p1 = new G1Point[](4);\\n    G2Point[] memory p2 = new G2Point[](4);\\n    p1[0] = a1;\\n    p1[1] = b1;\\n    p1[2] = c1;\\n    p1[3] = d1;\\n    p2[0] = a2;\\n    p2[1] = b2;\\n    p2[2] = c2;\\n    p2[3] = d2;\\n    return pairing(p1, p2);\\n  }\\n}\\n\\nlibrary ValidDocumentId {\\n  using ValidDocumentIdPairing for *;\\n  struct VerifyingKey {\\n    ValidDocumentIdPairing.G1Point alfa1;\\n    ValidDocumentIdPairing.G2Point beta2;\\n    ValidDocumentIdPairing.G2Point gamma2;\\n    ValidDocumentIdPairing.G2Point delta2;\\n    ValidDocumentIdPairing.G1Point[] IC;\\n  }\\n  struct Proof {\\n    ValidDocumentIdPairing.G1Point A;\\n    ValidDocumentIdPairing.G2Point B;\\n    ValidDocumentIdPairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = ValidDocumentIdPairing.G1Point(\\n      20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n      9383485363053290200918347156157836566562967994039712273449902621266178545958\\n    );\\n\\n    vk.beta2 = ValidDocumentIdPairing.G2Point(\\n      [\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731\\n      ],\\n      [\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856\\n      ]\\n    );\\n    vk.gamma2 = ValidDocumentIdPairing.G2Point(\\n      [\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781\\n      ],\\n      [\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930\\n      ]\\n    );\\n    vk.delta2 = ValidDocumentIdPairing.G2Point(\\n      [\\n        21842158356314907143624524415630140014840403456795272636154062059757137750215,\\n        13578229072466067592306091371497775160676435570800938926734371212598187203102\\n      ],\\n      [\\n        13144847685742004312710071096843700856697814423838841041703179624741457250088,\\n        14525794668761827959321229599462872101361941412587063440135274526300678775818\\n      ]\\n    );\\n    vk.IC = new ValidDocumentIdPairing.G1Point[](2);\\n\\n    vk.IC[0] = ValidDocumentIdPairing.G1Point(\\n      7327377996225613037124633723489823478346014161431552659480074397737492717225,\\n      13401269243159299556131190396933357212306223083943614508826469272368968183681\\n    );\\n\\n    vk.IC[1] = ValidDocumentIdPairing.G1Point(\\n      10706727170246844771331139084419527539226734937471262756546621203498667709259,\\n      12428870882001022339541224905974885047484181169887634789074345593237232374367\\n    );\\n  }\\n\\n  function verify(\\n    uint[] memory input,\\n    Proof memory proof\\n  ) internal view returns (uint) {\\n    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    VerifyingKey memory vk = verifyingKey();\\n    require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n    // Compute the linear combination vk_x\\n    ValidDocumentIdPairing.G1Point memory vk_x = ValidDocumentIdPairing.G1Point(\\n      0,\\n      0\\n    );\\n    for (uint i = 0; i < input.length; i++) {\\n      require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = ValidDocumentIdPairing.addition(\\n        vk_x,\\n        ValidDocumentIdPairing.scalar_mul(vk.IC[i + 1], input[i])\\n      );\\n    }\\n    vk_x = ValidDocumentIdPairing.addition(vk_x, vk.IC[0]);\\n    if (\\n      !ValidDocumentIdPairing.pairingProd4(\\n        ValidDocumentIdPairing.negate(proof.A),\\n        proof.B,\\n        vk.alfa1,\\n        vk.beta2,\\n        vk_x,\\n        vk.gamma2,\\n        proof.C,\\n        vk.delta2\\n      )\\n    ) return 1;\\n    return 0;\\n  }\\n\\n  /// @return r  bool true if proof is valid\\n  function verifyProof(\\n    uint[2] memory a,\\n    uint[2][2] memory b,\\n    uint[2] memory c,\\n    uint[1] memory input\\n  ) public view returns (bool r) {\\n    Proof memory proof;\\n    proof.A = ValidDocumentIdPairing.G1Point(a[0], a[1]);\\n    proof.B = ValidDocumentIdPairing.G2Point(\\n      [b[0][0], b[0][1]],\\n      [b[1][0], b[1][1]]\\n    );\\n    proof.C = ValidDocumentIdPairing.G1Point(c[0], c[1]);\\n    uint[] memory inputValues = new uint[](input.length);\\n    for (uint i = 0; i < input.length; i++) {\\n      inputValues[i] = input[i];\\n    }\\n    if (verify(inputValues, proof) == 0) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6edf6bda0f687c6c8249df46c0a0e2218ff9fe25928ad6dfeb85b11291c525ba\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806343753b4d1461003a575b600080fd5b610054600480360381019061004f9190611514565b61006a565b6040516100619190611598565b60405180910390f35b60006100746110e4565b604051806040016040528087600060028110610093576100926115b3565b5b60200201518152602001876001600281106100b1576100b06115b3565b5b6020020151815250816000018190525060405180604001604052806040518060400160405280886000600281106100eb576100ea6115b3565b5b6020020151600060028110610103576101026115b3565b5b6020020151815260200188600060028110610121576101206115b3565b5b6020020151600160028110610139576101386115b3565b5b60200201518152508152602001604051806040016040528088600160028110610165576101646115b3565b5b602002015160006002811061017d5761017c6115b3565b5b602002015181526020018860016002811061019b5761019a6115b3565b5b60200201516001600281106101b3576101b26115b3565b5b602002015181525081525081602001819052506040518060400160405280856000600281106101e5576101e46115b3565b5b6020020151815260200185600160028110610203576102026115b3565b5b602002015181525081604001819052506000600167ffffffffffffffff8111156102305761022f61124b565b5b60405190808252806020026020018201604052801561025e5781602001602082028036833780820191505090505b50905060005b60018110156102b7578481600181106102805761027f6115b3565b5b6020020151828281518110610298576102976115b3565b5b60200260200101818152505080806102af90611611565b915050610264565b5060006102c482846102e3565b036102d4576001925050506102db565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060006103136104d6565b9050806080015151600186516103299190611659565b14610369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610360906116ea565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b865181101561045857838782815181106103a4576103a36115b3565b5b6020026020010151106103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390611756565b60405180910390fd5b6104438261043e85608001516001856104059190611659565b81518110610416576104156115b3565b5b60200260200101518a8581518110610431576104306115b3565b5b60200260200101516108da565b6109b2565b9150808061045090611611565b915050610387565b50610482818360800151600081518110610475576104746115b3565b5b60200260200101516109b2565b90506104b86104948660000151610ab0565b8660200151846000015185602001518587604001518b604001518960600151610b55565b6104c857600193505050506104d0565b600093505050505b92915050565b6104de611117565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f304a393932006f02dfd655299b4a843323f2e40cd6814da9d94245cc82b2e8c781526020017f1e05015be90bf9ce31eb36cb674d1ddd3c762514d96185490e33358ecc911a1e815250815260200160405180604001604052807f1d0fb85adba83873116792056bf346c412dc925f1be35d0acc8dea3a97aa472881526020017f201d4ef54a3975c4b5c102a433f6a43e646709bc3d37c1b0e70225fec931e40a8152508152508160600181905250600267ffffffffffffffff8111156107a5576107a461124b565b5b6040519080825280602002602001820160405280156107de57816020015b6107cb61115e565b8152602001906001900390816107c35790505b50816080018190525060405180604001604052807f1033262351f332e8123242a91cd6710566c37e1401e992614edeb1fb0cb89ea981526020017f1da0d97f099616135cfaef8fbd136d41e845e70166999e6d72fcaf1f13692f818152508160800151600081518110610854576108536115b3565b5b602002602001018190525060405180604001604052807f17abcaf6bc722e6b2baf71b69e5fbc256329faab42a422629b7d14bcc119934b81526020017f1b7a7ddb3757908b350db7268ace822e969cb7532dc56d944f6a02fc360b525f81525081608001516001815181106108cc576108cb6115b3565b5b602002602001018190525090565b6108e261115e565b6108ea611178565b836000015181600060038110610903576109026115b3565b5b602002018181525050836020015181600160038110610925576109246115b3565b5b6020020181815250508281600260038110610943576109426115b3565b5b602002018181525050600060608360808460076107d05a03fa9050806000810361096957fe5b50806109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a1906117c2565b60405180910390fd5b505092915050565b6109ba61115e565b6109c261119a565b8360000151816000600481106109db576109da6115b3565b5b6020020181815250508360200151816001600481106109fd576109fc6115b3565b5b602002018181525050826000015181600260048110610a1f57610a1e6115b3565b5b602002018181525050826020015181600360048110610a4157610a406115b3565b5b602002018181525050600060608360c08460066107d05a03fa90508060008103610a6757fe5b5080610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f9061182e565b60405180910390fd5b505092915050565b610ab861115e565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610af5575060008360200151145b15610b19576040518060400160405280600081526020016000815250915050610b50565b604051806040016040528084600001518152602001828560200151610b3e919061187d565b83610b4991906118ae565b8152509150505b919050565b600080600467ffffffffffffffff811115610b7357610b7261124b565b5b604051908082528060200260200182016040528015610bac57816020015b610b9961115e565b815260200190600190039081610b915790505b5090506000600467ffffffffffffffff811115610bcc57610bcb61124b565b5b604051908082528060200260200182016040528015610c0557816020015b610bf26111bc565b815260200190600190039081610bea5790505b5090508a82600081518110610c1d57610c1c6115b3565b5b60200260200101819052508882600181518110610c3d57610c3c6115b3565b5b60200260200101819052508682600281518110610c5d57610c5c6115b3565b5b60200260200101819052508482600381518110610c7d57610c7c6115b3565b5b60200260200101819052508981600081518110610c9d57610c9c6115b3565b5b60200260200101819052508781600181518110610cbd57610cbc6115b3565b5b60200260200101819052508581600281518110610cdd57610cdc6115b3565b5b60200260200101819052508381600381518110610cfd57610cfc6115b3565b5b6020026020010181905250610d128282610d22565b9250505098975050505050505050565b60008151835114610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f9061192e565b60405180910390fd5b6000835190506000600682610d7d919061194e565b905060008167ffffffffffffffff811115610d9b57610d9a61124b565b5b604051908082528060200260200182016040528015610dc95781602001602082028036833780820191505090505b50905060005b8381101561104e57868181518110610dea57610de96115b3565b5b602002602001015160000151826000600684610e06919061194e565b610e109190611659565b81518110610e2157610e206115b3565b5b602002602001018181525050868181518110610e4057610e3f6115b3565b5b602002602001015160200151826001600684610e5c919061194e565b610e669190611659565b81518110610e7757610e766115b3565b5b602002602001018181525050858181518110610e9657610e956115b3565b5b602002602001015160000151600060028110610eb557610eb46115b3565b5b6020020151826002600684610eca919061194e565b610ed49190611659565b81518110610ee557610ee46115b3565b5b602002602001018181525050858181518110610f0457610f036115b3565b5b602002602001015160000151600160028110610f2357610f226115b3565b5b6020020151826003600684610f38919061194e565b610f429190611659565b81518110610f5357610f526115b3565b5b602002602001018181525050858181518110610f7257610f716115b3565b5b602002602001015160200151600060028110610f9157610f906115b3565b5b6020020151826004600684610fa6919061194e565b610fb09190611659565b81518110610fc157610fc06115b3565b5b602002602001018181525050858181518110610fe057610fdf6115b3565b5b602002602001015160200151600160028110610fff57610ffe6115b3565b5b6020020151826005600684611014919061194e565b61101e9190611659565b8151811061102f5761102e6115b3565b5b602002602001018181525050808061104690611611565b915050610dcf565b506110576111e2565b6000602082602086026020860160086107d05a03fa9050806000810361107957fe5b50806110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b1906119dc565b60405180910390fd5b6000826000600181106110d0576110cf6115b3565b5b602002015114159550505050505092915050565b60405180606001604052806110f761115e565b81526020016111046111bc565b815260200161111161115e565b81525090565b6040518060a0016040528061112a61115e565b81526020016111376111bc565b81526020016111446111bc565b81526020016111516111bc565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806111cf611204565b81526020016111dc611204565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112838261123a565b810181811067ffffffffffffffff821117156112a2576112a161124b565b5b80604052505050565b60006112b5611226565b90506112c1828261127a565b919050565b600067ffffffffffffffff8211156112e1576112e061124b565b5b602082029050919050565b600080fd5b6000819050919050565b611304816112f1565b811461130f57600080fd5b50565b600081359050611321816112fb565b92915050565b600061133a611335846112c6565b6112ab565b90508060208402830185811115611354576113536112ec565b5b835b8181101561137d57806113698882611312565b845260208401935050602081019050611356565b5050509392505050565b600082601f83011261139c5761139b611235565b5b60026113a9848285611327565b91505092915050565b600067ffffffffffffffff8211156113cd576113cc61124b565b5b602082029050919050565b60006113eb6113e6846113b2565b6112ab565b90508060408402830185811115611405576114046112ec565b5b835b8181101561142e578061141a8882611387565b845260208401935050604081019050611407565b5050509392505050565b600082601f83011261144d5761144c611235565b5b600261145a8482856113d8565b91505092915050565b600067ffffffffffffffff82111561147e5761147d61124b565b5b602082029050919050565b600061149c61149784611463565b6112ab565b905080602084028301858111156114b6576114b56112ec565b5b835b818110156114df57806114cb8882611312565b8452602084019350506020810190506114b8565b5050509392505050565b600082601f8301126114fe576114fd611235565b5b600161150b848285611489565b91505092915050565b600080600080610120858703121561152f5761152e611230565b5b600061153d87828801611387565b945050604061154e87828801611438565b93505060c061155f87828801611387565b925050610100611571878288016114e9565b91505092959194509250565b60008115159050919050565b6115928161157d565b82525050565b60006020820190506115ad6000830184611589565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061161c826112f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164e5761164d6115e2565b5b600182019050919050565b6000611664826112f1565b915061166f836112f1565b9250828201905080821115611687576116866115e2565b5b92915050565b600082825260208201905092915050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b60006116d460128361168d565b91506116df8261169e565b602082019050919050565b60006020820190508181036000830152611703816116c7565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b6000611740601f8361168d565b915061174b8261170a565b602082019050919050565b6000602082019050818103600083015261176f81611733565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b60006117ac60128361168d565b91506117b782611776565b602082019050919050565b600060208201905081810360008301526117db8161179f565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b600061181860128361168d565b9150611823826117e2565b602082019050919050565b600060208201905081810360008301526118478161180b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611888826112f1565b9150611893836112f1565b9250826118a3576118a261184e565b5b828206905092915050565b60006118b9826112f1565b91506118c4836112f1565b92508282039050818111156118dc576118db6115e2565b5b92915050565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b600061191860168361168d565b9150611923826118e2565b602082019050919050565b600060208201905081810360008301526119478161190b565b9050919050565b6000611959826112f1565b9150611964836112f1565b9250828202611972816112f1565b91508282048414831517611989576119886115e2565b5b5092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b60006119c660158361168d565b91506119d182611990565b602082019050919050565b600060208201905081810360008301526119f5816119b9565b905091905056fea264697066735822122053e72ce9645b270f4cf221f5defa90fb15af06980e8559444fe91dd0e2448ad264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x1732cf384eF96bEc9a61bd6B854F84e5eF9351cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5823bd78b3e9cc15e512b8c8e02be225900ffa38839157ebc954d892f274758",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x1732cf384eF96bEc9a61bd6B854F84e5eF9351cf",
    "transactionIndex": 2,
    "gasUsed": "1867617",
    "logsBloom": "0x
    "blockHash": "0x5c9359ce702ea19eac3a34ea0dc0f1ea1045cc414c8da11d7f46ac78e3d4aef2",
    "transactionHash": "0xc5823bd78b3e9cc15e512b8c8e02be225900ffa38839157ebc954d892f274758",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 31619992,
        "transactionHash": "0xc5823bd78b3e9cc15e512b8c8e02be225900ffa38839157ebc954d892f274758",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000df5a7f101d41b000000000000000000000000000000000000000000000000039149d497f90cbb000000000000000000000000000000000000000000000c820b3b3bd99f2cce220000000000000000000000000000000000000000000000000383542ca6f738a0000000000000000000000000000000000000000000000c820b493181902ea23d",
        "logIndex": 4,
        "blockHash": "0x5c9359ce702ea19eac3a34ea0dc0f1ea1045cc414c8da11d7f46ac78e3d4aef2"
      }
    ],
    "blockNumber": 31619992,
    "cumulativeGasUsed": "1938762",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "775cb6d737b3cdd136a3c03f2d999768",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/ValidAgreementSignatureInsert.sol\":\"ValidAgreementSignatureInsert\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/ValidAgreementSignatureInsert.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary ValidAgreementSignatureInsert {\\n  uint32 constant n = 65536;\\n  uint16 constant nPublic = 3;\\n  uint16 constant nLagrange = 3;\\n\\n  uint256 constant Qmx =\\n    2526765530286419229082716349264368797506546833846717053180365021852800730028;\\n  uint256 constant Qmy =\\n    3733169565153083979004235038268181002157127739825766281229756266884310973505;\\n  uint256 constant Qlx =\\n    19104203058502384070050445475361618823613391947383977011733027526488105144644;\\n  uint256 constant Qly =\\n    16276643284809123697329182809336043498046692153466811465719134673762973110489;\\n  uint256 constant Qrx =\\n    12067801189410983430817483156626188837292757610387499762896464436093139110155;\\n  uint256 constant Qry =\\n    14553654959503739664088608798285159112126878163344524643121670297754984916086;\\n  uint256 constant Qox =\\n    21439820091018674115635602971982651897911813764543812673477968351908584461084;\\n  uint256 constant Qoy =\\n    3684520644845780476614101155797439732013194822710394999701425447065613377734;\\n  uint256 constant Qcx =\\n    5296742246961431401185397200626537016108629654846053406389096269073420272913;\\n  uint256 constant Qcy =\\n    14827412678276938282846011089631370408234526727648393914337932448974524885665;\\n  uint256 constant S1x =\\n    20420126060161319500382404893947435878751899566398132447369535650566561384852;\\n  uint256 constant S1y =\\n    21047557065547554166879070610545507563809702584576604068517417704332986145299;\\n  uint256 constant S2x =\\n    8347111189686094046394901927781253039944218647382546364986741989046268219339;\\n  uint256 constant S2y =\\n    3846417704273417918886676028580471154825735334418719813923777775662245261428;\\n  uint256 constant S3x =\\n    7247455853843852021497498663407805299181361358498216315566205585223358465052;\\n  uint256 constant S3y =\\n    9354933565113481229433145185827793897842860333834122287442354748338454464065;\\n  uint256 constant k1 = 2;\\n  uint256 constant k2 = 3;\\n  uint256 constant X2x1 =\\n    14191176354905070490717531806826641383044715640553330788488102588115646966070;\\n  uint256 constant X2x2 =\\n    999251940849815177411677981739857011152674133100659605785688603610356821496;\\n  uint256 constant X2y1 =\\n    11285099626586890060988452771000099276866189313258039162897885132069146012030;\\n  uint256 constant X2y2 =\\n    16379976780622467578103462160974444735715077741479937785305266039858947702895;\\n\\n  uint256 constant q =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 constant qf =\\n    21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n  uint256 constant w1 =\\n    421743594562400382753388642386256516545992082196004333756405989743524594615;\\n\\n  uint256 constant G1x = 1;\\n  uint256 constant G1y = 2;\\n  uint256 constant G2x1 =\\n    10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n  uint256 constant G2x2 =\\n    11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n  uint256 constant G2y1 =\\n    8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n  uint256 constant G2y2 =\\n    4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n  uint16 constant pA = 32;\\n  uint16 constant pB = 96;\\n  uint16 constant pC = 160;\\n  uint16 constant pZ = 224;\\n  uint16 constant pT1 = 288;\\n  uint16 constant pT2 = 352;\\n  uint16 constant pT3 = 416;\\n  uint16 constant pWxi = 480;\\n  uint16 constant pWxiw = 544;\\n  uint16 constant pEval_a = 608;\\n  uint16 constant pEval_b = 640;\\n  uint16 constant pEval_c = 672;\\n  uint16 constant pEval_s1 = 704;\\n  uint16 constant pEval_s2 = 736;\\n  uint16 constant pEval_zw = 768;\\n  uint16 constant pEval_r = 800;\\n\\n  uint16 constant pAlpha = 0;\\n  uint16 constant pBeta = 32;\\n  uint16 constant pGamma = 64;\\n  uint16 constant pXi = 96;\\n  uint16 constant pXin = 128;\\n  uint16 constant pBetaXi = 160;\\n  uint16 constant pV1 = 192;\\n  uint16 constant pV2 = 224;\\n  uint16 constant pV3 = 256;\\n  uint16 constant pV4 = 288;\\n  uint16 constant pV5 = 320;\\n  uint16 constant pV6 = 352;\\n  uint16 constant pU = 384;\\n  uint16 constant pPl = 416;\\n  uint16 constant pEval_t = 448;\\n  uint16 constant pA1 = 480;\\n  uint16 constant pB1 = 544;\\n  uint16 constant pZh = 608;\\n  uint16 constant pZhInv = 640;\\n\\n  uint16 constant pEval_l1 = 672;\\n\\n  uint16 constant pEval_l2 = 704;\\n\\n  uint16 constant pEval_l3 = 736;\\n\\n  uint16 constant lastMem = 768;\\n\\n  function verifyProof(\\n    bytes memory proof,\\n    uint[] memory pubSignals\\n  ) public view returns (bool) {\\n    assembly {\\n      /////////\\n      // Computes the inverse using the extended euclidean algorithm\\n      /////////\\n      function inverse(a, q) -> inv {\\n        let t := 0\\n        let newt := 1\\n        let r := q\\n        let newr := a\\n        let quotient\\n        let aux\\n\\n        for {\\n\\n        } newr {\\n\\n        } {\\n          quotient := sdiv(r, newr)\\n          aux := sub(t, mul(quotient, newt))\\n          t := newt\\n          newt := aux\\n\\n          aux := sub(r, mul(quotient, newr))\\n          r := newr\\n          newr := aux\\n        }\\n\\n        if gt(r, 1) {\\n          revert(0, 0)\\n        }\\n        if slt(t, 0) {\\n          t := add(t, q)\\n        }\\n\\n        inv := t\\n      }\\n\\n      ///////\\n      // Computes the inverse of an array of values\\n      // See https://vitalik.ca/general/2018/07/21/starks_part_3.html in section where explain fields operations\\n      //////\\n      function inverseArray(pVals, n) {\\n        let pAux := mload(0x40) // Point to the next free position\\n        let pIn := pVals\\n        let lastPIn := add(pVals, mul(n, 32)) // Read n elemnts\\n        let acc := mload(pIn) // Read the first element\\n        pIn := add(pIn, 32) // Point to the second element\\n        let inv\\n\\n        for {\\n\\n        } lt(pIn, lastPIn) {\\n          pAux := add(pAux, 32)\\n          pIn := add(pIn, 32)\\n        } {\\n          mstore(pAux, acc)\\n          acc := mulmod(acc, mload(pIn), q)\\n        }\\n        acc := inverse(acc, q)\\n\\n        // At this point pAux pint to the next free position we substract 1 to point to the last used\\n        pAux := sub(pAux, 32)\\n        // pIn points to the n+1 element, we substract to point to n\\n        pIn := sub(pIn, 32)\\n        lastPIn := pVals // We don't process the first element\\n        for {\\n\\n        } gt(pIn, lastPIn) {\\n          pAux := sub(pAux, 32)\\n          pIn := sub(pIn, 32)\\n        } {\\n          inv := mulmod(acc, mload(pAux), q)\\n          acc := mulmod(acc, mload(pIn), q)\\n          mstore(pIn, inv)\\n        }\\n        // pIn points to first element, we just set it.\\n        mstore(pIn, acc)\\n      }\\n\\n      function checkField(v) {\\n        if iszero(lt(v, q)) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      function checkInput(pProof) {\\n        if iszero(eq(mload(pProof), 800)) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n        checkField(mload(add(pProof, pEval_a)))\\n        checkField(mload(add(pProof, pEval_b)))\\n        checkField(mload(add(pProof, pEval_c)))\\n        checkField(mload(add(pProof, pEval_s1)))\\n        checkField(mload(add(pProof, pEval_s2)))\\n        checkField(mload(add(pProof, pEval_zw)))\\n        checkField(mload(add(pProof, pEval_r)))\\n\\n        // Points are checked in the point operations precompiled smart contracts\\n      }\\n\\n      function calculateChallanges(pProof, pMem, pPublic) {\\n        let a\\n        let b\\n\\n        mstore(add(pMem, 768), mload(add(pPublic, 32)))\\n\\n        mstore(add(pMem, 800), mload(add(pPublic, 64)))\\n\\n        mstore(add(pMem, 832), mload(add(pPublic, 96)))\\n\\n        mstore(add(pMem, 864), mload(add(pProof, pA)))\\n        mstore(add(pMem, 896), mload(add(pProof, add(pA, 32))))\\n        mstore(add(pMem, 928), mload(add(pProof, add(pA, 64))))\\n        mstore(add(pMem, 960), mload(add(pProof, add(pA, 96))))\\n        mstore(add(pMem, 992), mload(add(pProof, add(pA, 128))))\\n        mstore(add(pMem, 1024), mload(add(pProof, add(pA, 160))))\\n\\n        b := mod(keccak256(add(pMem, lastMem), 288), q)\\n        mstore(add(pMem, pBeta), b)\\n        mstore(add(pMem, pGamma), mod(keccak256(add(pMem, pBeta), 32), q))\\n        mstore(add(pMem, pAlpha), mod(keccak256(add(pProof, pZ), 64), q))\\n\\n        a := mod(keccak256(add(pProof, pT1), 192), q)\\n        mstore(add(pMem, pXi), a)\\n        mstore(add(pMem, pBetaXi), mulmod(b, a, q))\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        a := mulmod(a, a, q)\\n\\n        mstore(add(pMem, pXin), a)\\n        a := mod(add(sub(a, 1), q), q)\\n        mstore(add(pMem, pZh), a)\\n        mstore(add(pMem, pZhInv), a) // We will invert later together with lagrange pols\\n\\n        let v1 := mod(keccak256(add(pProof, pEval_a), 224), q)\\n        mstore(add(pMem, pV1), v1)\\n        a := mulmod(v1, v1, q)\\n        mstore(add(pMem, pV2), a)\\n        a := mulmod(a, v1, q)\\n        mstore(add(pMem, pV3), a)\\n        a := mulmod(a, v1, q)\\n        mstore(add(pMem, pV4), a)\\n        a := mulmod(a, v1, q)\\n        mstore(add(pMem, pV5), a)\\n        a := mulmod(a, v1, q)\\n        mstore(add(pMem, pV6), a)\\n\\n        mstore(add(pMem, pU), mod(keccak256(add(pProof, pWxi), 128), q))\\n      }\\n\\n      function calculateLagrange(pMem) {\\n        let w := 1\\n\\n        mstore(\\n          add(pMem, pEval_l1),\\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\\n        )\\n\\n        w := mulmod(w, w1, q)\\n\\n        mstore(\\n          add(pMem, pEval_l2),\\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\\n        )\\n\\n        w := mulmod(w, w1, q)\\n\\n        mstore(\\n          add(pMem, pEval_l3),\\n          mulmod(n, mod(add(sub(mload(add(pMem, pXi)), w), q), q), q)\\n        )\\n\\n        inverseArray(add(pMem, pZhInv), 4)\\n\\n        let zh := mload(add(pMem, pZh))\\n        w := 1\\n\\n        mstore(add(pMem, pEval_l1), mulmod(mload(add(pMem, pEval_l1)), zh, q))\\n\\n        w := mulmod(w, w1, q)\\n\\n        mstore(\\n          add(pMem, pEval_l2),\\n          mulmod(w, mulmod(mload(add(pMem, pEval_l2)), zh, q), q)\\n        )\\n\\n        w := mulmod(w, w1, q)\\n\\n        mstore(\\n          add(pMem, pEval_l3),\\n          mulmod(w, mulmod(mload(add(pMem, pEval_l3)), zh, q), q)\\n        )\\n      }\\n\\n      function calculatePl(pMem, pPub) {\\n        let pl := 0\\n\\n        pl := mod(\\n          add(\\n            sub(\\n              pl,\\n              mulmod(mload(add(pMem, pEval_l1)), mload(add(pPub, 32)), q)\\n            ),\\n            q\\n          ),\\n          q\\n        )\\n\\n        pl := mod(\\n          add(\\n            sub(\\n              pl,\\n              mulmod(mload(add(pMem, pEval_l2)), mload(add(pPub, 64)), q)\\n            ),\\n            q\\n          ),\\n          q\\n        )\\n\\n        pl := mod(\\n          add(\\n            sub(\\n              pl,\\n              mulmod(mload(add(pMem, pEval_l3)), mload(add(pPub, 96)), q)\\n            ),\\n            q\\n          ),\\n          q\\n        )\\n\\n        mstore(add(pMem, pPl), pl)\\n      }\\n\\n      function calculateT(pProof, pMem) {\\n        let t\\n        let t1\\n        let t2\\n        t := addmod(mload(add(pProof, pEval_r)), mload(add(pMem, pPl)), q)\\n\\n        t1 := mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pBeta)), q)\\n\\n        t1 := addmod(t1, mload(add(pProof, pEval_a)), q)\\n\\n        t1 := addmod(t1, mload(add(pMem, pGamma)), q)\\n\\n        t2 := mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pBeta)), q)\\n\\n        t2 := addmod(t2, mload(add(pProof, pEval_b)), q)\\n\\n        t2 := addmod(t2, mload(add(pMem, pGamma)), q)\\n\\n        t1 := mulmod(t1, t2, q)\\n\\n        t2 := addmod(mload(add(pProof, pEval_c)), mload(add(pMem, pGamma)), q)\\n\\n        t1 := mulmod(t1, t2, q)\\n        t1 := mulmod(t1, mload(add(pProof, pEval_zw)), q)\\n        t1 := mulmod(t1, mload(add(pMem, pAlpha)), q)\\n\\n        t2 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\\n\\n        t2 := mulmod(t2, mload(add(pMem, pAlpha)), q)\\n\\n        t1 := addmod(t1, t2, q)\\n\\n        t := mod(sub(add(t, q), t1), q)\\n        t := mulmod(t, mload(add(pMem, pZhInv)), q)\\n\\n        mstore(add(pMem, pEval_t), t)\\n      }\\n\\n      function g1_set(pR, pP) {\\n        mstore(pR, mload(pP))\\n        mstore(add(pR, 32), mload(add(pP, 32)))\\n      }\\n\\n      function g1_acc(pR, pP) {\\n        let mIn := mload(0x40)\\n        mstore(mIn, mload(pR))\\n        mstore(add(mIn, 32), mload(add(pR, 32)))\\n        mstore(add(mIn, 64), mload(pP))\\n        mstore(add(mIn, 96), mload(add(pP, 32)))\\n\\n        let success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      function g1_mulAcc(pR, pP, s) {\\n        let success\\n        let mIn := mload(0x40)\\n        mstore(mIn, mload(pP))\\n        mstore(add(mIn, 32), mload(add(pP, 32)))\\n        mstore(add(mIn, 64), s)\\n\\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n\\n        mstore(add(mIn, 64), mload(pR))\\n        mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      function g1_mulAccC(pR, x, y, s) {\\n        let success\\n        let mIn := mload(0x40)\\n        mstore(mIn, x)\\n        mstore(add(mIn, 32), y)\\n        mstore(add(mIn, 64), s)\\n\\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n\\n        mstore(add(mIn, 64), mload(pR))\\n        mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      function g1_mulSetC(pR, x, y, s) {\\n        let success\\n        let mIn := mload(0x40)\\n        mstore(mIn, x)\\n        mstore(add(mIn, 32), y)\\n        mstore(add(mIn, 64), s)\\n\\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, pR, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      function calculateA1(pProof, pMem) {\\n        let p := add(pMem, pA1)\\n        g1_set(p, add(pProof, pWxi))\\n        g1_mulAcc(p, add(pProof, pWxiw), mload(add(pMem, pU)))\\n      }\\n\\n      function calculateB1(pProof, pMem) {\\n        let s\\n        let s1\\n        let p := add(pMem, pB1)\\n\\n        // Calculate D\\n        s := mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV1)), q)\\n        g1_mulSetC(p, Qlx, Qly, s)\\n\\n        s := mulmod(s, mload(add(pProof, pEval_b)), q)\\n        g1_mulAccC(p, Qmx, Qmy, s)\\n\\n        s := mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV1)), q)\\n        g1_mulAccC(p, Qrx, Qry, s)\\n\\n        s := mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV1)), q)\\n        g1_mulAccC(p, Qox, Qoy, s)\\n\\n        s := mload(add(pMem, pV1))\\n        g1_mulAccC(p, Qcx, Qcy, s)\\n\\n        s := addmod(mload(add(pProof, pEval_a)), mload(add(pMem, pBetaXi)), q)\\n        s := addmod(s, mload(add(pMem, pGamma)), q)\\n        s1 := mulmod(k1, mload(add(pMem, pBetaXi)), q)\\n        s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\\n        s := mulmod(s, s1, q)\\n        s1 := mulmod(k2, mload(add(pMem, pBetaXi)), q)\\n        s1 := addmod(s1, mload(add(pProof, pEval_c)), q)\\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\\n        s := mulmod(s, s1, q)\\n        s := mulmod(s, mload(add(pMem, pAlpha)), q)\\n        s := mulmod(s, mload(add(pMem, pV1)), q)\\n        s1 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\\n        s1 := mulmod(s1, mload(add(pMem, pAlpha)), q)\\n        s1 := mulmod(s1, mload(add(pMem, pV1)), q)\\n        s := addmod(s, s1, q)\\n        s := addmod(s, mload(add(pMem, pU)), q)\\n        g1_mulAcc(p, add(pProof, pZ), s)\\n\\n        s := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s1)), q)\\n        s := addmod(s, mload(add(pProof, pEval_a)), q)\\n        s := addmod(s, mload(add(pMem, pGamma)), q)\\n        s1 := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s2)), q)\\n        s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\\n        s1 := addmod(s1, mload(add(pMem, pGamma)), q)\\n        s := mulmod(s, s1, q)\\n        s := mulmod(s, mload(add(pMem, pAlpha)), q)\\n        s := mulmod(s, mload(add(pMem, pV1)), q)\\n        s := mulmod(s, mload(add(pMem, pBeta)), q)\\n        s := mulmod(s, mload(add(pProof, pEval_zw)), q)\\n        s := mod(sub(q, s), q)\\n        g1_mulAccC(p, S3x, S3y, s)\\n\\n        // calculate F\\n        g1_acc(p, add(pProof, pT1))\\n\\n        s := mload(add(pMem, pXin))\\n        g1_mulAcc(p, add(pProof, pT2), s)\\n\\n        s := mulmod(s, s, q)\\n        g1_mulAcc(p, add(pProof, pT3), s)\\n\\n        g1_mulAcc(p, add(pProof, pA), mload(add(pMem, pV2)))\\n        g1_mulAcc(p, add(pProof, pB), mload(add(pMem, pV3)))\\n        g1_mulAcc(p, add(pProof, pC), mload(add(pMem, pV4)))\\n        g1_mulAccC(p, S1x, S1y, mload(add(pMem, pV5)))\\n        g1_mulAccC(p, S2x, S2y, mload(add(pMem, pV6)))\\n\\n        // calculate E\\n        s := mload(add(pMem, pEval_t))\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_r)), mload(add(pMem, pV1)), q),\\n          q\\n        )\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV2)), q),\\n          q\\n        )\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV3)), q),\\n          q\\n        )\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV4)), q),\\n          q\\n        )\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pV5)), q),\\n          q\\n        )\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pV6)), q),\\n          q\\n        )\\n        s := addmod(\\n          s,\\n          mulmod(mload(add(pProof, pEval_zw)), mload(add(pMem, pU)), q),\\n          q\\n        )\\n        s := mod(sub(q, s), q)\\n        g1_mulAccC(p, G1x, G1y, s)\\n\\n        // Last part of B\\n        s := mload(add(pMem, pXi))\\n        g1_mulAcc(p, add(pProof, pWxi), s)\\n\\n        s := mulmod(mload(add(pMem, pU)), mload(add(pMem, pXi)), q)\\n        s := mulmod(s, w1, q)\\n        g1_mulAcc(p, add(pProof, pWxiw), s)\\n      }\\n\\n      function checkPairing(pMem) -> isOk {\\n        let mIn := mload(0x40)\\n        mstore(mIn, mload(add(pMem, pA1)))\\n        mstore(add(mIn, 32), mload(add(add(pMem, pA1), 32)))\\n        mstore(add(mIn, 64), X2x2)\\n        mstore(add(mIn, 96), X2x1)\\n        mstore(add(mIn, 128), X2y2)\\n        mstore(add(mIn, 160), X2y1)\\n        mstore(add(mIn, 192), mload(add(pMem, pB1)))\\n        let s := mload(add(add(pMem, pB1), 32))\\n        s := mod(sub(qf, s), qf)\\n        mstore(add(mIn, 224), s)\\n        mstore(add(mIn, 256), G2x2)\\n        mstore(add(mIn, 288), G2x1)\\n        mstore(add(mIn, 320), G2y2)\\n        mstore(add(mIn, 352), G2y1)\\n\\n        let success := staticcall(sub(gas(), 2000), 8, mIn, 384, mIn, 0x20)\\n\\n        isOk := and(success, mload(mIn))\\n      }\\n\\n      let pMem := mload(0x40)\\n      mstore(0x40, add(pMem, lastMem))\\n\\n      checkInput(proof)\\n      calculateChallanges(proof, pMem, pubSignals)\\n      calculateLagrange(pMem)\\n      calculatePl(pMem, pubSignals)\\n      calculateT(proof, pMem)\\n      calculateA1(proof, pMem)\\n      calculateB1(proof, pMem)\\n      let isValid := checkPairing(pMem)\\n\\n      mstore(0x40, sub(pMem, lastMem))\\n      mstore(0, isValid)\\n      return(0, 0x20)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5c01f07c994a435bf23d6d0c8843c45509b3db5ec6e85af553abed71f726815b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6120da610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80631e8e1e131461003a575b600080fd5b610054600480360381019061004f9190611ff6565b61006a565b6040516100619190612089565b60405180910390f35b6000611d33565b600080600184846000805b82156100a6578284059150848202860390508495508094508282028403905082935080925061007c565b60018411156100b457600080fd5b60008612156100c35788860195505b85965050505050505092915050565b60405181602084028301815160208301925060005b8284101561012a578185527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018451830991506020850194506020840193506100e7565b6101547f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183610071565b91506020850394506020840393508592505b828411156101d0577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018551830990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845183099150808452602085039450602084039350610166565b81845250505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061020d576000805260206000f35b50565b610320815114610224576000805260206000f35b6102326102608201516101dc565b6102406102808201516101dc565b61024e6102a08201516101dc565b61025c6102c08201516101dc565b61026a6102e08201516101dc565b6102786103008201516101dc565b6102866103208201516101dc565b50565b60008060208501516103008501526040850151610320850152606085015161034085015260208301516103608501526020800183015161038085015260406020018301516103a085015260606020018301516103c085015260806020018301516103e085015260a06020018301516104008501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101206103008601200690508060208501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020808601200660408501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060e08501200660008501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c06101208501200691508160608501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820960a08501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991508160808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180600184030106915081610260850152816102808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160e0610260850120068060c08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181820992508260e08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101008601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101208601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101408601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101608601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160806101e086012006610180860152505050505050565b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183606086015103010662010000096102a08301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183606086015103010662010000096102c08301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183606086015103010662010000096102e083015261096c600461028084016100d2565b610260820151600191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102a0850151096102a08401527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180826102c08601510983096102c08401527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180826102e08601510983096102e0840152505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102a0860151098303010690507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408601516102c0860151098303010690507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160608601516102e086015109830301069050806101a0830152505050565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08601516103208601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102c08601510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102e08601510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408601516102a08601510890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018501030692507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028086015184099250826101c08601525050505050565b81518152602082015160208201525050565b6040518151815260208201516020820152825160408201526020830151606082015260408260808360066107d05a03fa80610f04576000805260206000f35b50505050565b6000604051835181526020840151602082015284604082015260408160608360076107d05a03fa915081610f42576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610f72576000805260206000f35b5050505050565b600060405183815284602082015285604082015260408160608360076107d05a03fa915081610fac576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610fdc576000805260206000f35b505050505050565b600060405183815284602082015285604082015260408360608360076107d05a03fa915081611017576000805260206000f35b505050505050565b6101e082016110326101e0830182610eb3565b611046610180840151610220840183610f0a565b505050565b60008061022084017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102608601510992506110ce837f23fc40edd878a984aad66227fee5b324dc94b58aeb5fb94a7aea4da3080fd0d97f2a3c9882e2c2ccaf369d36e240197294ee7e08222be0c27fd89579bc149fd14484610fe4565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028085015184099250611145837f0840e62b2051dba54f39f67aa8378deaf5040706107c07e872264febb2d33c417f0596193e767c419f8048719db59e78abb90a27462e6c0abf9fccc53a95e143ac84610f79565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102808601510992506111c0837f202d13a8e8617ec128a96647693127b45f5682c4ed87cccea03191ba11c224767f1aae2227f869a4be722aef8decdfd21b022c4b6938cf212287c510af11ad490b84610f79565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102a086015109925061123b837f08255d6261c89fc2e50084ac6f61e1080dc1150ec338948107366725f9d220c67f2f668215832b7a475ef414df89c5953a97694e24ab3671ff027f5e0f14b3931c84610f79565b60c0850151925061128e837f20c804a70cea99a4cb14ed7dc794eb73bad3c14c7a22a30f195bb6ba449faaa17f0bb5d99135d9aa0290c45bf3fd55b60628b96012e8c155e1b310f43d45c6451184610f79565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08601516102608601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160020991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160030991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102a0850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180860151840892506115698360e0860183610f0a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102c085015160208701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102e085015160208701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001030692506117d3837f14aeb46b309e072394d3198932228c7c1cc40a80cdc0ff777bb4b8d75c4506417f1005ea264c93e5ae4dbc77248261984440f697b66c403118da0c6dd38f51c41c84610f79565b6117e1610120850182610ec5565b608085015192506117f783610160860183610f0a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838409925061182c836101a0860183610f0a565b61183e60e08601516020860183610f0a565b6118516101008601516060860183610f0a565b61186461012086015160a0860183610f0a565b6118b56101408601517f2e887ec13ea6f0ead4e6c92d81bc5126299bd93dbb41ab33fb579bd0c03bda137f2d2561bbcd37897480ca9f6574625dd341e3421f3b4c48d245e620fd6424c99484610f79565b6119066101608601517f0880feca116b09dc393e0cdc01a48da71fd083e9a5c037378cab29b815beb0747f12744c29a70dd15dd183a0178208da618cc6a31d6edc9d60e5964425ceb44fcb84610f79565b6101c085015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060c087015161032087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060e087015161026087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061010087015161028087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101208701516102a087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101408701516102c087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101608701516102e087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061018087015161030087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103069250611ac6836002600184610f79565b60608501519250611adc836101e0860183610f0a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160608601516101808701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b784099250611b5f83610220860183610f0a565b5050505050565b60006040516101e0830151815260206101e08401015160208201527f02358e7a736bdfc5fcb05be367bd35a72d8594430e3972dcf0d98a608f22adf860408201527f1f5febd2360694235b74a19fb13a3c7414e0f05ef1094e82b4eec3920c70693660608201527f2436bd023a5f857294bc8f2455022392c479faf029e4d3f1ae5e89975070406f60808201527f18f323d975e78837af43456bcdb56c713ac8bf18a74001372059d3215e65297e60a082015261022083015160c08201526020610220840101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47030690508060e08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101008301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101208301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6101408301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6101608301526020826101808460086107d05a03fa825181169350505050919050565b6040516103008101604052611d4784610210565b611d52838286610289565b611d5b816107cc565b611d658382610a98565b611d6f8185610ba5565b611d79818561101f565b611d83818561104b565b611d8c81611b66565b61030082036040528060005260206000f35b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e0582611dbc565b810181811067ffffffffffffffff82111715611e2457611e23611dcd565b5b80604052505050565b6000611e37611d9e565b9050611e438282611dfc565b919050565b600067ffffffffffffffff821115611e6357611e62611dcd565b5b611e6c82611dbc565b9050602081019050919050565b82818337600083830152505050565b6000611e9b611e9684611e48565b611e2d565b905082815260208101848484011115611eb757611eb6611db7565b5b611ec2848285611e79565b509392505050565b600082601f830112611edf57611ede611db2565b5b8135611eef848260208601611e88565b91505092915050565b600067ffffffffffffffff821115611f1357611f12611dcd565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b611f3c81611f29565b8114611f4757600080fd5b50565b600081359050611f5981611f33565b92915050565b6000611f72611f6d84611ef8565b611e2d565b90508083825260208201905060208402830185811115611f9557611f94611f24565b5b835b81811015611fbe5780611faa8882611f4a565b845260208401935050602081019050611f97565b5050509392505050565b600082601f830112611fdd57611fdc611db2565b5b8135611fed848260208601611f5f565b91505092915050565b6000806040838503121561200d5761200c611da8565b5b600083013567ffffffffffffffff81111561202b5761202a611dad565b5b61203785828601611eca565b925050602083013567ffffffffffffffff81111561205857612057611dad565b5b61206485828601611fc8565b9150509250929050565b60008115159050919050565b6120838161206e565b82525050565b600060208201905061209e600083018461207a565b9291505056fea2646970667358221220239ff87d1996bfb6900566b35d79250f7ff973f263951b7fba32f48bb684b70264736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80631e8e1e131461003a575b600080fd5b610054600480360381019061004f9190611ff6565b61006a565b6040516100619190612089565b60405180910390f35b6000611d33565b600080600184846000805b82156100a6578284059150848202860390508495508094508282028403905082935080925061007c565b60018411156100b457600080fd5b60008612156100c35788860195505b85965050505050505092915050565b60405181602084028301815160208301925060005b8284101561012a578185527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018451830991506020850194506020840193506100e7565b6101547f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183610071565b91506020850394506020840393508592505b828411156101d0577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018551830990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845183099150808452602085039450602084039350610166565b81845250505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061020d576000805260206000f35b50565b610320815114610224576000805260206000f35b6102326102608201516101dc565b6102406102808201516101dc565b61024e6102a08201516101dc565b61025c6102c08201516101dc565b61026a6102e08201516101dc565b6102786103008201516101dc565b6102866103208201516101dc565b50565b60008060208501516103008501526040850151610320850152606085015161034085015260208301516103608501526020800183015161038085015260406020018301516103a085015260606020018301516103c085015260806020018301516103e085015260a06020018301516104008501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101206103008601200690508060208501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020808601200660408501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060e08501200660008501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c06101208501200691508160608501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820960a08501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991508160808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180600184030106915081610260850152816102808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160e0610260850120068060c08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181820992508260e08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101008601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101208601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101408601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101608601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160806101e086012006610180860152505050505050565b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183606086015103010662010000096102a08301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183606086015103010662010000096102c08301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183606086015103010662010000096102e083015261096c600461028084016100d2565b610260820151600191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102a0850151096102a08401527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180826102c08601510983096102c08401527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b7830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180826102e08601510983096102e0840152505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102a0860151098303010690507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408601516102c0860151098303010690507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160608601516102e086015109830301069050806101a0830152505050565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08601516103208601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102c08601510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102e08601510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408601516102a08601510890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018501030692507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028086015184099250826101c08601525050505050565b81518152602082015160208201525050565b6040518151815260208201516020820152825160408201526020830151606082015260408260808360066107d05a03fa80610f04576000805260206000f35b50505050565b6000604051835181526020840151602082015284604082015260408160608360076107d05a03fa915081610f42576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610f72576000805260206000f35b5050505050565b600060405183815284602082015285604082015260408160608360076107d05a03fa915081610fac576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610fdc576000805260206000f35b505050505050565b600060405183815284602082015285604082015260408360608360076107d05a03fa915081611017576000805260206000f35b505050505050565b6101e082016110326101e0830182610eb3565b611046610180840151610220840183610f0a565b505050565b60008061022084017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102608601510992506110ce837f23fc40edd878a984aad66227fee5b324dc94b58aeb5fb94a7aea4da3080fd0d97f2a3c9882e2c2ccaf369d36e240197294ee7e08222be0c27fd89579bc149fd14484610fe4565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028085015184099250611145837f0840e62b2051dba54f39f67aa8378deaf5040706107c07e872264febb2d33c417f0596193e767c419f8048719db59e78abb90a27462e6c0abf9fccc53a95e143ac84610f79565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102808601510992506111c0837f202d13a8e8617ec128a96647693127b45f5682c4ed87cccea03191ba11c224767f1aae2227f869a4be722aef8decdfd21b022c4b6938cf212287c510af11ad490b84610f79565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102a086015109925061123b837f08255d6261c89fc2e50084ac6f61e1080dc1150ec338948107366725f9d220c67f2f668215832b7a475ef414df89c5953a97694e24ab3671ff027f5e0f14b3931c84610f79565b60c0850151925061128e837f20c804a70cea99a4cb14ed7dc794eb73bad3c14c7a22a30f195bb6ba449faaa17f0bb5d99135d9aa0290c45bf3fd55b60628b96012e8c155e1b310f43d45c6451184610f79565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08601516102608601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160020991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160030991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102a0850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180860151840892506115698360e0860183610f0a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102c085015160208701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102e085015160208701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001030692506117d3837f14aeb46b309e072394d3198932228c7c1cc40a80cdc0ff777bb4b8d75c4506417f1005ea264c93e5ae4dbc77248261984440f697b66c403118da0c6dd38f51c41c84610f79565b6117e1610120850182610ec5565b608085015192506117f783610160860183610f0a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838409925061182c836101a0860183610f0a565b61183e60e08601516020860183610f0a565b6118516101008601516060860183610f0a565b61186461012086015160a0860183610f0a565b6118b56101408601517f2e887ec13ea6f0ead4e6c92d81bc5126299bd93dbb41ab33fb579bd0c03bda137f2d2561bbcd37897480ca9f6574625dd341e3421f3b4c48d245e620fd6424c99484610f79565b6119066101608601517f0880feca116b09dc393e0cdc01a48da71fd083e9a5c037378cab29b815beb0747f12744c29a70dd15dd183a0178208da618cc6a31d6edc9d60e5964425ceb44fcb84610f79565b6101c085015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060c087015161032087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060e087015161026087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061010087015161028087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101208701516102a087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101408701516102c087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101608701516102e087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061018087015161030087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103069250611ac6836002600184610f79565b60608501519250611adc836101e0860183610f0a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160608601516101808701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017eeeb2cb5981ed45649abebde081dcff16c8601de4347e7dd1628ba2daac43b784099250611b5f83610220860183610f0a565b5050505050565b60006040516101e0830151815260206101e08401015160208201527f02358e7a736bdfc5fcb05be367bd35a72d8594430e3972dcf0d98a608f22adf860408201527f1f5febd2360694235b74a19fb13a3c7414e0f05ef1094e82b4eec3920c70693660608201527f2436bd023a5f857294bc8f2455022392c479faf029e4d3f1ae5e89975070406f60808201527f18f323d975e78837af43456bcdb56c713ac8bf18a74001372059d3215e65297e60a082015261022083015160c08201526020610220840101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47030690508060e08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101008301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101208301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6101408301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6101608301526020826101808460086107d05a03fa825181169350505050919050565b6040516103008101604052611d4784610210565b611d52838286610289565b611d5b816107cc565b611d658382610a98565b611d6f8185610ba5565b611d79818561101f565b611d83818561104b565b611d8c81611b66565b61030082036040528060005260206000f35b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e0582611dbc565b810181811067ffffffffffffffff82111715611e2457611e23611dcd565b5b80604052505050565b6000611e37611d9e565b9050611e438282611dfc565b919050565b600067ffffffffffffffff821115611e6357611e62611dcd565b5b611e6c82611dbc565b9050602081019050919050565b82818337600083830152505050565b6000611e9b611e9684611e48565b611e2d565b905082815260208101848484011115611eb757611eb6611db7565b5b611ec2848285611e79565b509392505050565b600082601f830112611edf57611ede611db2565b5b8135611eef848260208601611e88565b91505092915050565b600067ffffffffffffffff821115611f1357611f12611dcd565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b611f3c81611f29565b8114611f4757600080fd5b50565b600081359050611f5981611f33565b92915050565b6000611f72611f6d84611ef8565b611e2d565b90508083825260208201905060208402830185811115611f9557611f94611f24565b5b835b81811015611fbe5780611faa8882611f4a565b845260208401935050602081019050611f97565b5050509392505050565b600082601f830112611fdd57611fdc611db2565b5b8135611fed848260208601611f5f565b91505092915050565b6000806040838503121561200d5761200c611da8565b5b600083013567ffffffffffffffff81111561202b5761202a611dad565b5b61203785828601611eca565b925050602083013567ffffffffffffffff81111561205857612057611dad565b5b61206485828601611fc8565b9150509250929050565b60008115159050919050565b6120838161206e565b82525050565b600060208201905061209e600083018461207a565b9291505056fea2646970667358221220239ff87d1996bfb6900566b35d79250f7ff973f263951b7fba32f48bb684b70264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}